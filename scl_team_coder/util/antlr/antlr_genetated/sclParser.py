# Generated from scl.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,156,906,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,1,0,5,0,138,8,0,10,0,12,0,141,9,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,155,8,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,170,8,3,10,3,12,3,173,
        9,3,1,3,1,3,3,3,177,8,3,1,3,1,3,1,4,1,4,1,5,4,5,184,8,5,11,5,12,
        5,185,1,6,1,6,4,6,190,8,6,11,6,12,6,191,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,4,7,202,8,7,11,7,12,7,203,1,7,1,7,3,7,208,8,7,1,7,3,7,211,
        8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,219,8,8,1,9,1,9,1,9,3,9,224,8,9,
        1,9,1,9,3,9,228,8,9,3,9,230,8,9,1,9,3,9,233,8,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,3,10,243,8,10,1,10,1,10,1,11,1,11,1,11,5,11,
        250,8,11,10,11,12,11,253,9,11,1,11,3,11,256,8,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,5,12,266,8,12,10,12,12,12,269,9,12,1,12,
        3,12,272,8,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,3,16,286,8,16,1,16,5,16,289,8,16,10,16,12,16,292,9,16,
        1,17,1,17,1,17,5,17,297,8,17,10,17,12,17,300,9,17,1,17,1,17,3,17,
        304,8,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,312,8,17,10,17,12,17,
        315,9,17,3,17,317,8,17,1,17,1,17,1,17,5,17,322,8,17,10,17,12,17,
        325,9,17,1,17,1,17,3,17,329,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,5,17,338,8,17,10,17,12,17,341,9,17,1,17,1,17,3,17,345,8,17,1,
        17,1,17,1,17,5,17,350,8,17,10,17,12,17,353,9,17,1,17,1,17,3,17,357,
        8,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,365,8,17,10,17,12,17,368,
        9,17,3,17,370,8,17,1,17,1,17,1,17,5,17,375,8,17,10,17,12,17,378,
        9,17,1,17,1,17,3,17,382,8,17,1,17,1,17,1,17,1,17,1,17,3,17,389,8,
        17,1,17,1,17,1,17,1,17,1,17,3,17,396,8,17,3,17,398,8,17,1,18,1,18,
        1,19,1,19,1,19,3,19,405,8,19,1,19,1,19,1,19,1,19,3,19,411,8,19,1,
        19,1,19,3,19,415,8,19,1,19,1,19,1,19,3,19,420,8,19,1,19,3,19,423,
        8,19,1,20,1,20,1,20,1,20,3,20,429,8,20,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,447,
        8,22,1,22,1,22,1,22,1,22,1,22,3,22,454,8,22,1,22,1,22,1,22,1,22,
        1,22,3,22,461,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,493,8,22,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,504,8,24,10,24,12,24,507,
        9,24,1,24,1,24,1,24,1,24,1,24,5,24,514,8,24,10,24,12,24,517,9,24,
        1,24,3,24,520,8,24,1,25,3,25,523,8,25,1,25,5,25,526,8,25,10,25,12,
        25,529,9,25,1,26,1,26,1,26,3,26,534,8,26,1,26,1,26,1,26,3,26,539,
        8,26,1,26,3,26,542,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,3,28,555,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,3,33,575,
        8,33,1,33,5,33,578,8,33,10,33,12,33,581,9,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,597,8,36,
        10,36,12,36,600,9,36,3,36,602,8,36,1,36,5,36,605,8,36,10,36,12,36,
        608,9,36,1,36,1,36,1,37,5,37,613,8,37,10,37,12,37,616,9,37,1,38,
        1,38,1,38,3,38,621,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
        656,8,39,1,40,1,40,1,40,1,40,1,40,5,40,663,8,40,10,40,12,40,666,
        9,40,1,40,1,40,1,40,1,40,1,40,3,40,673,8,40,1,40,1,40,3,40,677,8,
        40,1,41,1,41,1,41,1,42,1,42,3,42,684,8,42,1,43,1,43,1,44,1,44,1,
        45,4,45,691,8,45,11,45,12,45,692,1,46,1,46,1,47,4,47,698,8,47,11,
        47,12,47,699,1,48,1,48,1,48,1,49,1,49,1,49,5,49,708,8,49,10,49,12,
        49,711,9,49,1,49,1,49,1,49,1,49,1,49,5,49,718,8,49,10,49,12,49,721,
        9,49,1,49,1,49,3,49,725,8,49,1,50,1,50,1,50,3,50,730,8,50,1,51,4,
        51,733,8,51,11,51,12,51,734,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,
        54,1,55,1,55,1,56,1,56,1,56,1,56,5,56,751,8,56,10,56,12,56,754,9,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,
        56,768,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,818,
        8,56,10,56,12,56,821,9,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,833,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,3,62,857,8,62,1,63,1,63,3,63,861,8,63,1,63,1,63,1,63,3,63,866,
        8,63,1,64,1,64,1,64,3,64,871,8,64,1,64,1,64,5,64,875,8,64,10,64,
        12,64,878,9,64,1,65,1,65,1,65,1,65,1,65,1,65,3,65,886,8,65,3,65,
        888,8,65,1,66,1,66,1,66,1,66,5,66,894,8,66,10,66,12,66,897,9,66,
        1,66,1,66,1,67,1,67,1,67,3,67,904,8,67,1,67,0,2,112,128,68,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,0,9,1,0,5,6,1,0,8,9,1,0,30,31,1,0,84,85,2,0,17,17,
        86,86,2,0,41,41,88,88,2,0,35,35,105,108,1,0,121,122,1,0,139,141,
        1027,0,139,1,0,0,0,2,142,1,0,0,0,4,148,1,0,0,0,6,160,1,0,0,0,8,180,
        1,0,0,0,10,183,1,0,0,0,12,187,1,0,0,0,14,197,1,0,0,0,16,218,1,0,
        0,0,18,220,1,0,0,0,20,238,1,0,0,0,22,246,1,0,0,0,24,260,1,0,0,0,
        26,276,1,0,0,0,28,278,1,0,0,0,30,280,1,0,0,0,32,290,1,0,0,0,34,397,
        1,0,0,0,36,399,1,0,0,0,38,422,1,0,0,0,40,428,1,0,0,0,42,430,1,0,
        0,0,44,492,1,0,0,0,46,494,1,0,0,0,48,519,1,0,0,0,50,527,1,0,0,0,
        52,530,1,0,0,0,54,543,1,0,0,0,56,554,1,0,0,0,58,556,1,0,0,0,60,560,
        1,0,0,0,62,564,1,0,0,0,64,568,1,0,0,0,66,572,1,0,0,0,68,584,1,0,
        0,0,70,588,1,0,0,0,72,592,1,0,0,0,74,614,1,0,0,0,76,620,1,0,0,0,
        78,655,1,0,0,0,80,676,1,0,0,0,82,678,1,0,0,0,84,683,1,0,0,0,86,685,
        1,0,0,0,88,687,1,0,0,0,90,690,1,0,0,0,92,694,1,0,0,0,94,697,1,0,
        0,0,96,701,1,0,0,0,98,724,1,0,0,0,100,729,1,0,0,0,102,732,1,0,0,
        0,104,736,1,0,0,0,106,738,1,0,0,0,108,742,1,0,0,0,110,744,1,0,0,
        0,112,767,1,0,0,0,114,822,1,0,0,0,116,832,1,0,0,0,118,834,1,0,0,
        0,120,836,1,0,0,0,122,838,1,0,0,0,124,856,1,0,0,0,126,865,1,0,0,
        0,128,867,1,0,0,0,130,887,1,0,0,0,132,889,1,0,0,0,134,903,1,0,0,
        0,136,138,3,16,8,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,
        0,139,140,1,0,0,0,140,1,1,0,0,0,141,139,1,0,0,0,142,143,5,1,0,0,
        143,144,3,8,4,0,144,145,5,2,0,0,145,146,3,10,5,0,146,147,5,3,0,0,
        147,3,1,0,0,0,148,149,5,4,0,0,149,150,3,84,42,0,150,151,7,0,0,0,
        151,154,3,86,43,0,152,153,5,7,0,0,153,155,3,88,44,0,154,152,1,0,
        0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,5,2,0,0,157,158,3,90,
        45,0,158,159,7,1,0,0,159,5,1,0,0,0,160,161,5,10,0,0,161,162,3,92,
        46,0,162,163,5,131,0,0,163,171,3,94,47,0,164,165,5,11,0,0,165,166,
        3,92,46,0,166,167,5,131,0,0,167,168,3,94,47,0,168,170,1,0,0,0,169,
        164,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,
        176,1,0,0,0,173,171,1,0,0,0,174,175,5,130,0,0,175,177,3,94,47,0,
        176,174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,5,12,0,0,
        179,7,1,0,0,0,180,181,3,112,56,0,181,9,1,0,0,0,182,184,3,78,39,0,
        183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,
        186,11,1,0,0,0,187,189,5,13,0,0,188,190,3,78,39,0,189,188,1,0,0,
        0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,
        0,193,194,5,14,0,0,194,195,3,112,56,0,195,196,5,15,0,0,196,13,1,
        0,0,0,197,198,5,16,0,0,198,199,3,112,56,0,199,201,5,17,0,0,200,202,
        3,96,48,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,
        1,0,0,0,204,210,1,0,0,0,205,207,5,130,0,0,206,208,5,18,0,0,207,206,
        1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,211,3,104,52,0,210,205,
        1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,5,19,0,0,213,15,
        1,0,0,0,214,219,3,18,9,0,215,219,3,20,10,0,216,219,3,22,11,0,217,
        219,3,24,12,0,218,214,1,0,0,0,218,215,1,0,0,0,218,216,1,0,0,0,218,
        217,1,0,0,0,219,17,1,0,0,0,220,221,5,20,0,0,221,223,3,26,13,0,222,
        224,3,28,14,0,223,222,1,0,0,0,223,224,1,0,0,0,224,229,1,0,0,0,225,
        227,3,30,15,0,226,228,5,21,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,
        230,1,0,0,0,229,225,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,
        233,3,54,27,0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,
        235,5,22,0,0,235,236,3,50,25,0,236,237,5,23,0,0,237,19,1,0,0,0,238,
        239,5,24,0,0,239,240,3,26,13,0,240,242,3,30,15,0,241,243,5,21,0,
        0,242,241,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,245,5,25,0,
        0,245,21,1,0,0,0,246,247,5,26,0,0,247,251,3,26,13,0,248,250,3,56,
        28,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,
        0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,256,5,22,0,0,255,254,1,0,
        0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,3,74,37,0,258,259,5,
        27,0,0,259,23,1,0,0,0,260,261,5,28,0,0,261,262,3,26,13,0,262,263,
        5,18,0,0,263,267,3,76,38,0,264,266,3,56,28,0,265,264,1,0,0,0,266,
        269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,271,1,0,0,0,269,
        267,1,0,0,0,270,272,5,22,0,0,271,270,1,0,0,0,271,272,1,0,0,0,272,
        273,1,0,0,0,273,274,3,74,37,0,274,275,5,29,0,0,275,25,1,0,0,0,276,
        277,3,126,63,0,277,27,1,0,0,0,278,279,3,126,63,0,279,29,1,0,0,0,
        280,281,7,2,0,0,281,282,3,32,16,0,282,283,5,32,0,0,283,31,1,0,0,
        0,284,286,3,34,17,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,
        0,0,287,289,5,21,0,0,288,285,1,0,0,0,289,292,1,0,0,0,290,288,1,0,
        0,0,290,291,1,0,0,0,291,33,1,0,0,0,292,290,1,0,0,0,293,298,3,126,
        63,0,294,295,5,33,0,0,295,297,3,126,63,0,296,294,1,0,0,0,297,300,
        1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,303,1,0,0,0,300,298,
        1,0,0,0,301,302,5,34,0,0,302,304,3,36,18,0,303,301,1,0,0,0,303,304,
        1,0,0,0,304,305,1,0,0,0,305,306,5,18,0,0,306,316,3,40,20,0,307,308,
        5,35,0,0,308,313,3,38,19,0,309,310,5,33,0,0,310,312,3,38,19,0,311,
        309,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,
        317,1,0,0,0,315,313,1,0,0,0,316,307,1,0,0,0,316,317,1,0,0,0,317,
        398,1,0,0,0,318,323,3,126,63,0,319,320,5,33,0,0,320,322,3,126,63,
        0,321,319,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,
        0,324,328,1,0,0,0,325,323,1,0,0,0,326,327,5,34,0,0,327,329,3,36,
        18,0,328,326,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,18,
        0,0,331,344,3,40,20,0,332,333,5,35,0,0,333,334,5,36,0,0,334,339,
        3,38,19,0,335,336,5,33,0,0,336,338,3,38,19,0,337,335,1,0,0,0,338,
        341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,
        339,1,0,0,0,342,343,5,37,0,0,343,345,1,0,0,0,344,332,1,0,0,0,344,
        345,1,0,0,0,345,398,1,0,0,0,346,351,3,126,63,0,347,348,5,33,0,0,
        348,350,3,126,63,0,349,347,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,
        0,351,352,1,0,0,0,352,356,1,0,0,0,353,351,1,0,0,0,354,355,5,34,0,
        0,355,357,3,36,18,0,356,354,1,0,0,0,356,357,1,0,0,0,357,358,1,0,
        0,0,358,359,5,18,0,0,359,369,3,40,20,0,360,361,5,35,0,0,361,366,
        5,149,0,0,362,363,5,33,0,0,363,365,5,149,0,0,364,362,1,0,0,0,365,
        368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,370,1,0,0,0,368,
        366,1,0,0,0,369,360,1,0,0,0,369,370,1,0,0,0,370,398,1,0,0,0,371,
        376,3,126,63,0,372,373,5,33,0,0,373,375,3,126,63,0,374,372,1,0,0,
        0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,381,1,0,0,
        0,378,376,1,0,0,0,379,380,5,34,0,0,380,382,3,36,18,0,381,379,1,0,
        0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,384,5,18,0,0,384,395,3,40,
        20,0,385,386,5,35,0,0,386,388,5,36,0,0,387,389,3,38,19,0,388,387,
        1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,5,38,0,0,391,392,
        3,38,19,0,392,393,5,39,0,0,393,394,5,37,0,0,394,396,1,0,0,0,395,
        385,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,293,1,0,0,0,397,
        318,1,0,0,0,397,346,1,0,0,0,397,371,1,0,0,0,398,35,1,0,0,0,399,400,
        3,126,63,0,400,37,1,0,0,0,401,402,3,40,20,0,402,403,5,40,0,0,403,
        405,1,0,0,0,404,401,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,
        423,3,124,62,0,407,408,3,124,62,0,408,409,5,40,0,0,409,411,1,0,0,
        0,410,407,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,423,3,124,
        62,0,413,415,5,41,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,419,1,
        0,0,0,416,417,3,40,20,0,417,418,5,40,0,0,418,420,1,0,0,0,419,416,
        1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,423,3,122,61,0,422,404,
        1,0,0,0,422,410,1,0,0,0,422,414,1,0,0,0,423,39,1,0,0,0,424,429,3,
        44,22,0,425,429,3,46,23,0,426,429,3,30,15,0,427,429,3,42,21,0,428,
        424,1,0,0,0,428,425,1,0,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,
        41,1,0,0,0,430,431,3,126,63,0,431,43,1,0,0,0,432,493,5,42,0,0,433,
        493,5,43,0,0,434,493,5,44,0,0,435,493,5,45,0,0,436,493,5,46,0,0,
        437,493,5,47,0,0,438,493,5,48,0,0,439,493,5,49,0,0,440,493,5,50,
        0,0,441,446,5,51,0,0,442,443,5,36,0,0,443,444,3,124,62,0,444,445,
        5,37,0,0,445,447,1,0,0,0,446,442,1,0,0,0,446,447,1,0,0,0,447,493,
        1,0,0,0,448,453,5,52,0,0,449,450,5,36,0,0,450,451,3,124,62,0,451,
        452,5,37,0,0,452,454,1,0,0,0,453,449,1,0,0,0,453,454,1,0,0,0,454,
        493,1,0,0,0,455,460,5,53,0,0,456,457,5,36,0,0,457,458,3,124,62,0,
        458,459,5,37,0,0,459,461,1,0,0,0,460,456,1,0,0,0,460,461,1,0,0,0,
        461,493,1,0,0,0,462,493,5,54,0,0,463,493,5,55,0,0,464,493,5,56,0,
        0,465,493,5,57,0,0,466,493,5,58,0,0,467,493,5,59,0,0,468,493,5,60,
        0,0,469,493,5,61,0,0,470,493,5,62,0,0,471,493,5,63,0,0,472,493,5,
        64,0,0,473,493,5,65,0,0,474,493,5,66,0,0,475,493,5,67,0,0,476,493,
        5,68,0,0,477,493,5,69,0,0,478,493,5,70,0,0,479,493,5,71,0,0,480,
        493,5,72,0,0,481,493,5,73,0,0,482,493,5,74,0,0,483,493,5,75,0,0,
        484,493,5,76,0,0,485,493,5,77,0,0,486,493,5,78,0,0,487,493,5,79,
        0,0,488,493,5,80,0,0,489,493,5,81,0,0,490,493,5,82,0,0,491,493,5,
        83,0,0,492,432,1,0,0,0,492,433,1,0,0,0,492,434,1,0,0,0,492,435,1,
        0,0,0,492,436,1,0,0,0,492,437,1,0,0,0,492,438,1,0,0,0,492,439,1,
        0,0,0,492,440,1,0,0,0,492,441,1,0,0,0,492,448,1,0,0,0,492,455,1,
        0,0,0,492,462,1,0,0,0,492,463,1,0,0,0,492,464,1,0,0,0,492,465,1,
        0,0,0,492,466,1,0,0,0,492,467,1,0,0,0,492,468,1,0,0,0,492,469,1,
        0,0,0,492,470,1,0,0,0,492,471,1,0,0,0,492,472,1,0,0,0,492,473,1,
        0,0,0,492,474,1,0,0,0,492,475,1,0,0,0,492,476,1,0,0,0,492,477,1,
        0,0,0,492,478,1,0,0,0,492,479,1,0,0,0,492,480,1,0,0,0,492,481,1,
        0,0,0,492,482,1,0,0,0,492,483,1,0,0,0,492,484,1,0,0,0,492,485,1,
        0,0,0,492,486,1,0,0,0,492,487,1,0,0,0,492,488,1,0,0,0,492,489,1,
        0,0,0,492,490,1,0,0,0,492,491,1,0,0,0,493,45,1,0,0,0,494,495,7,3,
        0,0,495,496,3,48,24,0,496,497,7,4,0,0,497,498,3,40,20,0,498,47,1,
        0,0,0,499,500,5,36,0,0,500,505,5,127,0,0,501,502,5,33,0,0,502,504,
        5,127,0,0,503,501,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,
        1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,520,5,37,0,0,509,510,
        5,36,0,0,510,515,5,87,0,0,511,512,5,33,0,0,512,514,5,87,0,0,513,
        511,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,
        518,1,0,0,0,517,515,1,0,0,0,518,520,5,37,0,0,519,499,1,0,0,0,519,
        509,1,0,0,0,520,49,1,0,0,0,521,523,3,52,26,0,522,521,1,0,0,0,522,
        523,1,0,0,0,523,524,1,0,0,0,524,526,5,21,0,0,525,522,1,0,0,0,526,
        529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,51,1,0,0,0,529,527,
        1,0,0,0,530,531,3,126,63,0,531,533,5,35,0,0,532,534,7,5,0,0,533,
        532,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,541,3,124,62,0,536,
        538,5,33,0,0,537,539,7,5,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,
        540,1,0,0,0,540,542,3,124,62,0,541,536,1,0,0,0,541,542,1,0,0,0,542,
        53,1,0,0,0,543,544,5,89,0,0,544,545,3,126,63,0,545,55,1,0,0,0,546,
        555,3,58,29,0,547,555,3,60,30,0,548,555,3,62,31,0,549,555,3,64,32,
        0,550,555,3,66,33,0,551,555,3,68,34,0,552,555,3,72,36,0,553,555,
        3,70,35,0,554,546,1,0,0,0,554,547,1,0,0,0,554,548,1,0,0,0,554,549,
        1,0,0,0,554,550,1,0,0,0,554,551,1,0,0,0,554,552,1,0,0,0,554,553,
        1,0,0,0,555,57,1,0,0,0,556,557,5,90,0,0,557,558,3,32,16,0,558,559,
        5,129,0,0,559,59,1,0,0,0,560,561,5,91,0,0,561,562,3,32,16,0,562,
        563,5,129,0,0,563,61,1,0,0,0,564,565,5,92,0,0,565,566,3,32,16,0,
        566,567,5,129,0,0,567,63,1,0,0,0,568,569,5,93,0,0,569,570,3,32,16,
        0,570,571,5,129,0,0,571,65,1,0,0,0,572,579,5,94,0,0,573,575,3,106,
        53,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,578,5,21,
        0,0,577,574,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,
        0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,583,5,95,0,0,583,67,1,0,
        0,0,584,585,5,96,0,0,585,586,3,32,16,0,586,587,5,129,0,0,587,69,
        1,0,0,0,588,589,5,97,0,0,589,590,3,32,16,0,590,591,5,129,0,0,591,
        71,1,0,0,0,592,601,5,98,0,0,593,598,3,126,63,0,594,595,5,33,0,0,
        595,597,3,126,63,0,596,594,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,
        0,598,599,1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,601,593,1,0,0,
        0,601,602,1,0,0,0,602,606,1,0,0,0,603,605,5,21,0,0,604,603,1,0,0,
        0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,609,1,0,0,
        0,608,606,1,0,0,0,609,610,5,99,0,0,610,73,1,0,0,0,611,613,3,78,39,
        0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,
        0,615,75,1,0,0,0,616,614,1,0,0,0,617,621,5,100,0,0,618,621,3,44,
        22,0,619,621,3,42,21,0,620,617,1,0,0,0,620,618,1,0,0,0,620,619,1,
        0,0,0,621,77,1,0,0,0,622,623,3,6,3,0,623,624,5,21,0,0,624,656,1,
        0,0,0,625,626,3,14,7,0,626,627,5,21,0,0,627,656,1,0,0,0,628,629,
        3,4,2,0,629,630,5,21,0,0,630,656,1,0,0,0,631,632,3,2,1,0,632,633,
        5,21,0,0,633,656,1,0,0,0,634,635,3,12,6,0,635,636,5,21,0,0,636,656,
        1,0,0,0,637,638,5,101,0,0,638,656,5,21,0,0,639,640,5,102,0,0,640,
        656,5,21,0,0,641,642,5,103,0,0,642,656,5,21,0,0,643,644,5,104,0,
        0,644,645,3,126,63,0,645,646,5,21,0,0,646,656,1,0,0,0,647,656,3,
        82,41,0,648,649,3,106,53,0,649,650,5,21,0,0,650,656,1,0,0,0,651,
        652,3,80,40,0,652,653,5,21,0,0,653,656,1,0,0,0,654,656,5,21,0,0,
        655,622,1,0,0,0,655,625,1,0,0,0,655,628,1,0,0,0,655,631,1,0,0,0,
        655,634,1,0,0,0,655,637,1,0,0,0,655,639,1,0,0,0,655,641,1,0,0,0,
        655,643,1,0,0,0,655,647,1,0,0,0,655,648,1,0,0,0,655,651,1,0,0,0,
        655,654,1,0,0,0,656,79,1,0,0,0,657,658,3,126,63,0,658,659,5,38,0,
        0,659,664,3,116,58,0,660,661,5,33,0,0,661,663,3,116,58,0,662,660,
        1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,
        1,0,0,0,666,664,1,0,0,0,667,668,5,39,0,0,668,677,1,0,0,0,669,670,
        3,126,63,0,670,672,5,38,0,0,671,673,3,112,56,0,672,671,1,0,0,0,672,
        673,1,0,0,0,673,674,1,0,0,0,674,675,5,39,0,0,675,677,1,0,0,0,676,
        657,1,0,0,0,676,669,1,0,0,0,677,81,1,0,0,0,678,679,3,126,63,0,679,
        680,5,18,0,0,680,83,1,0,0,0,681,684,3,106,53,0,682,684,3,126,63,
        0,683,681,1,0,0,0,683,682,1,0,0,0,684,85,1,0,0,0,685,686,3,112,56,
        0,686,87,1,0,0,0,687,688,3,112,56,0,688,89,1,0,0,0,689,691,3,78,
        39,0,690,689,1,0,0,0,691,692,1,0,0,0,692,690,1,0,0,0,692,693,1,0,
        0,0,693,91,1,0,0,0,694,695,3,112,56,0,695,93,1,0,0,0,696,698,3,78,
        39,0,697,696,1,0,0,0,698,699,1,0,0,0,699,697,1,0,0,0,699,700,1,0,
        0,0,700,95,1,0,0,0,701,702,3,98,49,0,702,703,3,102,51,0,703,97,1,
        0,0,0,704,709,3,100,50,0,705,706,5,33,0,0,706,708,3,100,50,0,707,
        705,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,
        712,1,0,0,0,711,709,1,0,0,0,712,713,5,18,0,0,713,725,1,0,0,0,714,
        719,3,100,50,0,715,716,5,128,0,0,716,718,3,100,50,0,717,715,1,0,
        0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,722,1,0,
        0,0,721,719,1,0,0,0,722,723,5,18,0,0,723,725,1,0,0,0,724,704,1,0,
        0,0,724,714,1,0,0,0,725,99,1,0,0,0,726,730,3,126,63,0,727,730,3,
        124,62,0,728,730,5,127,0,0,729,726,1,0,0,0,729,727,1,0,0,0,729,728,
        1,0,0,0,730,101,1,0,0,0,731,733,3,78,39,0,732,731,1,0,0,0,733,734,
        1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,103,1,0,0,0,736,737,
        3,102,51,0,737,105,1,0,0,0,738,739,3,108,54,0,739,740,7,6,0,0,740,
        741,3,110,55,0,741,107,1,0,0,0,742,743,3,112,56,0,743,109,1,0,0,
        0,744,745,3,112,56,0,745,111,1,0,0,0,746,747,6,56,-1,0,747,752,3,
        80,40,0,748,749,5,109,0,0,749,751,3,112,56,0,750,748,1,0,0,0,751,
        754,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,768,1,0,0,0,754,
        752,1,0,0,0,755,756,5,120,0,0,756,768,3,112,56,9,757,768,3,114,57,
        0,758,768,3,124,62,0,759,760,5,88,0,0,760,768,3,112,56,3,761,762,
        5,41,0,0,762,768,3,112,56,2,763,764,5,38,0,0,764,765,3,112,56,0,
        765,766,5,39,0,0,766,768,1,0,0,0,767,746,1,0,0,0,767,755,1,0,0,0,
        767,757,1,0,0,0,767,758,1,0,0,0,767,759,1,0,0,0,767,761,1,0,0,0,
        767,763,1,0,0,0,768,819,1,0,0,0,769,770,10,22,0,0,770,771,5,110,
        0,0,771,818,3,112,56,23,772,773,10,21,0,0,773,774,5,87,0,0,774,818,
        3,112,56,22,775,776,10,20,0,0,776,777,5,111,0,0,777,818,3,112,56,
        21,778,779,10,19,0,0,779,780,5,88,0,0,780,818,3,112,56,20,781,782,
        10,18,0,0,782,783,5,41,0,0,783,818,3,112,56,19,784,785,10,17,0,0,
        785,786,5,112,0,0,786,818,3,112,56,18,787,788,10,16,0,0,788,789,
        5,113,0,0,789,818,3,112,56,17,790,791,10,15,0,0,791,792,5,114,0,
        0,792,818,3,112,56,16,793,794,10,14,0,0,794,795,5,115,0,0,795,818,
        3,112,56,15,796,797,10,13,0,0,797,798,5,116,0,0,798,818,3,112,56,
        14,799,800,10,12,0,0,800,801,5,117,0,0,801,818,3,112,56,13,802,803,
        10,11,0,0,803,804,5,118,0,0,804,818,3,112,56,12,805,806,10,10,0,
        0,806,807,5,119,0,0,807,818,3,112,56,11,808,809,10,8,0,0,809,810,
        7,7,0,0,810,818,3,112,56,9,811,812,10,7,0,0,812,813,5,123,0,0,813,
        818,3,112,56,8,814,815,10,6,0,0,815,816,5,124,0,0,816,818,3,112,
        56,7,817,769,1,0,0,0,817,772,1,0,0,0,817,775,1,0,0,0,817,778,1,0,
        0,0,817,781,1,0,0,0,817,784,1,0,0,0,817,787,1,0,0,0,817,790,1,0,
        0,0,817,793,1,0,0,0,817,796,1,0,0,0,817,799,1,0,0,0,817,802,1,0,
        0,0,817,805,1,0,0,0,817,808,1,0,0,0,817,811,1,0,0,0,817,814,1,0,
        0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,113,1,0,
        0,0,821,819,1,0,0,0,822,823,3,126,63,0,823,115,1,0,0,0,824,825,3,
        118,59,0,825,826,5,35,0,0,826,827,3,112,56,0,827,833,1,0,0,0,828,
        829,3,120,60,0,829,830,5,125,0,0,830,831,3,112,56,0,831,833,1,0,
        0,0,832,824,1,0,0,0,832,828,1,0,0,0,833,117,1,0,0,0,834,835,3,112,
        56,0,835,119,1,0,0,0,836,837,3,112,56,0,837,121,1,0,0,0,838,839,
        7,8,0,0,839,123,1,0,0,0,840,857,5,141,0,0,841,857,5,139,0,0,842,
        857,5,132,0,0,843,857,5,140,0,0,844,857,5,134,0,0,845,857,5,135,
        0,0,846,857,5,133,0,0,847,857,5,136,0,0,848,857,5,137,0,0,849,857,
        5,143,0,0,850,857,5,142,0,0,851,857,5,144,0,0,852,857,5,145,0,0,
        853,857,5,138,0,0,854,857,5,146,0,0,855,857,3,44,22,0,856,840,1,
        0,0,0,856,841,1,0,0,0,856,842,1,0,0,0,856,843,1,0,0,0,856,844,1,
        0,0,0,856,845,1,0,0,0,856,846,1,0,0,0,856,847,1,0,0,0,856,848,1,
        0,0,0,856,849,1,0,0,0,856,850,1,0,0,0,856,851,1,0,0,0,856,852,1,
        0,0,0,856,853,1,0,0,0,856,854,1,0,0,0,856,855,1,0,0,0,857,125,1,
        0,0,0,858,860,5,149,0,0,859,861,3,132,66,0,860,859,1,0,0,0,860,861,
        1,0,0,0,861,866,1,0,0,0,862,863,3,128,64,0,863,864,3,130,65,0,864,
        866,1,0,0,0,865,858,1,0,0,0,865,862,1,0,0,0,866,127,1,0,0,0,867,
        868,6,64,-1,0,868,870,5,149,0,0,869,871,3,132,66,0,870,869,1,0,0,
        0,870,871,1,0,0,0,871,876,1,0,0,0,872,873,10,1,0,0,873,875,3,130,
        65,0,874,872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,
        0,0,877,129,1,0,0,0,878,876,1,0,0,0,879,880,5,109,0,0,880,881,5,
        126,0,0,881,888,5,149,0,0,882,883,5,109,0,0,883,885,5,149,0,0,884,
        886,3,132,66,0,885,884,1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,887,
        879,1,0,0,0,887,882,1,0,0,0,888,131,1,0,0,0,889,890,5,36,0,0,890,
        895,3,134,67,0,891,892,5,33,0,0,892,894,3,134,67,0,893,891,1,0,0,
        0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,
        0,897,895,1,0,0,0,898,899,5,37,0,0,899,133,1,0,0,0,900,904,5,139,
        0,0,901,904,3,126,63,0,902,904,3,112,56,0,903,900,1,0,0,0,903,901,
        1,0,0,0,903,902,1,0,0,0,904,135,1,0,0,0,90,139,154,171,176,185,191,
        203,207,210,218,223,227,229,232,242,251,255,267,271,285,290,298,
        303,313,316,323,328,339,344,351,356,366,369,376,381,388,395,397,
        404,410,414,419,422,428,446,453,460,492,505,515,519,522,527,533,
        538,541,554,574,579,598,601,606,614,620,655,664,672,676,683,692,
        699,709,719,724,729,734,752,767,817,819,832,856,860,865,870,876,
        885,887,895,903
    ]

class sclParser ( Parser ):

    grammarFileName = "scl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'WHILE'", "'DO'", "'END_WHILE'", "'FOR'", 
                     "'TO'", "'to'", "'BY'", "'END_FOR'", "'End_FOR'", "'IF'", 
                     "'ELSIF'", "'END_IF'", "'REPEAT'", "'UNTIL'", "'END_REPEAT'", 
                     "'CASE'", "'OF'", "':'", "'END_CASE'", "'DATA_BLOCK'", 
                     "';'", "'BEGIN'", "'END_DATA_BLOCK'", "'TYPE'", "'END_TYPE'", 
                     "'FUNCTION_BLOCK'", "'END_FUNCTION_BLOCK'", "'FUNCTION'", 
                     "'END_FUNCTION'", "'STRUCT'", "'Struct'", "'END_STRUCT'", 
                     "','", "'AT'", "':='", "'['", "']'", "'('", "')'", 
                     "'#'", "'-'", "'BOOL'", "'Bool'", "'bool'", "'BYTE'", 
                     "'Byte'", "'byte'", "'CHAR'", "'Char'", "'char'", "'STRING'", 
                     "'String'", "'string'", "'WORD'", "'Word'", "'word'", 
                     "'DWORD'", "'DWord'", "'dword'", "'INT'", "'Int'", 
                     "'int'", "'DINT'", "'DInt'", "'dint'", "'REAL'", "'Real'", 
                     "'real'", "'S5TIME'", "'S5Time'", "'s5time'", "'TIME'", 
                     "'Time'", "'time'", "'DATE'", "'Date'", "'date'", "'TIME_OF_DAY'", 
                     "'Time_Of_Day'", "'time_of_day'", "'DATE_AND_TIME'", 
                     "'Date_And_Time'", "'date_and_time'", "'ARRAY'", "'Array'", 
                     "'of'", "'*'", "'+'", "'non_RETAIN'", "'VAR_TEMP'", 
                     "'VAR_IN_OUT'", "'VAR_INPUT'", "'VAR_OUTPUT'", "'CONST'", 
                     "'END_CONST'", "'VAR'", "'VAR CONSTANT'", "'LABEL'", 
                     "'END_LABEL'", "'VOID'", "'CONTINUE'", "'EXIT'", "'RETURN'", 
                     "'GOTO'", "'-='", "'+='", "'*='", "'/='", "'.'", "'**'", 
                     "'/'", "'MOD'", "'DIV'", "'<'", "'>'", "'<='", "'>='", 
                     "'='", "'<>'", "'NOT'", "'AND'", "'&'", "'XOR'", "'OR'", 
                     "'=>'", "'%'", "<INVALID>", "'..'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "ArraySubRange", 
                      "DOTDOT", "END_VAR", "ELSE", "THEN", "BOOLLiteral", 
                      "BYTELiteral", "CHARLiteral", "STRINGLiteral", "WORDLiteral", 
                      "DWORDLiteral", "POINTERLiteral", "INTLiteral", "DINTLiteral", 
                      "REALLiteral", "TIMELiteral", "DATELiteral", "TIME_OF_DAYLiteral", 
                      "DATE_AND_TIMELiteral", "GLOBALBOOLLiteral", "QUESTIONMARK", 
                      "BinaryDigits", "Identifier", "REGION", "END_REGION", 
                      "WS", "COMMENT", "LINE_COMMENT", "COMMENT_STARTERS", 
                      "OTHER" ]

    RULE_r = 0
    RULE_whileStatement = 1
    RULE_forStatement = 2
    RULE_ifStatement = 3
    RULE_whileCondition = 4
    RULE_whileBlockStatements = 5
    RULE_repeatStatement = 6
    RULE_switchStatement = 7
    RULE_block = 8
    RULE_dataBlock = 9
    RULE_typeBlock = 10
    RULE_fbBlock = 11
    RULE_fcBlock = 12
    RULE_blockName = 13
    RULE_dbInstanceName = 14
    RULE_structType = 15
    RULE_variableDefinitions = 16
    RULE_variableDefinition = 17
    RULE_weirdThing = 18
    RULE_constant_assign = 19
    RULE_variableType = 20
    RULE_udtType = 21
    RULE_elementaryType = 22
    RULE_arrayType = 23
    RULE_arrayRange = 24
    RULE_dbAssignments = 25
    RULE_dbAssignment = 26
    RULE_nonRetainBlock = 27
    RULE_blockVarDeclarations = 28
    RULE_blockTempVars = 29
    RULE_blockInOutDeclarations = 30
    RULE_blockInputDeclarations = 31
    RULE_blockOutputDeclarations = 32
    RULE_blockConstDeclarations = 33
    RULE_blockStaticDeclarations = 34
    RULE_blockConstantDeclarations = 35
    RULE_blockLabelDeclarations = 36
    RULE_blockFunctionality = 37
    RULE_function_type = 38
    RULE_stat = 39
    RULE_functionStatement = 40
    RULE_labelStatment = 41
    RULE_forInitialCondition = 42
    RULE_forEndCondition = 43
    RULE_forStepCondition = 44
    RULE_forBlockStatements = 45
    RULE_ifCondition = 46
    RULE_ifBlockStatments = 47
    RULE_switchBlock = 48
    RULE_switchLabel = 49
    RULE_switchLabelConstant = 50
    RULE_switchBlockStatements = 51
    RULE_defualtswitchBlockStatements = 52
    RULE_assignmentStatement = 53
    RULE_leftHandAssignment = 54
    RULE_rightHandAssignment = 55
    RULE_expr = 56
    RULE_varName = 57
    RULE_functionParameterExpression = 58
    RULE_inputParameter = 59
    RULE_outputParameter = 60
    RULE_numberConstant = 61
    RULE_constant = 62
    RULE_expressionName = 63
    RULE_ambiguousName = 64
    RULE_ambiguousNext = 65
    RULE_identifierIndex = 66
    RULE_identifierIndexValue = 67

    ruleNames =  [ "r", "whileStatement", "forStatement", "ifStatement", 
                   "whileCondition", "whileBlockStatements", "repeatStatement", 
                   "switchStatement", "block", "dataBlock", "typeBlock", 
                   "fbBlock", "fcBlock", "blockName", "dbInstanceName", 
                   "structType", "variableDefinitions", "variableDefinition", 
                   "weirdThing", "constant_assign", "variableType", "udtType", 
                   "elementaryType", "arrayType", "arrayRange", "dbAssignments", 
                   "dbAssignment", "nonRetainBlock", "blockVarDeclarations", 
                   "blockTempVars", "blockInOutDeclarations", "blockInputDeclarations", 
                   "blockOutputDeclarations", "blockConstDeclarations", 
                   "blockStaticDeclarations", "blockConstantDeclarations", 
                   "blockLabelDeclarations", "blockFunctionality", "function_type", 
                   "stat", "functionStatement", "labelStatment", "forInitialCondition", 
                   "forEndCondition", "forStepCondition", "forBlockStatements", 
                   "ifCondition", "ifBlockStatments", "switchBlock", "switchLabel", 
                   "switchLabelConstant", "switchBlockStatements", "defualtswitchBlockStatements", 
                   "assignmentStatement", "leftHandAssignment", "rightHandAssignment", 
                   "expr", "varName", "functionParameterExpression", "inputParameter", 
                   "outputParameter", "numberConstant", "constant", "expressionName", 
                   "ambiguousName", "ambiguousNext", "identifierIndex", 
                   "identifierIndexValue" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    ArraySubRange=127
    DOTDOT=128
    END_VAR=129
    ELSE=130
    THEN=131
    BOOLLiteral=132
    BYTELiteral=133
    CHARLiteral=134
    STRINGLiteral=135
    WORDLiteral=136
    DWORDLiteral=137
    POINTERLiteral=138
    INTLiteral=139
    DINTLiteral=140
    REALLiteral=141
    TIMELiteral=142
    DATELiteral=143
    TIME_OF_DAYLiteral=144
    DATE_AND_TIMELiteral=145
    GLOBALBOOLLiteral=146
    QUESTIONMARK=147
    BinaryDigits=148
    Identifier=149
    REGION=150
    END_REGION=151
    WS=152
    COMMENT=153
    LINE_COMMENT=154
    COMMENT_STARTERS=155
    OTHER=156

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.BlockContext)
            else:
                return self.getTypedRuleContext(sclParser.BlockContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_r

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR" ):
                listener.enterR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR" ):
                listener.exitR(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR" ):
                return visitor.visitR(self)
            else:
                return visitor.visitChildren(self)




    def r(self):

        localctx = sclParser.RContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_r)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 353370112) != 0):
                self.state = 136
                self.block()
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileCondition(self):
            return self.getTypedRuleContext(sclParser.WhileConditionContext,0)


        def whileBlockStatements(self):
            return self.getTypedRuleContext(sclParser.WhileBlockStatementsContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = sclParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self.match(sclParser.T__0)
            self.state = 143
            self.whileCondition()
            self.state = 144
            self.match(sclParser.T__1)
            self.state = 145
            self.whileBlockStatements()
            self.state = 146
            self.match(sclParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forInitialCondition(self):
            return self.getTypedRuleContext(sclParser.ForInitialConditionContext,0)


        def forEndCondition(self):
            return self.getTypedRuleContext(sclParser.ForEndConditionContext,0)


        def forBlockStatements(self):
            return self.getTypedRuleContext(sclParser.ForBlockStatementsContext,0)


        def forStepCondition(self):
            return self.getTypedRuleContext(sclParser.ForStepConditionContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = sclParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self.match(sclParser.T__3)
            self.state = 149
            self.forInitialCondition()
            self.state = 150
            _la = self._input.LA(1)
            if not(_la==5 or _la==6):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 151
            self.forEndCondition()
            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 152
                self.match(sclParser.T__6)
                self.state = 153
                self.forStepCondition()


            self.state = 156
            self.match(sclParser.T__1)
            self.state = 157
            self.forBlockStatements()
            self.state = 158
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.IfConditionContext)
            else:
                return self.getTypedRuleContext(sclParser.IfConditionContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(sclParser.THEN)
            else:
                return self.getToken(sclParser.THEN, i)

        def ifBlockStatments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.IfBlockStatmentsContext)
            else:
                return self.getTypedRuleContext(sclParser.IfBlockStatmentsContext,i)


        def ELSE(self):
            return self.getToken(sclParser.ELSE, 0)

        def getRuleIndex(self):
            return sclParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = sclParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(sclParser.T__9)
            self.state = 161
            self.ifCondition()
            self.state = 162
            self.match(sclParser.THEN)
            self.state = 163
            self.ifBlockStatments()
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 164
                self.match(sclParser.T__10)
                self.state = 165
                self.ifCondition()
                self.state = 166
                self.match(sclParser.THEN)
                self.state = 167
                self.ifBlockStatments()
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 174
                self.match(sclParser.ELSE)
                self.state = 175
                self.ifBlockStatments()


            self.state = 178
            self.match(sclParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_whileCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileCondition" ):
                listener.enterWhileCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileCondition" ):
                listener.exitWhileCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileCondition" ):
                return visitor.visitWhileCondition(self)
            else:
                return visitor.visitChildren(self)




    def whileCondition(self):

        localctx = sclParser.WhileConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_whileCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileBlockStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.StatContext)
            else:
                return self.getTypedRuleContext(sclParser.StatContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_whileBlockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileBlockStatements" ):
                listener.enterWhileBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileBlockStatements" ):
                listener.exitWhileBlockStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileBlockStatements" ):
                return visitor.visitWhileBlockStatements(self)
            else:
                return visitor.visitChildren(self)




    def whileBlockStatements(self):

        localctx = sclParser.WhileBlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whileBlockStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 182
                self.stat()
                self.state = 185 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1924143176686) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 72059655640055807) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 163839) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.StatContext)
            else:
                return self.getTypedRuleContext(sclParser.StatContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatStatement" ):
                return visitor.visitRepeatStatement(self)
            else:
                return visitor.visitChildren(self)




    def repeatStatement(self):

        localctx = sclParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(sclParser.T__12)
            self.state = 189 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 188
                self.stat()
                self.state = 191 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1924143176686) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 72059655640055807) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 163839) != 0)):
                    break

            self.state = 193
            self.match(sclParser.T__13)
            self.state = 194
            self.expr(0)
            self.state = 195
            self.match(sclParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def switchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.SwitchBlockContext)
            else:
                return self.getTypedRuleContext(sclParser.SwitchBlockContext,i)


        def ELSE(self):
            return self.getToken(sclParser.ELSE, 0)

        def defualtswitchBlockStatements(self):
            return self.getTypedRuleContext(sclParser.DefualtswitchBlockStatementsContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchStatement(self):

        localctx = sclParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(sclParser.T__15)
            self.state = 198
            self.expr(0)
            self.state = 199
            self.match(sclParser.T__16)
            self.state = 201 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 200
                self.switchBlock()
                self.state = 203 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & 4398046511103) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 5242849) != 0)):
                    break

            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 205
                self.match(sclParser.ELSE)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 206
                    self.match(sclParser.T__17)


                self.state = 209
                self.defualtswitchBlockStatements()


            self.state = 212
            self.match(sclParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataBlock(self):
            return self.getTypedRuleContext(sclParser.DataBlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(sclParser.TypeBlockContext,0)


        def fbBlock(self):
            return self.getTypedRuleContext(sclParser.FbBlockContext,0)


        def fcBlock(self):
            return self.getTypedRuleContext(sclParser.FcBlockContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = sclParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_block)
        try:
            self.state = 218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 214
                self.dataBlock()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                self.typeBlock()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 216
                self.fbBlock()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 4)
                self.state = 217
                self.fcBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockName(self):
            return self.getTypedRuleContext(sclParser.BlockNameContext,0)


        def dbAssignments(self):
            return self.getTypedRuleContext(sclParser.DbAssignmentsContext,0)


        def dbInstanceName(self):
            return self.getTypedRuleContext(sclParser.DbInstanceNameContext,0)


        def structType(self):
            return self.getTypedRuleContext(sclParser.StructTypeContext,0)


        def nonRetainBlock(self):
            return self.getTypedRuleContext(sclParser.NonRetainBlockContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_dataBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataBlock" ):
                listener.enterDataBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataBlock" ):
                listener.exitDataBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataBlock" ):
                return visitor.visitDataBlock(self)
            else:
                return visitor.visitChildren(self)




    def dataBlock(self):

        localctx = sclParser.DataBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dataBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(sclParser.T__19)
            self.state = 221
            self.blockName()
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 222
                self.dbInstanceName()


            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or _la==31:
                self.state = 225
                self.structType()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 226
                    self.match(sclParser.T__20)




            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 231
                self.nonRetainBlock()


            self.state = 234
            self.match(sclParser.T__21)
            self.state = 235
            self.dbAssignments()
            self.state = 236
            self.match(sclParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockName(self):
            return self.getTypedRuleContext(sclParser.BlockNameContext,0)


        def structType(self):
            return self.getTypedRuleContext(sclParser.StructTypeContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBlock" ):
                return visitor.visitTypeBlock(self)
            else:
                return visitor.visitChildren(self)




    def typeBlock(self):

        localctx = sclParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(sclParser.T__23)
            self.state = 239
            self.blockName()
            self.state = 240
            self.structType()
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 241
                self.match(sclParser.T__20)


            self.state = 244
            self.match(sclParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FbBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockName(self):
            return self.getTypedRuleContext(sclParser.BlockNameContext,0)


        def blockFunctionality(self):
            return self.getTypedRuleContext(sclParser.BlockFunctionalityContext,0)


        def blockVarDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.BlockVarDeclarationsContext)
            else:
                return self.getTypedRuleContext(sclParser.BlockVarDeclarationsContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_fbBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFbBlock" ):
                listener.enterFbBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFbBlock" ):
                listener.exitFbBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFbBlock" ):
                return visitor.visitFbBlock(self)
            else:
                return visitor.visitChildren(self)




    def fbBlock(self):

        localctx = sclParser.FbBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fbBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(sclParser.T__25)
            self.state = 247
            self.blockName()
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 479) != 0):
                self.state = 248
                self.blockVarDeclarations()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 254
                self.match(sclParser.T__21)


            self.state = 257
            self.blockFunctionality()
            self.state = 258
            self.match(sclParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FcBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockName(self):
            return self.getTypedRuleContext(sclParser.BlockNameContext,0)


        def function_type(self):
            return self.getTypedRuleContext(sclParser.Function_typeContext,0)


        def blockFunctionality(self):
            return self.getTypedRuleContext(sclParser.BlockFunctionalityContext,0)


        def blockVarDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.BlockVarDeclarationsContext)
            else:
                return self.getTypedRuleContext(sclParser.BlockVarDeclarationsContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_fcBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFcBlock" ):
                listener.enterFcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFcBlock" ):
                listener.exitFcBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFcBlock" ):
                return visitor.visitFcBlock(self)
            else:
                return visitor.visitChildren(self)




    def fcBlock(self):

        localctx = sclParser.FcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fcBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(sclParser.T__27)
            self.state = 261
            self.blockName()
            self.state = 262
            self.match(sclParser.T__17)
            self.state = 263
            self.function_type()
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 479) != 0):
                self.state = 264
                self.blockVarDeclarations()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 270
                self.match(sclParser.T__21)


            self.state = 273
            self.blockFunctionality()
            self.state = 274
            self.match(sclParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_blockName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockName" ):
                listener.enterBlockName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockName" ):
                listener.exitBlockName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockName" ):
                return visitor.visitBlockName(self)
            else:
                return visitor.visitChildren(self)




    def blockName(self):

        localctx = sclParser.BlockNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_blockName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.expressionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbInstanceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_dbInstanceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbInstanceName" ):
                listener.enterDbInstanceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbInstanceName" ):
                listener.exitDbInstanceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbInstanceName" ):
                return visitor.visitDbInstanceName(self)
            else:
                return visitor.visitChildren(self)




    def dbInstanceName(self):

        localctx = sclParser.DbInstanceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_dbInstanceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.expressionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructType" ):
                return visitor.visitStructType(self)
            else:
                return visitor.visitChildren(self)




    def structType(self):

        localctx = sclParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            _la = self._input.LA(1)
            if not(_la==30 or _la==31):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 281
            self.variableDefinitions()
            self.state = 282
            self.match(sclParser.T__31)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(sclParser.VariableDefinitionContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_variableDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinitions" ):
                listener.enterVariableDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinitions" ):
                listener.exitVariableDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefinitions" ):
                return visitor.visitVariableDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def variableDefinitions(self):

        localctx = sclParser.VariableDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_variableDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21 or _la==149:
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 284
                    self.variableDefinition()


                self.state = 287
                self.match(sclParser.T__20)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.ExpressionNameContext)
            else:
                return self.getTypedRuleContext(sclParser.ExpressionNameContext,i)


        def variableType(self):
            return self.getTypedRuleContext(sclParser.VariableTypeContext,0)


        def weirdThing(self):
            return self.getTypedRuleContext(sclParser.WeirdThingContext,0)


        def constant_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.Constant_assignContext)
            else:
                return self.getTypedRuleContext(sclParser.Constant_assignContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(sclParser.Identifier)
            else:
                return self.getToken(sclParser.Identifier, i)

        def getRuleIndex(self):
            return sclParser.RULE_variableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinition" ):
                listener.enterVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinition" ):
                listener.exitVariableDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefinition" ):
                return visitor.visitVariableDefinition(self)
            else:
                return visitor.visitChildren(self)




    def variableDefinition(self):

        localctx = sclParser.VariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_variableDefinition)
        self._la = 0 # Token type
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.expressionName()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 294
                    self.match(sclParser.T__32)
                    self.state = 295
                    self.expressionName()
                    self.state = 300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 301
                    self.match(sclParser.T__33)
                    self.state = 302
                    self.weirdThing()


                self.state = 305
                self.match(sclParser.T__17)
                self.state = 306
                self.variableType()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 307
                    self.match(sclParser.T__34)
                    self.state = 308
                    self.constant_assign()
                    self.state = 313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==33:
                        self.state = 309
                        self.match(sclParser.T__32)
                        self.state = 310
                        self.constant_assign()
                        self.state = 315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.expressionName()
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 319
                    self.match(sclParser.T__32)
                    self.state = 320
                    self.expressionName()
                    self.state = 325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 326
                    self.match(sclParser.T__33)
                    self.state = 327
                    self.weirdThing()


                self.state = 330
                self.match(sclParser.T__17)
                self.state = 331
                self.variableType()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 332
                    self.match(sclParser.T__34)
                    self.state = 333
                    self.match(sclParser.T__35)
                    self.state = 334
                    self.constant_assign()
                    self.state = 339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==33:
                        self.state = 335
                        self.match(sclParser.T__32)
                        self.state = 336
                        self.constant_assign()
                        self.state = 341
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 342
                    self.match(sclParser.T__36)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 346
                self.expressionName()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 347
                    self.match(sclParser.T__32)
                    self.state = 348
                    self.expressionName()
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 354
                    self.match(sclParser.T__33)
                    self.state = 355
                    self.weirdThing()


                self.state = 358
                self.match(sclParser.T__17)
                self.state = 359
                self.variableType()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 360
                    self.match(sclParser.T__34)
                    self.state = 361
                    self.match(sclParser.Identifier)
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==33:
                        self.state = 362
                        self.match(sclParser.T__32)
                        self.state = 363
                        self.match(sclParser.Identifier)
                        self.state = 368
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 371
                self.expressionName()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 372
                    self.match(sclParser.T__32)
                    self.state = 373
                    self.expressionName()
                    self.state = 378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 379
                    self.match(sclParser.T__33)
                    self.state = 380
                    self.weirdThing()


                self.state = 383
                self.match(sclParser.T__17)
                self.state = 384
                self.variableType()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 385
                    self.match(sclParser.T__34)
                    self.state = 386
                    self.match(sclParser.T__35)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 72057594037925891) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 163839) != 0):
                        self.state = 387
                        self.constant_assign()


                    self.state = 390
                    self.match(sclParser.T__37)
                    self.state = 391
                    self.constant_assign()
                    self.state = 392
                    self.match(sclParser.T__38)
                    self.state = 393
                    self.match(sclParser.T__36)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeirdThingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_weirdThing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeirdThing" ):
                listener.enterWeirdThing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeirdThing" ):
                listener.exitWeirdThing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWeirdThing" ):
                return visitor.visitWeirdThing(self)
            else:
                return visitor.visitChildren(self)




    def weirdThing(self):

        localctx = sclParser.WeirdThingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_weirdThing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.expressionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.ConstantContext)
            else:
                return self.getTypedRuleContext(sclParser.ConstantContext,i)


        def variableType(self):
            return self.getTypedRuleContext(sclParser.VariableTypeContext,0)


        def numberConstant(self):
            return self.getTypedRuleContext(sclParser.NumberConstantContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_constant_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_assign" ):
                listener.enterConstant_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_assign" ):
                listener.exitConstant_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_assign" ):
                return visitor.visitConstant_assign(self)
            else:
                return visitor.visitChildren(self)




    def constant_assign(self):

        localctx = sclParser.Constant_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constant_assign)
        self._la = 0 # Token type
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 401
                    self.variableType()
                    self.state = 402
                    self.match(sclParser.T__39)


                self.state = 406
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 407
                    self.constant()
                    self.state = 408
                    self.match(sclParser.T__39)


                self.state = 412
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 413
                    self.match(sclParser.T__40)


                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 72057594037923843) != 0) or _la==149:
                    self.state = 416
                    self.variableType()
                    self.state = 417
                    self.match(sclParser.T__39)


                self.state = 421
                self.numberConstant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryType(self):
            return self.getTypedRuleContext(sclParser.ElementaryTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(sclParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(sclParser.StructTypeContext,0)


        def udtType(self):
            return self.getTypedRuleContext(sclParser.UdtTypeContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_variableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableType" ):
                listener.enterVariableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableType" ):
                listener.exitVariableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableType" ):
                return visitor.visitVariableType(self)
            else:
                return visitor.visitChildren(self)




    def variableType(self):

        localctx = sclParser.VariableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_variableType)
        try:
            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.elementaryType()
                pass
            elif token in [84, 85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.arrayType()
                pass
            elif token in [30, 31]:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.structType()
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 4)
                self.state = 427
                self.udtType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdtTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_udtType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdtType" ):
                listener.enterUdtType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdtType" ):
                listener.exitUdtType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdtType" ):
                return visitor.visitUdtType(self)
            else:
                return visitor.visitChildren(self)




    def udtType(self):

        localctx = sclParser.UdtTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_udtType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.expressionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(sclParser.ConstantContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_elementaryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryType" ):
                listener.enterElementaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryType" ):
                listener.exitElementaryType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryType" ):
                return visitor.visitElementaryType(self)
            else:
                return visitor.visitChildren(self)




    def elementaryType(self):

        localctx = sclParser.ElementaryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_elementaryType)
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.match(sclParser.T__41)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(sclParser.T__42)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(sclParser.T__43)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.match(sclParser.T__44)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 436
                self.match(sclParser.T__45)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 6)
                self.state = 437
                self.match(sclParser.T__46)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 7)
                self.state = 438
                self.match(sclParser.T__47)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 8)
                self.state = 439
                self.match(sclParser.T__48)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 9)
                self.state = 440
                self.match(sclParser.T__49)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 10)
                self.state = 441
                self.match(sclParser.T__50)
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(sclParser.T__35)
                    self.state = 443
                    self.constant()
                    self.state = 444
                    self.match(sclParser.T__36)


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 11)
                self.state = 448
                self.match(sclParser.T__51)
                self.state = 453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 449
                    self.match(sclParser.T__35)
                    self.state = 450
                    self.constant()
                    self.state = 451
                    self.match(sclParser.T__36)


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 12)
                self.state = 455
                self.match(sclParser.T__52)
                self.state = 460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.match(sclParser.T__35)
                    self.state = 457
                    self.constant()
                    self.state = 458
                    self.match(sclParser.T__36)


                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 13)
                self.state = 462
                self.match(sclParser.T__53)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 14)
                self.state = 463
                self.match(sclParser.T__54)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 15)
                self.state = 464
                self.match(sclParser.T__55)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 16)
                self.state = 465
                self.match(sclParser.T__56)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 17)
                self.state = 466
                self.match(sclParser.T__57)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 18)
                self.state = 467
                self.match(sclParser.T__58)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 19)
                self.state = 468
                self.match(sclParser.T__59)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 20)
                self.state = 469
                self.match(sclParser.T__60)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 21)
                self.state = 470
                self.match(sclParser.T__61)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 22)
                self.state = 471
                self.match(sclParser.T__62)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 23)
                self.state = 472
                self.match(sclParser.T__63)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 24)
                self.state = 473
                self.match(sclParser.T__64)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 25)
                self.state = 474
                self.match(sclParser.T__65)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 26)
                self.state = 475
                self.match(sclParser.T__66)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 27)
                self.state = 476
                self.match(sclParser.T__67)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 28)
                self.state = 477
                self.match(sclParser.T__68)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 29)
                self.state = 478
                self.match(sclParser.T__69)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 30)
                self.state = 479
                self.match(sclParser.T__70)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 31)
                self.state = 480
                self.match(sclParser.T__71)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 32)
                self.state = 481
                self.match(sclParser.T__72)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 33)
                self.state = 482
                self.match(sclParser.T__73)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 34)
                self.state = 483
                self.match(sclParser.T__74)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 35)
                self.state = 484
                self.match(sclParser.T__75)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 36)
                self.state = 485
                self.match(sclParser.T__76)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 37)
                self.state = 486
                self.match(sclParser.T__77)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 38)
                self.state = 487
                self.match(sclParser.T__78)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 39)
                self.state = 488
                self.match(sclParser.T__79)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 40)
                self.state = 489
                self.match(sclParser.T__80)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 41)
                self.state = 490
                self.match(sclParser.T__81)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 42)
                self.state = 491
                self.match(sclParser.T__82)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayRange(self):
            return self.getTypedRuleContext(sclParser.ArrayRangeContext,0)


        def variableType(self):
            return self.getTypedRuleContext(sclParser.VariableTypeContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = sclParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_arrayType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            _la = self._input.LA(1)
            if not(_la==84 or _la==85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 495
            self.arrayRange()
            self.state = 496
            _la = self._input.LA(1)
            if not(_la==17 or _la==86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 497
            self.variableType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ArraySubRange(self, i:int=None):
            if i is None:
                return self.getTokens(sclParser.ArraySubRange)
            else:
                return self.getToken(sclParser.ArraySubRange, i)

        def getRuleIndex(self):
            return sclParser.RULE_arrayRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayRange" ):
                listener.enterArrayRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayRange" ):
                listener.exitArrayRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayRange" ):
                return visitor.visitArrayRange(self)
            else:
                return visitor.visitChildren(self)




    def arrayRange(self):

        localctx = sclParser.ArrayRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_arrayRange)
        self._la = 0 # Token type
        try:
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.match(sclParser.T__35)
                self.state = 500
                self.match(sclParser.ArraySubRange)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 501
                    self.match(sclParser.T__32)
                    self.state = 502
                    self.match(sclParser.ArraySubRange)
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 508
                self.match(sclParser.T__36)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(sclParser.T__35)
                self.state = 510
                self.match(sclParser.T__86)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 511
                    self.match(sclParser.T__32)
                    self.state = 512
                    self.match(sclParser.T__86)
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 518
                self.match(sclParser.T__36)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbAssignmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dbAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.DbAssignmentContext)
            else:
                return self.getTypedRuleContext(sclParser.DbAssignmentContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_dbAssignments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbAssignments" ):
                listener.enterDbAssignments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbAssignments" ):
                listener.exitDbAssignments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbAssignments" ):
                return visitor.visitDbAssignments(self)
            else:
                return visitor.visitChildren(self)




    def dbAssignments(self):

        localctx = sclParser.DbAssignmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_dbAssignments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21 or _la==149:
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 521
                    self.dbAssignment()


                self.state = 524
                self.match(sclParser.T__20)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.ConstantContext)
            else:
                return self.getTypedRuleContext(sclParser.ConstantContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_dbAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbAssignment" ):
                listener.enterDbAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbAssignment" ):
                listener.exitDbAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbAssignment" ):
                return visitor.visitDbAssignment(self)
            else:
                return visitor.visitChildren(self)




    def dbAssignment(self):

        localctx = sclParser.DbAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dbAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.expressionName()
            self.state = 531
            self.match(sclParser.T__34)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==88:
                self.state = 532
                _la = self._input.LA(1)
                if not(_la==41 or _la==88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 535
            self.constant()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 536
                self.match(sclParser.T__32)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==88:
                    self.state = 537
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==88):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 540
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonRetainBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_nonRetainBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonRetainBlock" ):
                listener.enterNonRetainBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonRetainBlock" ):
                listener.exitNonRetainBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonRetainBlock" ):
                return visitor.visitNonRetainBlock(self)
            else:
                return visitor.visitChildren(self)




    def nonRetainBlock(self):

        localctx = sclParser.NonRetainBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_nonRetainBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(sclParser.T__88)
            self.state = 544
            self.expressionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockVarDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockTempVars(self):
            return self.getTypedRuleContext(sclParser.BlockTempVarsContext,0)


        def blockInOutDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockInOutDeclarationsContext,0)


        def blockInputDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockInputDeclarationsContext,0)


        def blockOutputDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockOutputDeclarationsContext,0)


        def blockConstDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockConstDeclarationsContext,0)


        def blockStaticDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockStaticDeclarationsContext,0)


        def blockLabelDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockLabelDeclarationsContext,0)


        def blockConstantDeclarations(self):
            return self.getTypedRuleContext(sclParser.BlockConstantDeclarationsContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_blockVarDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockVarDeclarations" ):
                listener.enterBlockVarDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockVarDeclarations" ):
                listener.exitBlockVarDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockVarDeclarations" ):
                return visitor.visitBlockVarDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockVarDeclarations(self):

        localctx = sclParser.BlockVarDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_blockVarDeclarations)
        try:
            self.state = 554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.blockTempVars()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.blockInOutDeclarations()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.blockInputDeclarations()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 4)
                self.state = 549
                self.blockOutputDeclarations()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 5)
                self.state = 550
                self.blockConstDeclarations()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 6)
                self.state = 551
                self.blockStaticDeclarations()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 7)
                self.state = 552
                self.blockLabelDeclarations()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 8)
                self.state = 553
                self.blockConstantDeclarations()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockTempVarsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def END_VAR(self):
            return self.getToken(sclParser.END_VAR, 0)

        def getRuleIndex(self):
            return sclParser.RULE_blockTempVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockTempVars" ):
                listener.enterBlockTempVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockTempVars" ):
                listener.exitBlockTempVars(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockTempVars" ):
                return visitor.visitBlockTempVars(self)
            else:
                return visitor.visitChildren(self)




    def blockTempVars(self):

        localctx = sclParser.BlockTempVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_blockTempVars)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(sclParser.T__89)
            self.state = 557
            self.variableDefinitions()
            self.state = 558
            self.match(sclParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockInOutDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def END_VAR(self):
            return self.getToken(sclParser.END_VAR, 0)

        def getRuleIndex(self):
            return sclParser.RULE_blockInOutDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockInOutDeclarations" ):
                listener.enterBlockInOutDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockInOutDeclarations" ):
                listener.exitBlockInOutDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockInOutDeclarations" ):
                return visitor.visitBlockInOutDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockInOutDeclarations(self):

        localctx = sclParser.BlockInOutDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blockInOutDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(sclParser.T__90)
            self.state = 561
            self.variableDefinitions()
            self.state = 562
            self.match(sclParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockInputDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def END_VAR(self):
            return self.getToken(sclParser.END_VAR, 0)

        def getRuleIndex(self):
            return sclParser.RULE_blockInputDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockInputDeclarations" ):
                listener.enterBlockInputDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockInputDeclarations" ):
                listener.exitBlockInputDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockInputDeclarations" ):
                return visitor.visitBlockInputDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockInputDeclarations(self):

        localctx = sclParser.BlockInputDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_blockInputDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(sclParser.T__91)
            self.state = 565
            self.variableDefinitions()
            self.state = 566
            self.match(sclParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockOutputDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def END_VAR(self):
            return self.getToken(sclParser.END_VAR, 0)

        def getRuleIndex(self):
            return sclParser.RULE_blockOutputDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockOutputDeclarations" ):
                listener.enterBlockOutputDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockOutputDeclarations" ):
                listener.exitBlockOutputDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockOutputDeclarations" ):
                return visitor.visitBlockOutputDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockOutputDeclarations(self):

        localctx = sclParser.BlockOutputDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_blockOutputDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(sclParser.T__92)
            self.state = 569
            self.variableDefinitions()
            self.state = 570
            self.match(sclParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockConstDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.AssignmentStatementContext)
            else:
                return self.getTypedRuleContext(sclParser.AssignmentStatementContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_blockConstDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockConstDeclarations" ):
                listener.enterBlockConstDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockConstDeclarations" ):
                listener.exitBlockConstDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockConstDeclarations" ):
                return visitor.visitBlockConstDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockConstDeclarations(self):

        localctx = sclParser.BlockConstDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_blockConstDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(sclParser.T__93)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 9223372036853858305) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 2882286173626040321) != 0):
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 1196268651020281) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 671084545) != 0):
                    self.state = 573
                    self.assignmentStatement()


                self.state = 576
                self.match(sclParser.T__20)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 582
            self.match(sclParser.T__94)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStaticDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def END_VAR(self):
            return self.getToken(sclParser.END_VAR, 0)

        def getRuleIndex(self):
            return sclParser.RULE_blockStaticDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStaticDeclarations" ):
                listener.enterBlockStaticDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStaticDeclarations" ):
                listener.exitBlockStaticDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStaticDeclarations" ):
                return visitor.visitBlockStaticDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockStaticDeclarations(self):

        localctx = sclParser.BlockStaticDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_blockStaticDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(sclParser.T__95)
            self.state = 585
            self.variableDefinitions()
            self.state = 586
            self.match(sclParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockConstantDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDefinitions(self):
            return self.getTypedRuleContext(sclParser.VariableDefinitionsContext,0)


        def END_VAR(self):
            return self.getToken(sclParser.END_VAR, 0)

        def getRuleIndex(self):
            return sclParser.RULE_blockConstantDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockConstantDeclarations" ):
                listener.enterBlockConstantDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockConstantDeclarations" ):
                listener.exitBlockConstantDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockConstantDeclarations" ):
                return visitor.visitBlockConstantDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockConstantDeclarations(self):

        localctx = sclParser.BlockConstantDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_blockConstantDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(sclParser.T__96)
            self.state = 589
            self.variableDefinitions()
            self.state = 590
            self.match(sclParser.END_VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLabelDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.ExpressionNameContext)
            else:
                return self.getTypedRuleContext(sclParser.ExpressionNameContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_blockLabelDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLabelDeclarations" ):
                listener.enterBlockLabelDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLabelDeclarations" ):
                listener.exitBlockLabelDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockLabelDeclarations" ):
                return visitor.visitBlockLabelDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def blockLabelDeclarations(self):

        localctx = sclParser.BlockLabelDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_blockLabelDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(sclParser.T__97)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 593
                self.expressionName()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 594
                    self.match(sclParser.T__32)
                    self.state = 595
                    self.expressionName()
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21:
                self.state = 603
                self.match(sclParser.T__20)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            self.match(sclParser.T__98)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockFunctionalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.StatContext)
            else:
                return self.getTypedRuleContext(sclParser.StatContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_blockFunctionality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockFunctionality" ):
                listener.enterBlockFunctionality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockFunctionality" ):
                listener.exitBlockFunctionality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockFunctionality" ):
                return visitor.visitBlockFunctionality(self)
            else:
                return visitor.visitChildren(self)




    def blockFunctionality(self):

        localctx = sclParser.BlockFunctionalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_blockFunctionality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1924143176686) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 72059655640055807) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 163839) != 0):
                self.state = 611
                self.stat()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryType(self):
            return self.getTypedRuleContext(sclParser.ElementaryTypeContext,0)


        def udtType(self):
            return self.getTypedRuleContext(sclParser.UdtTypeContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_function_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type" ):
                listener.enterFunction_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type" ):
                listener.exitFunction_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_type" ):
                return visitor.visitFunction_type(self)
            else:
                return visitor.visitChildren(self)




    def function_type(self):

        localctx = sclParser.Function_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_function_type)
        try:
            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(sclParser.T__99)
                pass
            elif token in [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.elementaryType()
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 3)
                self.state = 619
                self.udtType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(sclParser.IfStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(sclParser.SwitchStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(sclParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(sclParser.WhileStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(sclParser.RepeatStatementContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def labelStatment(self):
            return self.getTypedRuleContext(sclParser.LabelStatmentContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(sclParser.AssignmentStatementContext,0)


        def functionStatement(self):
            return self.getTypedRuleContext(sclParser.FunctionStatementContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStat" ):
                listener.enterStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStat" ):
                listener.exitStat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStat" ):
                return visitor.visitStat(self)
            else:
                return visitor.visitChildren(self)




    def stat(self):

        localctx = sclParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_stat)
        try:
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.ifStatement()
                self.state = 623
                self.match(sclParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.switchStatement()
                self.state = 626
                self.match(sclParser.T__20)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self.forStatement()
                self.state = 629
                self.match(sclParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 631
                self.whileStatement()
                self.state = 632
                self.match(sclParser.T__20)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 634
                self.repeatStatement()
                self.state = 635
                self.match(sclParser.T__20)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 637
                self.match(sclParser.T__100)
                self.state = 638
                self.match(sclParser.T__20)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 639
                self.match(sclParser.T__101)
                self.state = 640
                self.match(sclParser.T__20)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 641
                self.match(sclParser.T__102)
                self.state = 642
                self.match(sclParser.T__20)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 643
                self.match(sclParser.T__103)
                self.state = 644
                self.expressionName()
                self.state = 645
                self.match(sclParser.T__20)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 647
                self.labelStatment()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 648
                self.assignmentStatement()
                self.state = 649
                self.match(sclParser.T__20)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 651
                self.functionStatement()
                self.state = 652
                self.match(sclParser.T__20)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 654
                self.match(sclParser.T__20)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def functionParameterExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.FunctionParameterExpressionContext)
            else:
                return self.getTypedRuleContext(sclParser.FunctionParameterExpressionContext,i)


        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_functionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStatement" ):
                listener.enterFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStatement" ):
                listener.exitFunctionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionStatement" ):
                return visitor.visitFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def functionStatement(self):

        localctx = sclParser.FunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_functionStatement)
        self._la = 0 # Token type
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.expressionName()
                self.state = 658
                self.match(sclParser.T__37)
                self.state = 659
                self.functionParameterExpression()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 660
                    self.match(sclParser.T__32)
                    self.state = 661
                    self.functionParameterExpression()
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 667
                self.match(sclParser.T__38)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.expressionName()
                self.state = 670
                self.match(sclParser.T__37)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 1196268651020281) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 671084545) != 0):
                    self.state = 671
                    self.expr(0)


                self.state = 674
                self.match(sclParser.T__38)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelStatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_labelStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelStatment" ):
                listener.enterLabelStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelStatment" ):
                listener.exitLabelStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelStatment" ):
                return visitor.visitLabelStatment(self)
            else:
                return visitor.visitChildren(self)




    def labelStatment(self):

        localctx = sclParser.LabelStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_labelStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.expressionName()
            self.state = 679
            self.match(sclParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitialConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentStatement(self):
            return self.getTypedRuleContext(sclParser.AssignmentStatementContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_forInitialCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInitialCondition" ):
                listener.enterForInitialCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInitialCondition" ):
                listener.exitForInitialCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInitialCondition" ):
                return visitor.visitForInitialCondition(self)
            else:
                return visitor.visitChildren(self)




    def forInitialCondition(self):

        localctx = sclParser.ForInitialConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_forInitialCondition)
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.assignmentStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.expressionName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEndConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_forEndCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEndCondition" ):
                listener.enterForEndCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEndCondition" ):
                listener.exitForEndCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEndCondition" ):
                return visitor.visitForEndCondition(self)
            else:
                return visitor.visitChildren(self)




    def forEndCondition(self):

        localctx = sclParser.ForEndConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forEndCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStepConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_forStepCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStepCondition" ):
                listener.enterForStepCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStepCondition" ):
                listener.exitForStepCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStepCondition" ):
                return visitor.visitForStepCondition(self)
            else:
                return visitor.visitChildren(self)




    def forStepCondition(self):

        localctx = sclParser.ForStepConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forStepCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForBlockStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.StatContext)
            else:
                return self.getTypedRuleContext(sclParser.StatContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_forBlockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForBlockStatements" ):
                listener.enterForBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForBlockStatements" ):
                listener.exitForBlockStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForBlockStatements" ):
                return visitor.visitForBlockStatements(self)
            else:
                return visitor.visitChildren(self)




    def forBlockStatements(self):

        localctx = sclParser.ForBlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_forBlockStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 689
                self.stat()
                self.state = 692 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1924143176686) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 72059655640055807) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 163839) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_ifCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfCondition" ):
                listener.enterIfCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfCondition" ):
                listener.exitIfCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfCondition" ):
                return visitor.visitIfCondition(self)
            else:
                return visitor.visitChildren(self)




    def ifCondition(self):

        localctx = sclParser.IfConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ifCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockStatmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.StatContext)
            else:
                return self.getTypedRuleContext(sclParser.StatContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_ifBlockStatments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStatments" ):
                listener.enterIfBlockStatments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStatments" ):
                listener.exitIfBlockStatments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfBlockStatments" ):
                return visitor.visitIfBlockStatments(self)
            else:
                return visitor.visitChildren(self)




    def ifBlockStatments(self):

        localctx = sclParser.IfBlockStatmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ifBlockStatments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 696
                self.stat()
                self.state = 699 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1924143176686) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 72059655640055807) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 163839) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self):
            return self.getTypedRuleContext(sclParser.SwitchLabelContext,0)


        def switchBlockStatements(self):
            return self.getTypedRuleContext(sclParser.SwitchBlockStatementsContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlock" ):
                return visitor.visitSwitchBlock(self)
            else:
                return visitor.visitChildren(self)




    def switchBlock(self):

        localctx = sclParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_switchBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.switchLabel()
            self.state = 702
            self.switchBlockStatements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.SwitchLabelConstantContext)
            else:
                return self.getTypedRuleContext(sclParser.SwitchLabelConstantContext,i)


        def DOTDOT(self, i:int=None):
            if i is None:
                return self.getTokens(sclParser.DOTDOT)
            else:
                return self.getToken(sclParser.DOTDOT, i)

        def getRuleIndex(self):
            return sclParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = sclParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_switchLabel)
        self._la = 0 # Token type
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.switchLabelConstant()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 705
                    self.match(sclParser.T__32)
                    self.state = 706
                    self.switchLabelConstant()
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 712
                self.match(sclParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.switchLabelConstant()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==128:
                    self.state = 715
                    self.match(sclParser.DOTDOT)
                    self.state = 716
                    self.switchLabelConstant()
                    self.state = 721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 722
                self.match(sclParser.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(sclParser.ConstantContext,0)


        def ArraySubRange(self):
            return self.getToken(sclParser.ArraySubRange, 0)

        def getRuleIndex(self):
            return sclParser.RULE_switchLabelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabelConstant" ):
                listener.enterSwitchLabelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabelConstant" ):
                listener.exitSwitchLabelConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabelConstant" ):
                return visitor.visitSwitchLabelConstant(self)
            else:
                return visitor.visitChildren(self)




    def switchLabelConstant(self):

        localctx = sclParser.SwitchLabelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_switchLabelConstant)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.expressionName()
                pass
            elif token in [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.constant()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 3)
                self.state = 728
                self.match(sclParser.ArraySubRange)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.StatContext)
            else:
                return self.getTypedRuleContext(sclParser.StatContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_switchBlockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatements" ):
                listener.enterSwitchBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatements" ):
                listener.exitSwitchBlockStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatements" ):
                return visitor.visitSwitchBlockStatements(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatements(self):

        localctx = sclParser.SwitchBlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_switchBlockStatements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 731
                    self.stat()

                else:
                    raise NoViableAltException(self)
                self.state = 734 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefualtswitchBlockStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchBlockStatements(self):
            return self.getTypedRuleContext(sclParser.SwitchBlockStatementsContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_defualtswitchBlockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefualtswitchBlockStatements" ):
                listener.enterDefualtswitchBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefualtswitchBlockStatements" ):
                listener.exitDefualtswitchBlockStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefualtswitchBlockStatements" ):
                return visitor.visitDefualtswitchBlockStatements(self)
            else:
                return visitor.visitChildren(self)




    def defualtswitchBlockStatements(self):

        localctx = sclParser.DefualtswitchBlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_defualtswitchBlockStatements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.switchBlockStatements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftHandAssignment(self):
            return self.getTypedRuleContext(sclParser.LeftHandAssignmentContext,0)


        def rightHandAssignment(self):
            return self.getTypedRuleContext(sclParser.RightHandAssignmentContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = sclParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_assignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.leftHandAssignment()
            self.state = 739
            _la = self._input.LA(1)
            if not(_la==35 or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 740
            self.rightHandAssignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftHandAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_leftHandAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftHandAssignment" ):
                listener.enterLeftHandAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftHandAssignment" ):
                listener.exitLeftHandAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftHandAssignment" ):
                return visitor.visitLeftHandAssignment(self)
            else:
                return visitor.visitChildren(self)




    def leftHandAssignment(self):

        localctx = sclParser.LeftHandAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_leftHandAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_rightHandAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandAssignment" ):
                listener.enterRightHandAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandAssignment" ):
                listener.exitRightHandAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightHandAssignment" ):
                return visitor.visitRightHandAssignment(self)
            else:
                return visitor.visitChildren(self)




    def rightHandAssignment(self):

        localctx = sclParser.RightHandAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_rightHandAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionStatement(self):
            return self.getTypedRuleContext(sclParser.FunctionStatementContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.ExprContext)
            else:
                return self.getTypedRuleContext(sclParser.ExprContext,i)


        def varName(self):
            return self.getTypedRuleContext(sclParser.VarNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(sclParser.ConstantContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sclParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 747
                self.functionStatement()
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 748
                        self.match(sclParser.T__108)
                        self.state = 749
                        self.expr(0) 
                    self.state = 754
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                pass

            elif la_ == 2:
                self.state = 755
                self.match(sclParser.T__119)
                self.state = 756
                self.expr(9)
                pass

            elif la_ == 3:
                self.state = 757
                self.varName()
                pass

            elif la_ == 4:
                self.state = 758
                self.constant()
                pass

            elif la_ == 5:
                self.state = 759
                self.match(sclParser.T__87)
                self.state = 760
                self.expr(3)
                pass

            elif la_ == 6:
                self.state = 761
                self.match(sclParser.T__40)
                self.state = 762
                self.expr(2)
                pass

            elif la_ == 7:
                self.state = 763
                self.match(sclParser.T__37)
                self.state = 764
                self.expr(0)
                self.state = 765
                self.match(sclParser.T__38)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 819
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 817
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 769
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 770
                        self.match(sclParser.T__109)
                        self.state = 771
                        self.expr(23)
                        pass

                    elif la_ == 2:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 772
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 773
                        self.match(sclParser.T__86)
                        self.state = 774
                        self.expr(22)
                        pass

                    elif la_ == 3:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 775
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 776
                        self.match(sclParser.T__110)
                        self.state = 777
                        self.expr(21)
                        pass

                    elif la_ == 4:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 778
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 779
                        self.match(sclParser.T__87)
                        self.state = 780
                        self.expr(20)
                        pass

                    elif la_ == 5:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 781
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 782
                        self.match(sclParser.T__40)
                        self.state = 783
                        self.expr(19)
                        pass

                    elif la_ == 6:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 784
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 785
                        self.match(sclParser.T__111)
                        self.state = 786
                        self.expr(18)
                        pass

                    elif la_ == 7:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 787
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 788
                        self.match(sclParser.T__112)
                        self.state = 789
                        self.expr(17)
                        pass

                    elif la_ == 8:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 790
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 791
                        self.match(sclParser.T__113)
                        self.state = 792
                        self.expr(16)
                        pass

                    elif la_ == 9:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 793
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 794
                        self.match(sclParser.T__114)
                        self.state = 795
                        self.expr(15)
                        pass

                    elif la_ == 10:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 796
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 797
                        self.match(sclParser.T__115)
                        self.state = 798
                        self.expr(14)
                        pass

                    elif la_ == 11:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 799
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 800
                        self.match(sclParser.T__116)
                        self.state = 801
                        self.expr(13)
                        pass

                    elif la_ == 12:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 802
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 803
                        self.match(sclParser.T__117)
                        self.state = 804
                        self.expr(12)
                        pass

                    elif la_ == 13:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 805
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 806
                        self.match(sclParser.T__118)
                        self.state = 807
                        self.expr(11)
                        pass

                    elif la_ == 14:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 808
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 809
                        _la = self._input.LA(1)
                        if not(_la==121 or _la==122):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 810
                        self.expr(9)
                        pass

                    elif la_ == 15:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 811
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 812
                        self.match(sclParser.T__122)
                        self.state = 813
                        self.expr(8)
                        pass

                    elif la_ == 16:
                        localctx = sclParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 814
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 815
                        self.match(sclParser.T__123)
                        self.state = 816
                        self.expr(7)
                        pass

             
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VarNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_varName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarName" ):
                listener.enterVarName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarName" ):
                listener.exitVarName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarName" ):
                return visitor.visitVarName(self)
            else:
                return visitor.visitChildren(self)




    def varName(self):

        localctx = sclParser.VarNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_varName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.expressionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inputParameter(self):
            return self.getTypedRuleContext(sclParser.InputParameterContext,0)


        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def outputParameter(self):
            return self.getTypedRuleContext(sclParser.OutputParameterContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_functionParameterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameterExpression" ):
                listener.enterFunctionParameterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameterExpression" ):
                listener.exitFunctionParameterExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameterExpression" ):
                return visitor.visitFunctionParameterExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionParameterExpression(self):

        localctx = sclParser.FunctionParameterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_functionParameterExpression)
        try:
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.inputParameter()
                self.state = 825
                self.match(sclParser.T__34)
                self.state = 826
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.outputParameter()
                self.state = 829
                self.match(sclParser.T__124)
                self.state = 830
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_inputParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputParameter" ):
                listener.enterInputParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputParameter" ):
                listener.exitInputParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputParameter" ):
                return visitor.visitInputParameter(self)
            else:
                return visitor.visitChildren(self)




    def inputParameter(self):

        localctx = sclParser.InputParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inputParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_outputParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputParameter" ):
                listener.enterOutputParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputParameter" ):
                listener.exitOutputParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputParameter" ):
                return visitor.visitOutputParameter(self)
            else:
                return visitor.visitChildren(self)




    def outputParameter(self):

        localctx = sclParser.OutputParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_outputParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REALLiteral(self):
            return self.getToken(sclParser.REALLiteral, 0)

        def INTLiteral(self):
            return self.getToken(sclParser.INTLiteral, 0)

        def DINTLiteral(self):
            return self.getToken(sclParser.DINTLiteral, 0)

        def getRuleIndex(self):
            return sclParser.RULE_numberConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberConstant" ):
                listener.enterNumberConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberConstant" ):
                listener.exitNumberConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberConstant" ):
                return visitor.visitNumberConstant(self)
            else:
                return visitor.visitChildren(self)




    def numberConstant(self):

        localctx = sclParser.NumberConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_numberConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            _la = self._input.LA(1)
            if not(((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REALLiteral(self):
            return self.getToken(sclParser.REALLiteral, 0)

        def INTLiteral(self):
            return self.getToken(sclParser.INTLiteral, 0)

        def BOOLLiteral(self):
            return self.getToken(sclParser.BOOLLiteral, 0)

        def DINTLiteral(self):
            return self.getToken(sclParser.DINTLiteral, 0)

        def CHARLiteral(self):
            return self.getToken(sclParser.CHARLiteral, 0)

        def STRINGLiteral(self):
            return self.getToken(sclParser.STRINGLiteral, 0)

        def BYTELiteral(self):
            return self.getToken(sclParser.BYTELiteral, 0)

        def WORDLiteral(self):
            return self.getToken(sclParser.WORDLiteral, 0)

        def DWORDLiteral(self):
            return self.getToken(sclParser.DWORDLiteral, 0)

        def DATELiteral(self):
            return self.getToken(sclParser.DATELiteral, 0)

        def TIMELiteral(self):
            return self.getToken(sclParser.TIMELiteral, 0)

        def TIME_OF_DAYLiteral(self):
            return self.getToken(sclParser.TIME_OF_DAYLiteral, 0)

        def DATE_AND_TIMELiteral(self):
            return self.getToken(sclParser.DATE_AND_TIMELiteral, 0)

        def POINTERLiteral(self):
            return self.getToken(sclParser.POINTERLiteral, 0)

        def GLOBALBOOLLiteral(self):
            return self.getToken(sclParser.GLOBALBOOLLiteral, 0)

        def elementaryType(self):
            return self.getTypedRuleContext(sclParser.ElementaryTypeContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = sclParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_constant)
        try:
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(sclParser.REALLiteral)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.match(sclParser.INTLiteral)
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 3)
                self.state = 842
                self.match(sclParser.BOOLLiteral)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 4)
                self.state = 843
                self.match(sclParser.DINTLiteral)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 844
                self.match(sclParser.CHARLiteral)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 6)
                self.state = 845
                self.match(sclParser.STRINGLiteral)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 7)
                self.state = 846
                self.match(sclParser.BYTELiteral)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 8)
                self.state = 847
                self.match(sclParser.WORDLiteral)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 9)
                self.state = 848
                self.match(sclParser.DWORDLiteral)
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 10)
                self.state = 849
                self.match(sclParser.DATELiteral)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 11)
                self.state = 850
                self.match(sclParser.TIMELiteral)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 12)
                self.state = 851
                self.match(sclParser.TIME_OF_DAYLiteral)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 13)
                self.state = 852
                self.match(sclParser.DATE_AND_TIMELiteral)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 14)
                self.state = 853
                self.match(sclParser.POINTERLiteral)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 15)
                self.state = 854
                self.match(sclParser.GLOBALBOOLLiteral)
                pass
            elif token in [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83]:
                self.enterOuterAlt(localctx, 16)
                self.state = 855
                self.elementaryType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(sclParser.Identifier, 0)

        def identifierIndex(self):
            return self.getTypedRuleContext(sclParser.IdentifierIndexContext,0)


        def ambiguousName(self):
            return self.getTypedRuleContext(sclParser.AmbiguousNameContext,0)


        def ambiguousNext(self):
            return self.getTypedRuleContext(sclParser.AmbiguousNextContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_expressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionName" ):
                listener.enterExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionName" ):
                listener.exitExpressionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionName" ):
                return visitor.visitExpressionName(self)
            else:
                return visitor.visitChildren(self)




    def expressionName(self):

        localctx = sclParser.ExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expressionName)
        try:
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.match(sclParser.Identifier)
                self.state = 860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.identifierIndex()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.ambiguousName(0)
                self.state = 863
                self.ambiguousNext()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(sclParser.Identifier, 0)

        def identifierIndex(self):
            return self.getTypedRuleContext(sclParser.IdentifierIndexContext,0)


        def ambiguousName(self):
            return self.getTypedRuleContext(sclParser.AmbiguousNameContext,0)


        def ambiguousNext(self):
            return self.getTypedRuleContext(sclParser.AmbiguousNextContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_ambiguousName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousName" ):
                listener.enterAmbiguousName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousName" ):
                listener.exitAmbiguousName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousName" ):
                return visitor.visitAmbiguousName(self)
            else:
                return visitor.visitChildren(self)



    def ambiguousName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sclParser.AmbiguousNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_ambiguousName, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(sclParser.Identifier)
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 869
                self.identifierIndex()


            self._ctx.stop = self._input.LT(-1)
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = sclParser.AmbiguousNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ambiguousName)
                    self.state = 872
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 873
                    self.ambiguousNext() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AmbiguousNextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(sclParser.Identifier, 0)

        def identifierIndex(self):
            return self.getTypedRuleContext(sclParser.IdentifierIndexContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_ambiguousNext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousNext" ):
                listener.enterAmbiguousNext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousNext" ):
                listener.exitAmbiguousNext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousNext" ):
                return visitor.visitAmbiguousNext(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousNext(self):

        localctx = sclParser.AmbiguousNextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ambiguousNext)
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(sclParser.T__108)
                self.state = 880
                self.match(sclParser.T__125)
                self.state = 881
                self.match(sclParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.match(sclParser.T__108)
                self.state = 883
                self.match(sclParser.Identifier)
                self.state = 885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 884
                    self.identifierIndex()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierIndexValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sclParser.IdentifierIndexValueContext)
            else:
                return self.getTypedRuleContext(sclParser.IdentifierIndexValueContext,i)


        def getRuleIndex(self):
            return sclParser.RULE_identifierIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierIndex" ):
                listener.enterIdentifierIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierIndex" ):
                listener.exitIdentifierIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierIndex" ):
                return visitor.visitIdentifierIndex(self)
            else:
                return visitor.visitChildren(self)




    def identifierIndex(self):

        localctx = sclParser.IdentifierIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_identifierIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(sclParser.T__35)
            self.state = 890
            self.identifierIndexValue()
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 891
                self.match(sclParser.T__32)
                self.state = 892
                self.identifierIndexValue()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 898
            self.match(sclParser.T__36)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierIndexValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTLiteral(self):
            return self.getToken(sclParser.INTLiteral, 0)

        def expressionName(self):
            return self.getTypedRuleContext(sclParser.ExpressionNameContext,0)


        def expr(self):
            return self.getTypedRuleContext(sclParser.ExprContext,0)


        def getRuleIndex(self):
            return sclParser.RULE_identifierIndexValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierIndexValue" ):
                listener.enterIdentifierIndexValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierIndexValue" ):
                listener.exitIdentifierIndexValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierIndexValue" ):
                return visitor.visitIdentifierIndexValue(self)
            else:
                return visitor.visitChildren(self)




    def identifierIndexValue(self):

        localctx = sclParser.IdentifierIndexValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_identifierIndexValue)
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(sclParser.INTLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 901
                self.expressionName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[56] = self.expr_sempred
        self._predicates[64] = self.ambiguousName_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 6)
         

    def ambiguousName_sempred(self, localctx:AmbiguousNameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         




