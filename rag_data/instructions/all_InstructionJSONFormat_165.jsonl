{"指令名": "R_TRIG", "指令说明": "使用“检测信号上升沿”指令，可以检测输入 CLK 的从“0”到“1”的状态变化。该指令将输入 CLK 的当前值与保存在指定实例中的上次查询（边沿存储位）的状态进行比较。如果检测到状态从“0”变为“1”，则在输出 Q 中生成一个信号上升沿。", "参数列表": [" CLK, Input, BOOL, 到达信号，将查询该信号的边沿。", " Q, Output, BOOL, 边沿检测的结果。"], "示例代码和代码解读": "`SCL \"R_TRIG_DB\"(CLK := \"TagIn\", Q => \"TagOut\");` 输入 CLK 中变量的上一个状态存储在“R_TRIG_DB”变量中。如果检测到“TagIn”的信号状态从“0”变为“1”，则“TagOut”的信号状态在一个循环周期内为“1”。", "其他有用信息": "无。"}
{"指令名": "F_TRIG", "指令说明": "使用“检测信号下降沿”指令，可以检测输入 CLK 的从“1”到“0”的状态变化。该指令将输入 CLK 的当前值与保存在指定实例中的上次查询的状态进行比较。如果检测到状态从“1”变为“0”，则在输出 Q 中生成一个信号下降沿。", "参数列表": [" CLK, Input, BOOL, 到达信号，将查询该信号的边沿。", " Q, Output, BOOL, 边沿检测的结果。"], "示例代码和代码解读": "`SCL \"F_TRIG_DB\"(CLK := \"TagIn\", Q => \"TagOut\");` 如果检测到“TagIn”的信号状态从“1”变为“0”，则“TagOut”的信号状态在一个循环周期内为“1”。", "其他有用信息": "CPU 启动后，如果输入“CLK”的值为 FALSE，则“F_TRIG”将输出“Q”设置为 TRUE 并持续一个周期。"}
{"指令名": "TP", "指令说明": "使用“生成脉冲”指令，可以根据参数 IN 的信号上升沿，将参数 Q 置位为预设的一段时间 PT。无论未来输入信号的状态如何变化，都将在持续时间 PT 后复位参数 Q。", "参数列表": [" IN, Input, BOOL, 启动输入。", " PT, Input, TIME, 脉冲的持续时间。", " Q, Output, BOOL, 在 PT 持续时间内保持置位状态的操作数。", " ET, Output, TIME, 当前定时器的值。"], "示例代码和代码解读": "`SCL \"TP_DB\".TP(IN := \"Tag_Start\", PT := \"Tag_PresetTime\", Q => \"Tag_Status\", ET => \"Tag_ElapsedTime\");` 当“Tag_Start”信号上升沿时，PT 预设时间开始计时，并且“Tag_Status”置位为“1”。当前时间值存储在“Tag_ElapsedTime”中。", "其他有用信息": "每次调用“生成脉冲”指令，都会为其分配一个 IEC 定时器用于存储实例数据。"}
{"指令名": "TON", "指令说明": "“接通延时”指令可以在输入 IN 的信号上升沿时启动，并延时 PT 指定的时间后，将 Q 参数置位。", "参数列表": [" IN, Input, BOOL, 启动输入。", " PT, Input, TIME, 接通延时的持续时间。", " Q, Output, BOOL, 定时器 PT 时间用完时，保持置位状态的操作数。", " ET, Output, TIME, 当前定时器的值。"], "示例代码和代码解读": "`SCL \"TON_DB\".TON(IN := \"Tag_Start\", PT := \"Tag_PresetTime\", Q => \"Tag_Status\", ET => \"Tag_ElapsedTime\");` 当“Tag_Start”信号上升沿时，PT 预设时间开始计时。时间周期过后，“Tag_Status”置位为“1”。只要“Tag_Start”为“1”，“Tag_Status”保持置位。当前时间值存储在“Tag_ElapsedTime”中。", "其他有用信息": "每次调用“接通延时”指令，必须将其分配给存储实例数据的 IEC 定时器。"}
{"指令名": "TOF", "指令说明": "使用“关断延时”指令，可以在输入 IN 的信号上升沿时置位 Q 输出，当 IN 信号变为“0”时开始计时 PT，持续时间结束后复位 Q 输出。", "参数列表": [" IN, Input, BOOL, 启动输入。", " PT, Input, TIME, 关断延时的持续时间。", " Q, Output, BOOL, 超出时间 PT 后复位的操作数。", " ET, Output, TIME, 当前定时器的值。"], "示例代码和代码解读": "`SCL \"TOF_DB\".TOF(IN := \"Tag_Start\", PT := \"Tag_PresetTime\", Q => \"Tag_Status\", ET => \"Tag_ElapsedTime\");` “Tag_Start”信号上升沿时置位“Tag_Status”。当“Tag_Start”变为“0”，PT 预设时间开始计时，时间结束后复位“Tag_Status”。当前时间值存储在“Tag_ElapsedTime”中。", "其他有用信息": "每次调用“关断延时”指令，必须将其分配给存储实例数据的 IEC 定时器。"}
{"指令名": "TONR", "指令说明": "可以使用“时间累加器”指令来累加由参数 PT 设定的时间段内的时间值。只要 IN 参数的信号状态为“1”，时间 PT 计时过程中，记录的时间值将进行累加。", "参数列表": [" IN, Input, BOOL, 启动输入。", " R, Input, BOOL, 复位参数 ET 和 Q。", " PT, Input, TIME, 时间记录的最长持续时间。", " Q, Output, BOOL, 定时器 PT 内时间用完时，仍保持置位状态的操作数。", " ET, Output, TIME, 累计的时间。"], "示例代码和代码解读": "`SCL \"TONR_DB\".TONR(IN := \"Tag_Start\", R := \"Tag_Reset\", PT := \"Tag_PresetTime\", Q => \"Tag_Status\", ET => \"Tag_Time\");` 当“Tag_Start”信号上升沿时，PT 预设时间开始计时。累加得到的时间值将存储在“Tag_Time”中。达到 PT 指定的时间值时，“Tag_Status”置位为“1”。", "其他有用信息": "每次调用“时间累加器”指令，必须为其分配一个用于存储实例数据的 IEC 定时器。"}
{"指令名": "RESET_TIMER", "指令说明": "使用“复位定时器”指令，可将 IEC 定时器复位为“0”。该指令不会影响 RLO。", "参数列表": [" <IEC 定时器>, Output, IEC_TIMER、TP_TIME、TON_TIME、TOF_TIME、TONR_TIME, 待复位的 IEC 定时器。"], "示例代码和代码解读": "`SCL IF #started = false THEN \"TON_DB\".TON(IN := \"Tag_Start\", PT := \"Tag_PresetTime\", Q => \"Tag_Status\", ET => \"Tag_ElapsedTime\"); #started := true; END_IF; IF \"TON_DB\".ET < T#25s THEN RESET_TIMER(TIMER := \"TON_DB\"); #started := false; END_IF;` 当变量 #started 为“0”时，执行“接通延时”指令。如果 IEC 定时器“TON_DB”的超出时间小于 25s，则执行“复位定时器”指令，并复位存储在“TON_DB”背景数据块中的定时器。", "其他有用信息": "在定时器运行时，重新初始化 IEC 定时器的实际值会破坏 IEC 定时器的功能，可能会导致程序和实际过程之间不一致。"}
{"指令名": "PRESET_TIMER", "指令说明": "可以使用“加载持续时间”指令为 IEC 定时器设置时间。如果该指令输入逻辑运算结果 (RLO) 的信号状态为“1”，则每个周期都执行该指令。", "参数列表": [" <持续时间>, Input, TIME, IEC 定时器运行的持续时间。", " <IEC 定时器>, Output, IEC_TIMER、TP_TIME、TON_TIME、TOF_TIME、TONR_TIME, 设置了持续时间的 IEC 定时器。"], "示例代码和代码解读": "`SCL IF #started = false THEN \"TON_DB\".TON(IN := \"Tag_Start\", PT := \"Tag_PresetTime\", Q => \"Tag_Status\", ET => \"Tag_ElapsedTime\"); #started := true; #preset := true END_IF; IF \"TON_DB\".ET < T#10s AND #preset = true THEN PRESET_TIMER(PT := T#25s, TIMER := \"TON_DB\"); #preset := false; END_IF;` 当变量 #started 为“0”时，执行“接通延", "其他有用信息": "如果在指令执行时指定 IEC 定时器正在计时，指令将覆盖该指定 IEC 定时器的当前值。"}
{"指令名": "S_PULSE", "指令说明": "当检测到参数 S 的逻辑运算结果 (RLO) 从“0”到“1”的变化时，“分配脉冲定时器参数并启动”指令开始计时参数 T_NO 中预设的一段时间。", "参数列表": [" T_NO, Input, TIMER、INT, 已启动的定时器。定时器的数量取决于 CPU。", " S, Input, BOOL, 启动输入。", " TV, Input, S5TIME、WORD, 预设时间值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 定时器的状态。", " BI, Output, WORD, 当前二进制编码的时间值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_PULSE(T_NO := \"Timer_1\", S := \"Tag_1\", TV := \"Tag_Number\", R := \"Tag_Reset\", Q => \"Tag_Status\", BI => \"Tag_Value\");` 操作数“Tag_1”信号上升沿时，“Timer_1”启动。使用“Tag_Number”时间值进行减计数，直到“Tag_1”信号状态返回“1”。", "其他有用信息": "无。"}
{"指令名": "S_PEXT", "指令说明": "当检测到参数 S 的信号上升沿时，“分配扩展脉冲定时器参数并启动”指令将启动预设的定时器。只要 S 参数的信号状态为“1”，定时器将运行一段预设的时间 (TV)。", "参数列表": [" T_NO, Input, TIMER、INT, 已启动的定时器。定时器的数量取决于 CPU。", " S, Input, BOOL, 启动输入。", " TV, Input, S5TIME、WORD, 预设时间值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 定时器的状态。", " BI, Output, WORD, 当前二进制编码的时间值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_PEXT(T_NO := \"Timer_1\", S := \"Tag_1\", TV := \"Tag_Number\", R := \"Tag_Reset\", Q => \"Tag_Status\", BI => \"Tag_Value\");` “Timer_1”信号状态从“0”变为“1”时，“Tag_1”启动。定时器计时时，“Tag_Status”返回信号状态“1”。达到预置时间时，“Tag_Status”复位为“0”。", "其他有用信息": "无。"}
{"指令名": "S_ODT", "指令说明": "当检测到参数 S 的信号上升沿时，“分配接通延时定时器参数并启动”指令将启动预设的定时器作为接通延时定时器。", "参数列表": [" T_NO, Input, TIMER、INT, 已启动的定时器。定时器的数量取决于 CPU。", " S, Input, BOOL, 启动输入。", " TV, Input, S5TIME、WORD, 预设时间值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 定时器的状态。", " BI, Output, WORD, 当前二进制编码的时间值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_ODT(T_NO := \"Timer_1\", S := \"Tag_1\", TV := \"Tag_Number\", R := \"Tag_Reset\", Q => \"Tag_Status\", BI => \"Tag_Value\");` “Timer_1”信号状态从“0”变为“1”时，“Tag_1”启动。只要“Tag_1”信号状态为“1”，定时器就将在持续时间“Tag_Number”内一直计时。", "其他有用信息": "无。"}
{"指令名": "S_ODTS", "指令说明": "当检测到参数 S 的信号上升沿时，“分配保持型接通延时定时器参数并启动”指令将启动预设的定时器。", "参数列表": [" T_NO, Input, TIMER、INT, 已启动的定时器。定时器的数量取决于 CPU。", " S, Input, BOOL, 启动输入。", " TV, Input, S5TIME、WORD, 预设时间值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 定时器的状态。", " BI, Output, WORD, 当前二进制编码的时间值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_ODTS(T_NO := \"Timer_1\", S := \"Tag_1\", TV := \"Tag_Number\", R := \"Tag_Reset\", Q => \"Tag_Status\", BI => \"Tag_Value\");` “Timer_1”信号状态从“0”变为“1”时，“Tag_1”启动。定时器的运行时间为“Tag_Number”。如果定时器已达到预置时间，则“Tag_Status”将返回信号状态“1”，而与“Tag_1”的信号状态无关。", "其他有用信息": "无。"}
{"指令名": "S_OFFDT", "指令说明": "当检测到参数 S 的信号下降沿时，“分配关断延时定时器参数并启动”指令将启动预设的定时器。", "参数列表": [" T_NO, Input, TIMER、INT, 已启动的定时器。定时器的数量取决于 CPU。", " S, Input, BOOL, 启动输入。", " TV, Input, S5TIME、WORD, 预设时间值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 定时器的状态。", " BI, Output, WORD, 当前二进制编码的时间值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_OFFDT(T_NO := \"Timer_1\", S := \"Tag_1\", TV := \"Tag_Number\", R := \"Tag_Reset\", Q => \"Tag_Status\", BI => \"Tag_Value\");` 如果“Tag_1”信号状态从“1”变为“0”，将启动“Timer_1”定时器。定时器的运行时间为“Tag_Number”。只要定时器在计时或“Tag_1”返回信号状态“1”，“Tag_Status”的信号状态就为“1”。", "其他有用信息": "无。"}
{"指令名": "CTU", "指令说明": "可以使用“加计数”指令递增 CV 参数的值。如果参数 CU 的信号状态从“0”变为“1”（信号上升沿），则执行该指令，同时参数 CV 的当前计数器值加“1”。", "参数列表": [" CU, Input, BOOL, 计数输入。", " R, Input, BOOL, 复位输入。", " PV, Input, 整数, 置位输出 Q 的目标值。", " Q, Output, BOOL, 计数器状态。", " CV, Output, 整数、CHAR、WCHAR、DATE, 当前计数器值。"], "示例代码和代码解读": "`SCL \"IEC_COUNTER_DB\".CTU(CU := \"Tag_Start\", R := \"Tag_Reset\", PV := \"Tag_PresetValue\", Q => \"Tag_Status\", CV => \"Tag_CounterValue\");`", "其他有用信息": "计数器值递增直至达到数据类型上限。"}
{"指令名": "CTD", "指令说明": "“减计数”指令用于递减 CV 参数的值。如果参数 CD 的信号状态从“0”变为“1”（信号上升沿），则执行该指令，同时参数 CV 的当前计数器值减“1”。", "参数列表": [" CD, Input, BOOL, 计数输入。", " LD, Input, BOOL, 装载输入。", " PV, Input, 整数, 使用 LD = 1 置位输出 CV 的目标值。", " Q, Output, BOOL, 计数器状态。", " CV, Output, 整数、CHAR、WCHAR、DATE, 当前计数器值。"], "示例代码和代码解读": "`SCL \"IEC_SCOUNTER_DB\".CTD(CD := \"Tag_Start\", LD := \"Tag_Load\", PV := \"Tag_PresetValue\", Q => \"Tag_Status\", CV => \"Tag_CounterValue\");`", "其他有用信息": "计数器值递减直至达到数据类型下限。"}
{"指令名": "CTUD", "指令说明": "使用“加减计数”指令递增和递减 CV 参数的计数器值。根据 CU 和 CD 的信号状态，参数 CV 的值会相应增加或减少。", "参数列表": [" CU, Input, BOOL, 加计数输入。", " CD, Input, BOOL, 减计数输入。", " R, Input, BOOL, 复位输入。", " LD, Input, BOOL, 装载输入。", " PV, Input, 整数, 置位输出 QU 的值 / 当 LD = 1 时，置位输出 CV 的值。", " QU, Output, BOOL, 加计数器的状态。", " QD, Output, BOOL, 减计数器的状态。", " CV, Output, 整数、CHAR、WCHAR、DATE, 当前计数器值。"], "示例代码和代码解读": "`SCL \"IEC_COUNTER_DB\".CTUD(CU := \"Tag_Start1\", CD := \"Tag_Start2\", LD := \"Tag_Load\", R := \"Tag_Reset\", PV := \"Tag_PresetValue\", QU => \"Tag_CU_Status\", QD => \"Tag_CD_Status\", CV => \"Tag_CounterValue\");`", "其他有用信息": "在一个程序周期内 CU 和 CD 同时出现上升沿时，计数器值不变。"}
{"指令名": "S_CU", "指令说明": "可使用“分配参数并加计数”指令递增计数器值。当 CU 参数的信号状态从“0”变为“1”（信号上升沿）时，当前计数器值加 1。", "参数列表": [" C_NO, Input, COUNTER、INT, 计数器操作。", " CU, Input, BOOL, 加计数输入。", " S, Input, BOOL, 用于预置计数器的输入端。", " PV, Input, WORD, 预置 BCD 格式的计数器值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 计数器状态。", " CV, Output, WORD, 当前计数器值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_CU(C_NO := \"Counter_1\", CU := \"Tag_Start\", S := \"Tag_1\", PV := \"Tag_PresetValue\", R := \"Tag_Reset\", Q => \"Tag_Status\", CV => \"Tag_Value\");`", "其他有用信息": "计数器值达到上限 999 后停止增加。"}
{"指令名": "S_CD", "指令说明": "可使用“分配参数并减计数”指令递减计数器值。当 CD 参数的信号状态从“0”变为“1”（信号上升沿）时，当前计数器值减 1。", "参数列表": [" C_NO, Input, COUNTER、INT, 计数器操作。", " CD, Input, BOOL, 减计数输入。", " S, Input, BOOL, 用于预置计数器的输入端。", " PV, Input, WORD, 预置 BCD 格式的计数器值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 计数器状态。", " CV, Output, WORD, 当前计数器值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_CD(C_NO := \"Counter_1\", CD := \"Tag_Start\", S := \"Tag_1\", PV := \"Tag_PresetValue\", R := \"Tag_Reset\", Q => \"Tag_Status\", CV => \"Tag_Value\");`", "其他有用信息": "计数器值达到下限 0 时停止递减。"}
{"指令名": "S_CUD", "指令说明": "可使用“分配参数并加/减计数”指令递增和递减计数器值。根据 CU 和 CD 的信号状态，当前计数器值将相应增加或减少。", "参数列表": [" C_NO, Input, COUNTER、INT, 计数器操作。", " CU, Input, BOOL, 加计数输入。", " CD, Input, BOOL, 减计数输入。", " S, Input, BOOL, 用于预置计数器的输入端。", " PV, Input, WORD, 预置 BCD 格式的计数器值。", " R, Input, BOOL, 复位输入。", " Q, Output, BOOL, 计数器状态。", " CV, Output, WORD, 当前计数器值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := S_CD(C_NO := \"Counter_1\", CU := \"Tag_CU\", CD := \"Tag_CD\", S := \"Tag_1\", PV := \"Tag_PresetValue\", R := \"Tag_Reset\", Q => \"Tag_Status\", CV => \"Tag_Value\");`", "其他有用信息": "计数器值达到上限 999 或下限 0 时停止变化。"}
{"指令名": "TypeOf", "指令说明": "可以使用“检查 VARIANT 或 ResolvedSymbol 变量的数据类型”指令检查 VARIANT 或 ResolvedSymbol 变量所指向的变量的数据类型，并进行比较。", "参数列表": [" <操作数>, Input, 二进制数、整数、浮点数、时间、日期和时间、字符串、VARIANT、ResolvedSymbol, 用于查询的操作数。"], "示例代码和代码解读": "`SCL IF TypeOf(#TagVARIANT) = TypeOf(\"TagBYTE\") THEN ...; END_IF;`", "其他有用信息": "只能在 IF 或 CASE 指令中使用。"}
{"指令名": "TypeOfElements", "指令说明": "可以使用“检查 VARIANT 变量的 ARRAY 元素的数据类型”指令查询 VARIANT 变量所指向的变量的数据类型，并进行比较。", "参数列表": [" <操作数>, Input, VARIANT, 用于查询的操作数。"], "示例代码和代码解读": "`SCL IF TypeOfElements(\"Tag_Variant\") = TypeOF(\"GlobalDB\".Product[1]) THEN \"Tag_Variant\" := \"GlobalDB\".Product[1] * 3; END_IF;`", "其他有用信息": "只能在 IF 或 CASE 指令中使用。"}
{"指令名": "IS_ARRAY", "指令说明": "可以使用“检查 ARRAY”指令查询 VARIANT 是否指向 ARRAY 数据类型的变量。", "参数列表": [" <操作数>, Input, VARIANT, 为 ARRAY 查询的操作数。"], "示例代码和代码解读": "`SCL IF IS_ARRAY(#Tag_VARIANTToArray) THEN \"Tag_Result\" := CountOfElements(#Tag_VARIANTToArray); END_IF;`", "其他有用信息": "只能在 IF 指令中使用。"}
{"指令名": "TypeOfDB", "指令说明": "指令“查询 DB 的数据类型”用于查询某个数据块的数据类型，该数据块由 DB_ANY 数据类型变量进行寻址。", "参数列表": [" <操作数>, Input, DB_ANY, 用于查询的操作数。"], "示例代码和代码解读": "`SCL IF TypeOfDB(#InputDBAny) = TO", "其他有用信息": "只能在 IF 或 CASE 指令中使用。"}
{"指令名": "ABS", "指令说明": "使用“计算绝对值”指令可计算输入值的绝对值，并将结果保存到指定的操作数中。", "参数列表": [" <表达式>, Input, SINT、INT、DINT、LINT、浮点数, 输入值。"], "示例代码和代码解读": "`SCL \"Tag_Result1\" := ABS(\"Tag_Value\");`", "其他有用信息": "结果与输入值的数据类型相同。"}
{"指令名": "MIN", "指令说明": "使用“获取最小值”指令比较可用输入的值，并将最小的值作为结果返回。至少需要两个输入。", "参数列表": [" IN1, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 第一个输入值。", " IN2, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 第二个输入值。", " INn, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 其他插入的输入（其值待比较）。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := MIN(IN1 := \"Tag_Value1\", IN2 := \"Tag_Value2\", IN3 := \"Tag_Value3\");`", "其他有用信息": "结果为所有输入中的最小值。"}
{"指令名": "MAX", "指令说明": "使用“获取最大值”指令，比较输入值，并将最大的值作为结果返回。至少需要两个输入。", "参数列表": [" IN1, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 第一个输入值。", " IN2, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 第二个输入值。", " INn, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 其他插入的输入（其值待比较）。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := MAX(IN1 := \"Tag_Value1\", IN2 := \"Tag_Value2\", IN3 := \"Tag_Value3\");`", "其他有用信息": "结果为所有输入中的最大值。"}
{"指令名": "LIMIT", "指令说明": "可使用“设置限值”指令，将参数 IN 的值限制在参数 MN 和 MX 值之间。MN 不应大于 MX。", "参数列表": [" MN, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 下限。", " IN, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 输入值。", " MX, Input, 整数、浮点数、TIME、TOD、DATE、DTL, 上限。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := LIMIT(MN := \"Tag_Minimum\", IN := \"Tag_Value\", MX := \"Tag_Maximum\");`", "其他有用信息": "如果 MN 大于 MX，结果为 IN 参数的值，且 ENO 为“0”。"}
{"指令名": "SQR", "指令说明": "使用“计算平方”指令，可以计算输入值的平方值，并将结果保存到指定的操作数中。", "参数列表": [" <表达式>, Input, 浮点数, 输入值。"], "示例代码和代码解读": "`SCL \"Tag_Result1\" := SQR(\"Tag_Value\");`", "其他有用信息": "结果为输入值的平方。"}
{"指令名": "SQRT", "指令说明": "使用“计算平方根”指令，可以计算输入值的平方根，并将结果保存到指定的操作数中。", "参数列表": [" <表达式>, Input, 浮点数, 输入值。"], "示例代码和代码解读": "`SCL \"Tag_Result1\" := SQRT(\"Tag_Value\");`", "其他有用信息": "如果输入值小于零，则返回无效浮点数。"}
{"指令名": "LN", "指令说明": "使用“计算自然对数”指令，可以计算输入值的以 e 为底的自然对数。", "参数列表": [" <表达式>, Input, 浮点数, 输入值。"], "示例代码和代码解读": "`SCL \"Tag_Result1\" := LN(\"Tag_Value\");`", "其他有用信息": "如果输入值小于零，则返回无效浮点数。"}
{"指令名": "EXP", "指令说明": "使用“计算指数值”指令，可通过底数 e 及输入值来计算指数，并将结果保存在指定的操作数中。", "参数列表": [" <表达式>, Input, 浮点数, 输入值。"], "示例代码和代码解读": "`SCL \"Tag_Result1\" := EXP(\"Tag_Value\");`", "其他有用信息": "无。"}
{"指令名": "SIN", "指令说明": "使用“计算正弦值”指令，可以计算输入值的正弦值。输入值的单位必须为弧度。", "参数列表": [" <表达式>, Input, 浮点数, 输入值（弧度形式的角度值）。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := SIN(\"Tag_Value\");`", "其他有用信息": "无。"}
{"指令名": "COS", "指令说明": "使用“计算余弦值”指令，可以计算输入值的余弦值。输入值的单位必须为弧度。", "参数列表": [" <表达式>, Input, 浮点数, 输入值（弧度形式的角度值）。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := COS(\"Tag_Value\");`", "其他有用信息": "无。"}
{"指令名": "TAN", "指令说明": "使用“计算正切值”指令，可以计算输入值的正切值。输入值的单位必须为弧度。", "参数列表": [" <表达式>, Input, 浮点数, 输入值（弧度形式的角度值）。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := TAN(\"Tag_Value\");`", "其他有用信息": "无。"}
{"指令名": "ASIN", "指令说明": "使用“计算反正弦值”指令，可以计算正弦值所对应的角度值。输入值只能是 -1 到 +1 范围内的有效浮点数。", "参数列表": [" <表达式>, Input, 浮点数, 正弦值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := ASIN(\"Tag_Value\");`", "其他有用信息": "结果范围在 -π/2 到 +π/2 之间。"}
{"指令名": "ACOS", "指令说明": "使用“计算反余弦值”指令，可以计算余弦值所对应的角度值。输入值只能是 -1 到 +1 范围内的有效浮点数。", "参数列表": [" <表达式>, Input, 浮点数, 余弦值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := ACOS(\"Tag_Value\");`", "其他有用信息": "结果范围在 0 到 +π 之间。"}
{"指令名": "ATAN", "指令说明": "使用“计算反正切值”指令，可以计算正切值所对应的角度值。输入值可以是任何有效的浮点数。", "参数列表": [" <表达式>, Input, 浮点数, 正切值。"], "示例代码和代码解读": "`SCL \"Tag_Result\" := ATAN(\"Tag_Value\");`", "其他有用信息": "结果范围在 -π/2 到 +π/2 之间。"}
{"指令名": "FRAC", "指令说明": "“返回小数”指令的结果将返回数值的小数位。例如，输入值为 1.125 时，将返回值 0.125。", "参数列表": [" <表达式>, Input, 浮点数, 输入值。"], "示例代码和代码解读": "`SCL \"Tag_Result1\" := FRAC(\"Tag_Value\");`", "其他有用信息": "无。"}
{"指令名": "Deserialize", "指令说明": "可以使用“取消序列化”指令反向转换 PLC 数据类型（UDT）、STRUCT 或 ARRAY 的顺序表示并填充所有内容。", "参数列表": [" SRC_ARRAY, Input, ARRAY[*] of BYTE 或 ARRAY of CHAR, 用于保存其数据流将取消序列化的 ARRAY of BYTE 或 ARRAY of CHAR。", " DEST_VARIABLE, InOut, 所有数据类型, 已取消序列化数据待写入的目标变量。", " POS, InOut, DINT, POS 参数中的操作数将根据转换后客户数据所占用的字节数，存储第一个字节的下标。"], "示例代码和代码解读": "无示例代码，但通常在需要将序列化数据结构转换回其原始形式时使用。", "其他有用信息": "在转换之前确保有充足的存储空间，且 SRC_ARRAY 的数据类型必须为 ARRAY of BYTE 或 ARRAY of CHAR。"}
{"指令名": "Serialize", "指令说明": "可以使用“序列化”指令将多个 PLC 数据类型 (UDT)、STRUCT 或 ARRAY of <数据类型> 转换为顺序表示，而不会丢失结构部分。该指令临时将用户程序的多个结构化数据项保存到缓冲区中（最好位于全局数据块中），并发送到其它 CPU。", "参数列表": [" SRC_VARIABLE，所有数据类型，待序列化的变量。", " DEST_ARRAY，ARRAY of BYTE 或 ARRAY of CHAR，用于存储所生成数据流的 ARRAY。", " POS，DINT，根据已转换客户数据所占用的总字节数，存储第一个字节的下标。"], "示例代码和代码解读": "无具体示例代码。", "其他有用信息": "源数据区内的填充数据在目标数组中未定义。标准存储区的容量为 64 KB，大于 64 KB 的结构不能进行序列化。"}
{"指令名": "MOVE_BLK", "指令说明": "可以使用“移动块”(Move block) 指令将一个存储区（源范围）的数据移动到另一个存储区（目标范围）中。使用参数 COUNT 可以指定将移动到目标范围中的元素个数。", "参数列表": [" IN，待复制源区域中的首个元素。", " COUNT，要从源范围复制到目标范围的元素个数。", " OUT，源范围内容要复制到的目标范围中的首个元素。"], "示例代码和代码解读": "SCL MOVE_BLK(IN := #a_array[2], COUNT := \"Tag_Count\", OUT => #b_array[1]);", "其他有用信息": "仅当源范围和目标范围的数据类型相同时，才能执行该指令。"}
{"指令名": "MOVE_BLK_VARIANT", "指令说明": "可以使用“块移动”指令将一个存储区（源范围）的数据移动到另一个存储区（目标范围）中。可以将一个完整的 ARRAY 或 ARRAY 的元素复制到另一个相同数据类型的 ARRAY 中。", "参数列表": [" SRC，待复制的源块。", " COUNT，已复制的元素数目。", " SRC_INDEX，定义要复制的第一个元素。", " DEST_INDEX，定义了目标存储区的起点。", " DEST，源块中内容将复制到的目标区域。"], "示例代码和代码解读": "SCL \"Tag_Result\" := MOVE_BLK_VARIANT(SRC := #SrcField, COUNT := \"Tag_Count\", SRC_INDEX := \"Tag_Src_Index\", DEST_INDEX := \"Tag_Dest_Index\", DEST => #DestField);", "其他有用信息": "无论后期如何声明该 ARRAY，参数 SRC_INDEX 和 DEST_INDEX 始终从下限“0”开始计数。"}
{"指令名": "UMOVE_BLK", "指令说明": "可以使用“不可中断的存储区移动”(Move block uninterruptible) 指令将一个存储区（源范围）的数据移动到另一个存储区（目标范围）中。该指令不可中断。", "参数列表": [" IN，待复制源区域中的首个元素。", " COUNT，要从源范围复制到目标范围的元素个数。", " OUT，源范围内容要复制到的目标范围中的首个元素。"], "示例代码和代码解读": "SCL UMOVE_BLK(IN := #a_array[2], COUNT := \"Tag_Count\", OUT => #b_array[1]);", "其他有用信息": "此移动操作不会被操作系统的其它任务打断。CPU 对此有特定限制，可以使用该指令移动最多 16 KB 大小的数据。"}
{"指令名": "FILL_BLK", "指令说明": "可以使用“填充存储区”指令，用 IN 输入的值填充一个存储区域（目标范围）。从输出 OUT 指定的地址开始填充目标范围。", "参数列表": [" IN，用于填充目标范围的元素。", " COUNT，移动操作的重复次数。", " OUT，目标范围中填充的起始地址。"], "示例代码和代码解读": "SCL FILL_BLK(IN := #FillValue, COUNT := \"Tag_Count\", OUT => #TargetArea[1]);", "其他有用信息": "仅当源范围和目标范围的数据类型相同时，才能执行该指令。如果复制的数据超过 OUT 输出中的元素，则将返回一个意外结果。"}
{"指令名": "UFILL_BLK", "指令说明": "可以使用“不可中断的存储区填充”(Fill block uninterruptible) 指令，用 IN 输入的值填充一个存储区域（目标范围）。该指令不可中断。", "参数列表": [" IN，用于填充目标范围的元素。", " COUNT，移动操作的重复次数。", " OUT，目标范围中填充的起始地址。"], "示例代码和代码解读": "SCL UFILL_BLK(IN := #FillValue, COUNT := \"Tag_Count\", OUT => #TargetArea[1]);", "其他有用信息": "此移动操作不会被操作系统的其它任务打断。可以使用该指令移动最多 16 KB 大小的数据。"}
{"指令名": "SCATTER", "指令说明": "指令“将位序列解析为单个位”用于将数据类型为 BYTE、WORD、DWORD 或 LWORD 的变量解析为单个位，并保存在 ARRAY of BOOL、匿名 STRUCT 或仅包含有布尔型元素的 PLC 数据类型中。", "参数列表": [" IN，所解析的位序列。", " OUT，保存 ARRAY、STRUCT 或 PLC 数据类型中的各个位。"], "示例代码和代码解读": "SCL SCATTER(IN := #SourceWord, OUT => #DestinationArray);", "其他有用信息": "多维 ARRAY of BOOL 不支持该指令。ARRAY、STRUCT 或 PLC 数据类型中包含的元素数目必须恰好等于位序列指定的数量。"}
{"指令名": "SCATTER_BLK", "指令说明": "“将位序列 ARRAY 的元素解析为单个位”指令用于将 BYTE、WORD、DWORD 或 LWORD 数据类型的 ARRAY 分解为单个位，并保存在元素类型仅为布尔型的 ARRAY of BOOL、匿名 STRUCT 或 PLC 数据类型中。", "参数列表": [" IN，所解析的 ARRAY of <位序列>。", " COUNT_IN，对待解析源 ARRAY 中的元素数量进行计数。", " OUT，保存 ARRAY、STRUCT 或 PLC 数据类型中的各个位。"], "示例代码和代码解读": "SCL SCATTER_BLK(IN := #SourceArrayWord[2], COUNT_IN := #CounterInput, OUT => #DestinationArrayBool[0]);", "其他有用信息": "如果目标 ARRAY 的 ARRAY 下限不是“0”，索引必须始终以 BYTE、WORD、DWORD 或 LWORD 限制开始。"}
{"指令名": "GATHER", "指令说明": "指令“将各个位组合为位序列”用于将仅包含布尔型元素的 ARRAY of BOOL、匿名 STRUCT 或 PLC 数据类型中的各个位组合为一个位序列。", "参数列表": [" IN，ARRAY、STRUCT 或 PLC 数据类型，这些数据类型中的各个位将组合为一个位序列。", " OUT，组合后的位序列，保存在一个变量中。"], "示例代码和代码解读": "SCL GATHER(IN := #SourceArray, OUT => #DestinationWord);", "其他有用信息": "多维 ARRAY of BOOL 不支持该指令。ARRAY、STRUCT 或 PLC 数据类型中包含的元素数目必须恰好等于位序列指定的数量。"}
{"指令名": "GATHER_BLK", "指令说明": "指令“将各个位组合为 ARRAY of <位序列> 的多个元素”用于将仅包含布尔型元素的 ARRAY of BOOL、匿名 STRUCT 或 PLC 数据类型中的各个位组合为 ARRAY of <位序列> 中的一个或多个元素。", "参数列表": [" IN，ARRAY of BOOL、STRUCT 或 PLC 数据类型，其中各个位待组合（源 ARRAY）。", " COUNT_OUT，计数目标 ARRAY 的元素数量。", " OUT，保存各个位的 ARRAY of <位序列>（目标 ARRAY）。"], "示例代码和代码解读": "SCL GATHER_BLK(IN := #SourceArrayBool[0], COUNT_OUT := #CounterOutput, OUT => #DestinationArrayWord[2]);", "其他有用信息": "如果源 ARRAY 的 ARRAY 下限不是“0”，索引必须始终以 BYTE、WORD、DWORD 或 LWORD 限制开始。"}
{"指令名": "AssignmentAttempt", "指令说明": "使用“AssignmentAttempt”指令，可对引用变量进行赋值。支持以下赋值操作", "参数列表": [" SRC，VARIANT、DB_ANY 或 NULL，指向其地址待读取或为 NULL 的源变量的指针。", " DST，如果 SRC = VARIANT，则引用：位序列（BOOL 除外）、整数、浮点数、字符串、PLC 数据类型 (UDT)、系统数据类型 (SDT)、ARRAY of <已命名的数据类型>；如果 SRC = DB_ANY，则引用：工艺对象。"], "示例代码和代码解读": "块接口按如下方式设计", "其他有用信息": "在 SCL 中，还可以在赋值尝试时分配 NULL，专门设置对 NULL 的引用。"}
{"指令名": "SWAP", "指令说明": "使用“交换”指令，可以更改输入值中字节的排列顺序，并将结果保存在指定的操作数中。", "参数列表": [" <表达式>，输入值。"], "示例代码和代码解读": "SCL \"Tag_Result\" := SWAP(\"Tag_Value\");", "其他有用信息": "无具体其他信息。"}
{"指令名": "ReadFromArrayDB", "指令说明": "可以使用“从 ARRAY 数据块中读取”(Read from ARRAY data block) 指令从索引引用的 ARRAY DB 块类型的数据块中读取元素。", "参数列表": [" DB，待读取的数据块。", " INDEX，DB 中被读取的元素。", " VALUE，待读取并输出的值。"], "示例代码和代码解读": "SCL \"TagResult\" := ReadFromArrayDB(DB := \"ArrayDB\", INDEX := 2, VALUE => \"TargetField\");", "其他有用信息": "ARRAY 数据块是仅包含一个 ARRAY of <数据类型> 的数据块。ARRAY 的元素可以是 PLC 数据类型或其它任何基本数据类型。"}
{"指令名": "WriteToArrayDB", "指令说明": "可以使用“写入 ARRAY 数据块”(Write to ARRAY data block) 指令将索引引用的元素写入 ARRAY DB 块类型的数据块中。", "参数列表": [" DB，待写入数据的数据块。", " INDEX，待写入数据的 DB 中的元素。", " VALUE，待写入的值。"], "示例代码和代码解读": "SCL \"TagResult\" := WriteToArrayDB(DB := \"ArrayDB\", INDEX := 2, VALUE := \"SourceField\");", "其他有用信息": "ARRAY 数据块是仅包含一个 ARRAY of <数据类型> 的数据块。ARRAY 的元素可以是 PLC 数据类型或其它任何基本数据类型。"}
{"指令名": "ReadFromArrayDBL", "指令说明": "可以使用“从装载存储器的 ARRAY 数据块中读取”(Read from ARRAY data block in load memory) 指令从装载存储器 ARRAY DB 块类型的数据块中读取索引应用的元素。", "参数列表": [" REQ，开始读取 ARRAY 数据块。", " DB，待读取的 ARRAY 数据块。", " INDEX，DB 中被读取的元素。", " VALUE，指向待读取工作存储器中的 DB 并写入该工作存储器的值。", " BUSY，仍在读取数组数据块。", " DONE，该指令执行成功。", " ERROR，如果在该指令执行期间出错，则在参数 ERROR 中输出一个错误代码。"], "示例代码和代码解读": "SCL \"ReadFromArrayDBL_DB\"(REQ := \"TagReg\", DB := \"ArrayDB\", INDEX := 2, VALUE := \"TargetField\", BUSY => \"TagBusy\", DONE => \"TagDone\", ERROR => \"TagError\");", "其他有用信息": "如果 ARRAY 数据块使用块属性“仅存储在装载存储器”进行指定，则该数组数据块将仅存储在装载存储器中。"}
{"指令名": "WriteToArrayDBL", "指令说明": "可以使用“写入装载存储器的 ARRAY 数据块”(Write to ARRAY data block in load memory) 指令将索引引用的元素写入装载存储器 ARRAY DB 块类型的数据块中。", "参数列表": [" REQ，开始写入数组数据块。", " DB，待写入数据的 ARRAY 数据块。", " INDEX，待写入数据的 DB 中的元素。", " VALUE，指向待读取工作存储器中的 DB 并写入该工作存储器的值。", " BUSY，仍在写入到数组数据块。", " DONE，该指令执行成功。", " ERROR，如果在该指令执行期间出错，则在参数 ERROR 中输出一个错误代码。"], "示例代码和代码解读": "SCL \"WriteToArrayDBL_DB\"(REQ := \"TagReg\", DB := \"ArrayDB\", INDEX := 2, VALUE := \"SourceField\", BUSY => \"TagBusy\", DONE => \"TagDone\", ERROR => \"TagError\");", "其他有用信息": "如果 ARRAY 数据块使用块属性“仅存储在装载存储器”进行指定，则该数组数据块将仅存储在装载存储器中。"}
{"指令名": "PEEK", "指令说明": "使用“读取存储地址”指令，在不指定数据类型的情况下从存储区读取存储地址。", "参数列表": [" AREA，可以选择以下区域：16#81：Input、16#82：Output、16#83：位存储区、16#84：DB。", " DBNUMBER，如果 AREA = DB，则为数据块数量，否则为“0”。", " BYTEOFFSET，待读取的地址，仅使用 16 个最低有效位。"], "示例代码和代码解读": "SCL \"Tag_Result1\" := PEEK(AREA := \"Tag_Area\", DBNUMBER := \"Tag_DBNumber\", BYTEOFFSET := \"Tag_Byte\");", "其他有用信息": "如果要读取输入、输出或位存储区中的存储地址，则必须将参数 DBNUMBER 的值设置为“0”，否则指令将无效。"}
{"指令名": "PEEK_BOOL", "指令说明": "使用“读取存储位”指令，在不指定数据类型的情况下从标准存储区读取存储位。", "参数列表": [" AREA，可以选择以下区域：16#81：输入、16#82：输出、16#83：位存储区、16#84：DB。", " DBNUMBER，如果 AREA = DB，则为数据块数量，否则为“0”。", " BYTEOFFSET，待读取的地址，仅使用 16 个最低有效位。", " BITOFFSET，待读取的位。"], "示例代码和代码解读": "SCL \"Tag_Result\" := PEEK_BOOL(AREA := \"Tag_Area\", DBNUMBER := \"Tag_DBNumber\", BYTEOFFSET := \"Tag_Byte\", BITOFFSET := \"Tag_Bit\");", "其他有用信息": "如果要读取输入、输出或位存储区中的存储位，则必须将参数 DBNUMBER 的值设置为“0”，否则指令将无效。"}
{"指令名": "POKE", "指令说明": "使用“写入存储地址”指令，在不指定数据类型的情况下将存储地址写入标准存储区。", "参数列表": [" AREA，可以选择以下区域：16#81：Input、16#82：Output、16#83：位存储区、16#84：DB。", " DBNUMBER，如果 AREA = DB，则为数据块数量，否则为“0”。", " BYTEOFFSET，待写入的地址，仅使用 16 个最低有效位。", " VALUE，待写入的值。"], "示例代码和代码解读": "SCL POKE(AREA := \"Tag_Area\", DBNUMBER := \"Tag_DBNumber\", BYTEOFFSET := \"Tag_Byte\", VALUE := \"Tag_Value\");", "其他有用信息": "如果要将存储地址写入输入、输出或位存储区，则必须将参数 DBNUMBER 的值设置为“0”，否则指令将无效。"}
{"指令名": "POKE_BOOL", "指令说明": "使用“写入存储位”指令，在不指定数据类型的情况下将存储位写入标准存储区。", "参数列表": [" AREA，可以选择以下区域：16#81：输入、16#82：输出、16#83：位存储区、16#84：DB。", " DBNUMBER，如果 AREA = DB，则为数据块数量，否则为“0”。", " BYTEOFFSET，待写入的地址，仅使用 16 个最低有效位。", " BITOFFSET，待写入的位。", " VALUE，待写入的值。"], "示例代码和代码解读": "SCL POKE_BOOL(AREA := \"Tag_Area\", DBNUMBER := \"Tag_DBNumber\", BYTEOFFSET := \"Tag_Byte\", BITOFFSET := \"Tag_Bit\", VALUE := \"Tag_Value\");", "其他有用信息": "如果要将存储位写入输入、输出或位存储区，则必须将参数 DBNUMBER 的值设置为“0”，否则指令将无效。"}
{"指令名": "POKE_BLK", "指令说明": "使用“写入存储区”指令，在不指定数据类型的情况下将存储区写入不同的标准存储区中。", "参数列表": [" AREA_SRC，源存储区中可以选择以下区域：16#81：Input、16#82：Output、16#83：位存储区、16#84：DB。", " DBNUMBER_SRC，如果 AREA = DB，则为源存储区中的数据块数量，否则为“0”。", " BYTEOFFSET_SRC，源存储区中待写入的地址。", " AREA_DEST，目的存储区中可以选择以下区域：16#81：Input、16#82：Output、16#83：位存储区、16#84：DB。", " DBNUMBER_DEST，如果 AREA = DB，则为目的存储区中的数据块数量，否则为“0”。", " BYTEOFFSET_DEST，目的存储区中待写入的地址。", " COUNT，已复制的字节数目。"], "示例代码和代码解读": "SCL POKE_BLK(AREA_SRC := \"Tag_Source_Area\", DBNUMBER_SRC := \"Tag_Source_DBNumber\", BYTEOFFSET_SRC := \"Tag_Source_Byte\", AREA_DEST := \"Tag_Destination_Area\", DBNUMBER_DEST := \"Tag_Destination_DBNumber\", BYTEOFFSET_DEST := \"Tag_Destination_Byte\", COUNT := \"Tag_Count\");", "其他有用信息": "如果要将存储地址写入输入、输出或位存储区，则必须将参数 DBNUMBER 的值设置为“0”，否则指令将无效。"}
{"指令名": "READ_LITTLE", "指令说明": "可以使用“以小端格式读取数据”指令以小端字节序列从存储区读取数据并将此数据写入单个变量。", "参数列表": [" SRC_ARRAY，待读取的存储区。", " DEST_VARIABLE，读取值。", " POS，确定读取数据的起始位置。POS 参数将从 0 开始计算。"], "示例代码和代码解读": "SCL #TagResult := READ_LITTLE(SRC_ARRAY := #SourceField, DEST_VARIABLE => #DINTVariable, POS := #TagPos);", "其他有用信息": "SRC_ARRAY 参数的 VARIANT 必须为 ARRAY of BYTE。DEST_VARIABLE 的 VARIANT 必须为基本数据类型。"}
{"指令名": "WRITE_LITTLE", "指令说明": "可以使用“以小端格式写入数据”指令以小端字节序列将单个变量的数据写入存储区。", "参数列表": [" SRC_VARIABLE，写入其数据的变量。", " DEST_ARRAY，待写入数据的存储区。", " POS，确定写入数据的起始位置。POS 参数将从 0 开始计算。"], "示例代码和代码解读": "SCL #TagResult := WRITE_LITTLE(SRC_VARIABLE := #DINTVariable, DEST_ARRAY := #TargetField, POS := #TagPos);", "其他有用信息": "SRC_VARIABLE 的 VARIANT 必须指向基本数据类型。DEST_ARRAY 的 VARIANT 必须为 ARRAY of BYTE。"}
{"指令名": "READ_BIG", "指令说明": "可以使用“以大端格式读取数据”指令以大端字节序列从存储区读取数据并将此数据写入单个变量。", "参数列表": [" SRC_ARRAY，待读取的存储区。", " DEST_VARIABLE，读取值。", " POS，确定读取数据的起始位置。POS 参数将从 0 开始计算。"], "示例代码和代码解读": "SCL #TagResult := READ_BIG(SRC_ARRAY := #SourceField, DEST_VARIABLE => #DINTVariable, POS := #TagPos);", "其他有用信息": "SRC_ARRAY 参数的 VARIANT 必须为 ARRAY of BYTE。DEST_VARIABLE 的 VARIANT 必须为基本数据类型。"}
{"指令名": "WRITE_BIG", "指令说明": "可以使用“以大端格式写入数据”指令以大端字节序列将单个变量的数据写入存储区。", "参数列表": [" SRC_VARIABLE，写入其数据的变量。", " DEST_ARRAY，待写入数据的存储区。", " POS，确定写入数据的起始位置。POS 参数将从 0 开始计算。"], "示例代码和代码解读": "SCL #TagResult := WRITE_BIG(SRC_VARIABLE := #DINTVariable, DEST_ARRAY := #TargetField, POS := #TagPos);", "其他有用信息": "SRC_VARIABLE 的 VARIANT 必须指向基本数据类型。DEST_ARRAY 的 VARIANT 必须为 ARRAY of BYTE。"}
{"指令名": "VariantGet", "指令说明": "可以使用“读出 VARIANT 变量值”指令读取 SRC 参数的 VARIANT 指向的变量值，并将其写入 DST 参数的变量。", "参数列表": [" SRC，待读取的变量。", " DST，指令的结果。"], "示例代码和代码解读": "SCL VariantGet(SRC := #TagIn_Source, DST => \"TagOut_Dest\");", "其他有用信息": "DST 参数变量的数据类型必须与 VARIANT 指向的数据类型相匹配。"}
{"指令名": "VariantPut", "指令说明": "可以使用“写入 VARIANT 变量值”指令将 SRC 参数的变量值写入 VARIANT 所指向的 DST 参数存储区中。", "参数列表": [" SRC，待读取的变量。", " DST，指令的结果。"], "示例代码和代码解读": "SCL VariantPut(SRC := \"TagIn_Source\", DST := #TagIn_Dest);", "其他有用信息": "SRC 参数变量的数据类型必须与 VARIANT 指向的数据类型相匹配。"}
{"指令名": "CountOfElements", "指令说明": "可以使用“获取 ARRAY 元素的数量”指令，查询 VARIANT 指针所包含的 ARRAY 元素数量。", "参数列表": [" <操作数>，要查询的变量。"], "示例代码和代码解读": "SCL IF IS_ARRAY(#Tag_VARIANTToArray) THEN \"Tag_Result\" := CountOfElements(#Tag_VARIANTToArray); END_IF;", "其他有用信息": "VARIANT 指针可以不指向实例，因此也可不指向多重实例或多重实例的 ARRAY。如果 VARIANT 变量不是 ARRAY，也将返回结果“0”。"}
{"指令名": "MoveResolvedSymbolsToBuffer", "指令说明": "“从已解析的符号中读取值并写入缓冲区中”指令用于从多个已解析的符号中读取数值并写入存储区 (Array of BYTE) 中。", "参数列表": [" firstIndex，待复制的第一个已解析符号的下标。", " lastIndex，待复制的最后一个已解析符号的下标。", " src，已解析的符号列表。", " dstOffsets，包含目标缓冲区中各元素的位偏移量。", " mode，存储器格式。", " dst，要将已解析符号复制到的目标缓冲区。", " status，已解析符号的复制状态。"], "示例代码和代码解读": "MoveResolvedSymbolsToBuffer(firstIndex := 2, lastIndex := 7, src := \"MySrcDB\".Input_ResolvedSymbols,dstOffsets := #Input_Offset,mode := 2#0dst := \"MyTargetDB\".InOut_Buffer,status := #InOut_Status);", "其他有用信息": "\"mode\" 参数的值用于定义 \"dst\" 参数中的存储器格式。\"status\" 参数是一个 INT 数组，用于存储复制状态。"}
{"指令名": "MoveToResolvedSymbol", "指令说明": "使用“将值写入已解析的符号中”指令读取变量值，并将其写入由已解析符号引用的目标变量中。", "参数列表": [" SRC，源变量。", " DST，已解析符号引用的目标变量。"], "示例代码和代码解读": "SCL MoveToResolvedSymbol(SRC := \"MySrcDB\".Input_Variant, DST => \"MyTargetDB\".Output_ResolvedSymbol);", "其他有用信息": "之前必须已使用 \"ResolveSymbols\" 指令对变量进行解析。源变量和目标变量的数据类型必须相同。"}
{"指令名": "MoveFromResolvedSymbol", "指令说明": "使用“从已解析的符号中读取值”指令读取已解析符号引用的变量值，并将其写入目标变量中。", "参数列表": [" SRC，已解析符号引用的源变量。", " DST，目标变量。"], "示例代码和代码解读": "SCL MoveFromResolvedSymbol(SRC := \"MySrcDB\".Input_ResolvedSymbol, DST => \"MyTargetDB\".Output_Variant);", "其他有用信息": "之前必须已使用 \"ResolveSymbols\" 指令对变量进行解析。源变量和目标变量的数据类型必须相同。"}
{"指令名": "ResolveSymbols", "指令说明": "“解析多个符号”指令用于解析多个符号变量名称。执行该指令后，会收到对变量的引用。", "参数列表": [" execute，出现信号上升沿时，会开始执行指令。", " firstIndex，待解析的第一个变量名称的下标。", " lastIndex，待解析的最后一个变量名称的下标。", " done，该指令执行完成。", " busy，该指令当前正在执行。", " error，执行过程中出错。", " status，块状态 / 错误代码。", " nameList，待解析的变量名称列表。", " referenceList，引用列表。"], "示例代码和代码解读": "SCL \"ResolveSymbols_DB\"(execute := #Input_Execute, firstIndex := 0, lastIndex := 9, done => #Output_Done, busy => #Output_Busy, error => _bool_out_, status => _int_out_, nameList := \"MySrcDB\".InOut_Symbols, referenceList := \"MyTargetDB\".InOut_ResolvedSymbols);", "其他有用信息": "符号变量名称以 WSTRING 格式传输，且长度不得超过 254 个 UTF-16 字符。支持数组中的元素，但必须指定固定下标才能访问元素。"}
{"指令名": "MoveResolvedSymbolsFromBuffer", "指令说明": "该指令用于从存储区(Array of BYTE)中读取数值，并写入多个已解析的符号值中。这种方式可以处理从通信指令（如TRCV）接收到的存储区。", "参数列表": [" firstIndex, Input, DINT, 目标缓冲区中待写入的第一个已解析符号的下标。", " lastIndex, Input, DINT, 目标缓冲区中待写入的最后一个已解析符号的下标。", " mode, Input, DWORD, 存储器格式，BigEndian 或 LittleEndian。", " src, Input, Array of BYTE, 读取数值的源缓冲区。", " srcOffsets, Input, Array of DINT, 源缓冲区中数值的偏移量。", " dst, InOut, Array of ResolvedSymbol, 包含对已解析符号的引用的目标缓冲区。", " status, InOut, Array of INT, 包含各个待写入值的复制状态。"], "示例代码和代码解读": "无具体示例代码，但说明了使用firstIndex和lastIndex参数限制已解析符号列表中需写入值的变量，mode参数定义存储器格式，srcOffsets参数指定偏移量，dst参数为已解析符号的引用，status参数包含复制状态。", "其他有用信息": "确保srcOffsets和dst处的数组限值相同，以包含dst[i]的偏移量。该指令不会验证所指定的偏移量是否重叠，可能随机读取值。"}
{"指令名": "LOWER_BOUND", "指令说明": "该指令用于读取ARRAY变量的下限。", "参数列表": [" ARR, Input, ARRAY[*], 待读取可变下限的ARRAY。", " DIM, Input, UDINT, 待读取可变下限的ARRAY维度。"], "示例代码和代码解读": "无具体示例代码，但说明了如何使用该指令。", "其他有用信息": "该指令可用于固件版本为V4.2及以上版本的S7-1200系列CPU和固件版本为V2.0及以上版本的S7-1500系列CPU。"}
{"指令名": "UPPER_BOUND", "指令说明": "该指令用于读取ARRAY变量的上限。", "参数列表": [" ARR, Input, ARRAY[*], 待读取可变上限的ARRAY。", " DIM, Input, UDINT, 待读取可变上限的ARRAY维度。"], "示例代码和代码解读": "无具体示例代码，但说明了如何使用该指令。", "其他有用信息": "同LOWER_BOUND指令的可用性。"}
{"指令名": "BLKMOV", "指令说明": "该指令用于将一个存储区的数据移动到另一个存储区，移动操作沿地址升序方向执行。", "参数列表": [" SRCBLK, Input, VARIANT, 指定待移动的存储区（源区域）。", " DSTBLK, Output, VARIANT, 指定要将块移动到的存储区（目标区域）。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用BLKMOV指令复制数据并处理可能的错误。", "其他有用信息": "该指令的变量仅适用于未激活“优化块访问”属性的存储区中。源区域和目标区域不得重叠，且有特定的移动规则。"}
{"指令名": "UBLKMOV", "指令说明": "该指令用于执行不可中断的存储区数据移动，移动操作沿地址升序方向执行。", "参数列表": [" SRCBLK, Input, VARIANT, 指定待移动的存储区（源区域）。", " DSTBLK, Output, VARIANT, 指定要将块移动到的存储区（目标区域）。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用UBLKMOV指令复制数据并处理可能的错误。", "其他有用信息": "与BLKMOV类似，但该移动操作不会被操作系统的其他任务打断，CPU中断响应时间将增加。"}
{"指令名": "FILL", "指令说明": "该指令使用源区域的数据填充目标区域，直到目标区域写满为止。", "参数列表": [" BVAL, Input, VARIANT, 指定存储区域（源区域），将使用该存储区域中的内容填充BLK参数中指定的目标区域。", " BLK, Output, VARIANT, 指定要使用源区域的数据填充的存储区。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用FILL指令填充数据。", "其他有用信息": "源区域和目标区域不得重叠，且有特定的移动规则。"}
{"指令名": "CONVERT", "指令说明": "该指令用于显式转换值，将源值转换为指定的目标数据类型。", "参数列表": [" 源类型, Input, 二进制数、整数、浮点数等, 要转换的值。", " 目标类型, Output, 二进制数、整数、浮点数等, 转换结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用CONVERT指令进行数据类型转换。", "其他有用信息": "在指令功能框中，可以指定转换的源数据类型和目标数据类型。"}
{"指令名": "ROUND", "指令说明": "该指令用于将输入值取整为最接近的整数。", "参数列表": [" 表达式, Input, 浮点数, 要取整的输入值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用ROUND指令进行取整操作。", "其他有用信息": "如果输入值恰好是在一个偶数和一个奇数之间，则选择偶数。"}
{"指令名": "CEIL", "指令说明": "该指令用于将浮点数向上取整为最接近的整数。", "参数列表": [" 表达式, Input, 浮点数, 输入值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用CEIL指令进行向上取整操作。", "其他有用信息": "函数值可以大于或等于输入值。"}
{"指令名": "FLOOR", "指令说明": "该指令用于将浮点数向下取整为最接近的较小整数。", "参数列表": [" 表达式, Input, 浮点数, 输入值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用FLOOR指令进行向下取整操作。", "其他有用信息": "函数值可等于或小于输入值。"}
{"指令名": "TRUNC", "指令说明": "该指令用于截尾取整，直接从输入值中截取整数部分。", "参数列表": [" 表达式, Input, 浮点数, 输入值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用TRUNC指令进行截尾取整操作。", "其他有用信息": "该指令仅选择输入值的整数部分，不含小数位。"}
{"指令名": "SCALE_X", "指令说明": "该指令用于将浮点数映射到指定的取值范围进行缩放。", "参数列表": [" EN, Input, BOOL, 使能输入。", " ENO, Output, BOOL, 使能输出。", " MIN, Input, 整数或浮点数, 取值范围的下限。", " VALUE, Input, 浮点数, 要缩放的值。", " MAX, Input, 整数或浮点数, 取值范围的上限。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SCALE_X指令进行值的缩放。", "其他有用信息": "使用公式OUT = [VALUE ∗ (MAX – MIN)] + MIN进行计算，如果使能输入EN的信号状态为“0”或MIN的值大于或等于MAX，则使能输出ENO返回信号状态“0”。"}
{"指令名": "NORM_X", "指令说明": "该指令用于通过将输入值映射到线性标尺进行标准化。", "参数列表": [" EN, Input, BOOL, 使能输入。", " ENO, Output, BOOL, 使能输出。", " MIN, Input, 整数或浮点数, 取值范围的下限。", " VALUE, Input, 整数或浮点数, 要标准化的值。", " MAX, Input, 整数或浮点数, 取值范围的上限。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SCALE_X指令进行值的缩放。", "其他有用信息": "使用公式OUT = (VALUE – MIN) / (MAX – MIN)进行计算，如果使能输入EN的信号状态为“0”或MIN的值大于或等于MAX，则使能输出ENO返回信号状态“0”。"}
{"指令名": "REF", "指令说明": "使用REF()关键字可以指定先前所声明引用将指向的变量。", "参数列表": [" 表达式, Input, 位序列、整数、浮点数等, 引用将指向的变量。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何在块接口中声明引用并在程序代码中为这些引用分配相应的变量。", "其他有用信息": "在使用REF()之前，需要在块接口中先声明一个引用，并且指定的变量数据类型必须与所声明引用的数据类型完全匹配。"}
{"指令名": "VARIANT_TO_DB_ANY", "指令说明": "该指令用于将VARIANT转换为DB_ANY，查询IN参数地址指定的操作数的数据块编号。", "参数列表": [" IN, Input, VARIANT, 待读取的变量。", " ERR, Output, INT, 错误信息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用VARIANT_TO_DB_ANY指令查询数据块编号并处理可能的错误。", "其他有用信息": "如果满足条件，则执行该指令，如果不满足条件，则输出“0”作为数据块编号。"}
{"指令名": "DB_ANY_TO_VARIANT", "指令说明": "该指令用于从数据块生成VARIANT变量。", "参数列表": [" IN, Input, DB_ANY, 要读取其编号的数据块。", " ERR, Output, INT, 错误信息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用DB_ANY_TO_VARIANT指令生成VARIANT变量并处理可能的错误。", "其他有用信息": "如果满足条件，则执行该指令，如果不满足条件或数据块不存在，则在RET_VAL参数中输出值NULL。"}
{"指令名": "SCALE", "指令说明": "该指令用于将整数转换为在物理单位内缩放的浮点数。", "参数列表": [" IN, Input, INT, 待缩放的输入值。", " HI_LIM, Input, REAL, 上限。", " LO_LIM, Input, REAL, 下限。", " BIPOLAR, Input, BOOL, 指示将参数IN的值解释为双极性还是单极性。", " OUT, Output, REAL, 指令的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SCALE指令进行缩放操作并处理可能的错误。", "其他有用信息": "常数K1和K2的值取决于参数BIPOLAR的信号状态，如果IN的值超出K2或小于K1，则输出错误。"}
{"指令名": "UNSCALE", "指令说明": "该指令用于取消缩放，将浮点数转换为整数。", "参数列表": [" IN, Input, REAL, 待取消缩放并转换为整数的输入值。", " HI_LIM, Input, REAL, 上限。", " LO_LIM, Input, REAL, 下限。", " BIPOLAR, Input, BOOL, 指示将参数IN的值解释为双极性还是单极性。", " OUT, Output, INT, 指令的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用UNSCALE指令进行取消缩放操作并处理可能的错误。", "其他有用信息": "常数K1和K2的值取决于参数BIPOLAR的信号状态，如果IN的值超出HI_LIM或小于LO_LIM，则输出错误并将结果设置为最接近的限值。"}
{"指令名": "IF", "指令说明": "该指令用于根据条件控制程序流的分支。", "参数列表": [" 条件, BOOL, 待求值的表达式。", " 指令, 在满足条件时，要执行的指令。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用IF指令进行条件判断和执行相应的指令。", "其他有用信息": "IF指令可以有多种形式，包括IF THEN ELSE END_IF结构，可以嵌套任意多个ELSIF和THEN组合。"}
{"指令名": "CASE", "指令说明": "该指令用于创建多路分支，根据表达式的值执行多个指令序列中的一个。", "参数列表": [" Tag, 位字符串或整数, 与设定的常数值进行比较的值。", " 常数, 局部常量和全局常量可进行编程，可以是二进制数、八进制数、十六进制数、未定型的常数或整数等。", " 指令, 当表达式的值等于某个常数值时，将执行的指令。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用CASE指令进行多路分支选择。", "其他有用信息": "CASE指令可以通过使用CASE替换一个指令块进行嵌套，ELSE是一个可选的语法部分。"}
{"指令名": "FOR", "指令说明": "该指令用于在计数循环中重复执行程序循环。", "参数列表": [" 执行变量, 运行次数, 循环中使用的变量，如SINT、INT、DINT等。", " 起始值, 循环开始时执行变量的值。", " 结束值, 循环结束时执行变量的值。", " 增量, 每次循环后执行变量的增量或减量。", " 指令, 循环中执行的指令。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用FOR指令进行循环操作。", "其他有用信息": "FOR循环可以嵌套，且在编写时应避免死循环，注意运行变量的数据类型和取值范围。"}
{"指令名": "WHILE", "指令说明": "该指令用于在满足条件时重复执行程序循环。", "参数列表": [" 条件, BOOL, 每次执行循环之前都需要进行求值的表达式。", " 指令, 在满足条件时，要执行的指令。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用WHILE指令进行循环操作。", "其他有用信息": "WHILE循环可以嵌套，且可以通过CONTINUE和EXIT指令控制循环的执行。"}
{"指令名": "REPEAT", "指令说明": "该指令用于在不满足条件时重复执行程序循环。", "参数列表": [" 指令, 在设定条件的值为FALSE时执行的指令。", " 条件, BOOL, 每次执行循环之后都需要进行求值的表达式。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用REPEAT指令进行循环操作。", "其他有用信息": "即使满足终止条件，REPEAT指令也只执行一次，可以通过CONTINUE和EXIT指令控制循环的执行。"}
{"指令名": "CONTINUE", "指令说明": "该指令用于结束FOR、WHILE或REPEAT循环的当前程序运行，并再次计算继续执行程序循环的条件。", "参数列表": [" 指令, 在设定条件的值为FALSE时执行的指令。", " 条件, BOOL, 每次执行循环之后都需要进行求值的表达式。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用CONTINUE指令在满足特定条件时跳过当前循环的剩余部分。", "其他有用信息": "CONTINUE指令将影响其所在的程序循环。"}
{"指令名": "EXIT", "指令说明": "该指令用于随时取消FOR、WHILE或REPEAT循环的执行，而无需考虑是否满足条件。", "参数列表": [" 指令, 在设定条件的值为FALSE时执行的指令。", " 条件, BOOL, 每次执行循环之后都需要进行求值的表达式。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用EXIT指令在满足特定条件时退出循环。", "其他有用信息": "EXIT指令将影响其所在的程序循环。"}
{"指令名": "GOTO", "指令说明": "该指令用于从标注为跳转标签的指定点开始继续执行程序。", "参数列表": [" 跳转标签, 跳转到该标签处。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用GOTO指令进行程序跳转。", "其他有用信息": "跳转标签和GOTO指令必须在同一个块中，且跳转标签的名称只能指定一次。"}
{"指令名": "RETURN", "指令说明": "该指令用于终止当前处理块中的程序执行，并在调用块中继续执行。", "参数列表": [" 跳转标签, 跳转到该标签处。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用RETURN指令在满足特定条件时退出当前块。", "其他有用信息": "如果RETURN指令出现在块结尾处，则可以跳过。"}
{"指令名": "ENDIS_PW", "指令说明": "该指令用于锁定和解锁CPU各访问级别的密码。", "参数列表": [" REQ, Input, BOOL, 决定CPU中各访问级别的当前密码状态。-- F_PWD, Input, BOOL, 锁定或解锁访问级别“完全访问权限，包括故障安全（无保护）”的密码。", " FULL_PWD, Input, BOOL, 锁定或解锁访问级别“完全访问权限（无保护）”的密码。", " R_PWD, Input, BOOL, 锁定或解锁访问级别“只读访问权限”的密码。", " HMI_PWD, Input, BOOL, 锁定或解锁访问级别“HMI访问权限”的密码。", " F_PWD_ON, Output, BOOL, 访问级别“完全访问权限，包括故障安全（无保护）”的当前密码状态。", " FULL_PWD_ON, Output, BOOL, 访问级别“完全访问权限（无保护）”的当前密码状态。", " R_PWD_ON, Output, BOOL, 访问级别“只读访问权限”的当前密码状态。", " HMI_PWD_ON, Output, BOOL, 访问级别“HMI访问权限”的当前密码状态。", " RET_VAL, Output, WORD, 错误信息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用ENDIS_PW指令锁定和解锁密码。", "其他有用信息": "通过锁定密码，可以终止现有的合法化连接，锁定后，可以将故障安全CPU的访问权限授予少数几个用户。"}
{"指令名": "SHUT_DOWN", "指令说明": "该指令用于关闭目标系统，包括CPU和Windows。", "参数列表": [" MODE, Input, UINT, 指定关闭或重新启动的模式。", " COMMENT, Input, STRING, 指定重新启动的原因。", " Ret_Val, Return, WORD, 返回值，表示操作结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHUT_DOWN指令关闭或重新启动系统。", "其他有用信息": "根据MODE参数的不同值，执行不同的关闭或重新启动操作。"}
{"指令名": "RE_TRIGR", "指令说明": "该指令用于重置周期监视时间。", "参数列表": [" MODE, Input, UINT, 指定关闭或重新启动的模式。", " COMMENT, Input, STRING, 指定重新启动的原因。", " Ret_Val, Return, WORD, 返回值，表示操作结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHUT_DOWN指令关闭或重新启动系统。", "其他有用信息": "该指令不带任何参数且不提供错误信息，用于重新触发CPU的循环时间监控。"}
{"指令名": "STP", "指令说明": "该指令用于退出程序，将CPU设置为STOP模式。", "参数列表": [" MODE, Input, UINT, 指定关闭或重新启动的模式。", " COMMENT, Input, STRING, 指定重新启动的原因。", " Ret_Val, Return, WORD, 返回值，表示操作结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHUT_DOWN指令关闭或重新启动系统。", "其他有用信息": "该指令将终止程序执行，是否从RUN模式切换到STOP模式取决于CPU的配置。"}
{"指令名": "GET_ERROR", "指令说明": "该指令用于获取本地错误信息。", "参数列表": [" 操作数, ErrorStruct, 有关已发生错误的信息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用GET_ERROR指令获取错误信息并进行处理。", "其他有用信息": "错误信息只能保存在ErrorStruct系统数据类型的操作数中，可以多次插入该数据类型，但名称不能更改。"}
{"指令名": "GET_ERR_ID", "指令说明": "该指令用于获取本地错误ID。", "参数列表": [" 函数值, WORD, 错误ID。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用GET_ERR_ID指令获取错误ID并进行处理。", "其他有用信息": "错误ID只能保存在WORD数据类型的操作数中。"}
{"指令名": "INIT_RD", "指令说明": "该指令用于初始化所有保留数据。", "参数列表": [" 操作数, Input, BOOL, 如果输入“REQ”的信号状态为“1”，将复位所有保持性数据。", " RET_VAL, Output, INT, 错误信息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用INIT_RD指令复位所有保持性数据。", "其他有用信息": "该指令的执行时间超出程序周期的持续时间，因此只能在启动OB中执行。"}
{"指令名": "WAIT", "指令说明": "该指令用于组态延时时间，暂停程序执行。", "参数列表": [" WT, Input, INT, 延时时间的单位为微秒。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用INIT_RD指令复位所有保持性数据。", "其他有用信息": "可以组态的延时为-32768到32767微秒，最短延时时间取决于CPU和该指令的执行时间。"}
{"指令名": "RUNTIME", "指令说明": "该指令用于测量程序运行时间。", "参数列表": [" 操作数, InOut, LREAL, 指令运行结果仅适用于内部应用。", " 函数值, LREAL, 返回测得的运行时间（单位为秒）。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用RUNTIME指令测量程序块的运行时间。", "其他有用信息": "该指令使用内部高频计数器来计算时间，如果计数器溢出，该指令返回值<=0.0。"}
{"指令名": "DECO", "指令说明": "该指令用于解码，将输入值所指定的位置位。", "参数列表": [" IN, Input, UINT, 输出值中待置位位的位置。", " 函数值, 位字符串, 当前输出值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用DECO指令进行解码操作。", "其他有用信息": "如果参数IN的值大于31，则执行以32为模的指令。"}
{"指令名": "ENCO", "指令说明": "该指令用于编码，读取输入值中设置的最小值位的位号。", "参数列表": [" IN, Input, 位字符串, 输入值。", " 函数值, INT, 待读取输入值中位的位号。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用ENCO指令进行编码操作。", "其他有用信息": "如果参数IN的值为0，则在输出OUT中输出值“0”。"}
{"指令名": "SEL", "指令说明": "该指令用于选择，根据开关参数选择两个输入值中的一个。", "参数列表": [" G, Input, BOOL, 开关。", " IN0, Input, 二进制数、整数等, 第一个输入值。", " IN1, Input, 二进制数、整数等, 第二个输入值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SEL指令根据开关参数选择输入值。", "其他有用信息": "只有当所有参数的变量均为同一种数据类型等级时，才能执行该指令。"}
{"指令名": "MUX", "指令说明": "该指令用于多路复用，复制所选的输入参数值并发出。", "参数列表": [" K, Input, 整数, 指定要传送内容的参数。", " IN0, Input, 二进制数、整数等, 第一个输入值。", " IN1, Input, 二进制数、整数等, 第二个输入值。", " INn, Input, 二进制数、整数等, 可选的输入值。", " INELSE, Input, 二进制数、整数等, 指定K<n时要复制的值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用MUX指令进行多路复用操作。", "其他有用信息": "所有分配有参数的变量都必须为相同的数据类型。"}
{"指令名": "DEMUX", "指令说明": "该指令用于多路分用，将输入参数的值传送到所选的输出参数。", "参数列表": [" K, Input, 整数, 指定要将输入值(IN)复制到的输出。", " IN, Input, 二进制数、整数等, 输入值。", " OUT0, Output, 二进制数、整数等, 第一个输出。", " OUT1, Output, 二进制数、整数等, 第二个输出。", " OUTn, Output, 二进制数、整数等, 可选输出。", " OUTELSE, Output, 二进制数、整数等, 当K>n时，输入IN的值要复制到的输出。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用DEMUX指令进行多路分用操作。", "其他有用信息": "确保输入参数“IN”和所有输出参数具有相同的数据类型。"}
{"指令名": "SHR", "指令说明": "该指令用于右移，将参数的内容逐位向右移动。", "参数列表": [" IN, Input, 位字符串或整数, 要移位的值。", " N, Input, USINT、UINT等, 对值(IN)进行移位的位数。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHR指令进行右移操作。", "其他有用信息": "无符号值移位时，用零填充左侧区域中空出的位；有符号值移位时，用符号位的信号状态填充。"}
{"指令名": "SHL", "指令说明": "该指令用于左移，将参数的内容逐位向左移动。", "参数列表": [" IN, Input, 位字符串或整数,要移位的值。", " N, Input, USINT、UINT等, 对值(IN)进行移位的位数。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "结果值中因移位而空出的位将用0填充。"}
{"指令名": "ROL", "指令说明": "使用“循环左移”指令，可以将参数 IN 的内容逐位向左循环移位，并将结果作为函数值返回。参数 N 用于指定应将特定值循环移位的位数。用移出的位填充因循环移位而空出的位。", "参数列表": [" IN, Input, 位字符串/整数, 要循环移位的值", " N, Input, USINT/UINT/UDINT/ULINT, 要将值进行(IN)循环移位的位数", " 函数值, 位字符串/整数, 指令的结果"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "如果参数 N 的值为“0”，则将输入 IN 的值作为结果。如果参数 N 的值大于可用位数，则输入 IN 中的操作数值将循环移动指定位数个位。"}
{"指令名": "DRUM", "指令说明": "可以使用“执行顺控程序”指令，将相应步的 OUT_VAL 参数的已设定值分配给已设定的输出位（OUT1 到 OUT16）和输出字 (OUT_WORD)。该指令根据参数 S_MASK 中设定的使能掩码条件以及预设时间进行步进操作。", "参数列表": [" RESET, Input, BOOL, 信号状态“1”表示复位状态。", " JOG, Input, BOOL, 当信号状态从“0”变为“1”时，该指令将进入下一步。", " DRUM_EN, Input, BOOL, 信号状态“1”允许顺控程序按照事件和时间条件提前执行。", " LST_STEP, Input, BYTE, 最大步数。", " EVENT(i), Input, BOOL, 事件位。", " OUT(j), Output, BOOL, 输出位。", " Q, Output, BOOL, 信号状态“1”表示最后一步的时间已用完。", " OUT_WORD, Output, WORD, 顺控程序写入输出值的目标字地址。", " ERR_CODE, Output, WORD, 错误信息。", " 以及其他静态参数和历史位。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "每步所耗用的时间由预设时基 (DTBP) 与每步预设计数值 (S_PRESET) 的乘积确定。顺控程序的当前步和预设步可以通过静态参数 (如 DSP, DSC) 进行控制。"}
{"指令名": "DCAT", "指令说明": "可以使用“离散控制定时器报警”指令，从参数 CMD 发出打开或关闭命令的时刻开始计时。如果在规定时间内已打开或关闭设备，或者超出了预设时间，则激活相应的报警。", "参数列表": [" CMD, Input, BOOL, 命令输入。", " O_FB, Input, BOOL, 打开时的反馈输入。", " C_FB, Input, BOOL, 关闭时的反馈输入。", " Q, Output, BOOL, 显示参数 CMD 的状态。", " OA, Output, BOOL, 打开时的报警输出。", " CA, Output, BOOL, 关闭时的报警输出。", " ET, Static, DINT, 当前已用时间。", " PT, Static, DINT, 预设的定时器值。", " PREV_TIME, Static, DWORD, 上一次的系统时间。", " CMD_HIS, Static, BOOL, CMD 历史位。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "如果命令输入的信号状态在到达预设时间前发生变化，则重新计时。该指令不提供错误信息。"}
{"指令名": "MCAT", "指令说明": "用于从开启命令输入（打开或关闭）时开始计时。如果在收到反馈前就超出了预设时间，则触发相应的报警。", "参数列表": [" O_CMD, Input, BOOL, “打开”命令输入。", " C_CMD, Input, BOOL, “关闭”命令输入。", " S_CMD, Input, BOOL, “停止”命令输入。", " O_FB, Input, BOOL, 打开时的反馈输入。", " C_FB, Input, BOOL, 关闭时的反馈输入。", " OO, Output, BOOL, “打开”输出。", " CO, Output, BOOL, “关闭”输出。", " OA, Output, BOOL, 打开时的报警输出。", " CA, Output, BOOL, 关闭时的报警输出。", " Q, Output, BOOL, 信号状态“0”表示错误状态。", " ET, Static, DINT, 当前已用时间。", " PT, Static, DINT, 预设的定时器值。", " PREV_TIME, Static, DWORD, 上一次的系统时间。", " O_HIS, Static, BOOL, “打开”历史位。", " C_HIS, Static, BOOL, “关闭”历史位。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "指令对各种输入条件的反应详细列出了不同情况下输出参数的变化。"}
{"指令名": "IMC", "指令说明": "可以使用“比较输入位与掩码位”指令，将最多 16 个设定的输入位的信号状态与相应的掩码位进行比较。", "参数列表": [" IN_BIT0 到 IN_BIT15, Input, BOOL, 比较输入位与掩码位。", " CMP_STEP, Input, BYTE, 用于比较的掩码步号。", " OUT, Output, BOOL, 信号状态“1”表示找到一个匹配值。", " ERR_CODE, Output, WORD, 错误信息。", " CMP_VAL, Static, ARRAY OF WORD, 比较掩码。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "如果在比较期间找到匹配值，参数 OUT 的信号状态置为“1”。否则将参数 OUT 置为“0”。如果参数 CMP_STEP 的值大于 15，则不执行该指令，并在参数 ERR_CODE 中输出错误信息。"}
{"指令名": "SMC", "指令说明": "“比较扫描矩阵”指令可将最多 16 个已编程输入位的信号状态与各步比较掩码的相应位进行比较。", "参数列表": [" IN_BIT0 到 IN_BIT15, Input, BOOL, 比较输入位与掩码位。", " OUT, Output, BOOL, 信号状态“1”表示找到一个匹配值。", " OUT_STEP, Output, BYTE, 包含具有匹配掩码的步号。", " ERR_CODE, Output, WORD, 错误信息。", " LAST, Static, BYTE, 指定为获得匹配掩码而将扫描的最后步的步号。", " CMP_VAL, Static, ARRAY OF WORD, 比较掩码。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "如果找到匹配值，则将参数 OUT 的信号状态设为“1”，并将匹配掩码的步号写入参数 OUT_STEP。如果多个步具有匹配掩码，则参数 OUT_STEP 仅指示找到的第一个步。如果没有找到匹配值，则参数 OUT 的信号状态置为“0”。"}
{"指令名": "LEAD_LAG", "指令说明": "可以使用“提前和滞后算法”指令，通过模拟量变量处理信号。该指令可与回路一起用作动态前馈控制中的补偿器。", "参数列表": [" IN, Input, REAL, 待处理的当前采样时间输入值。", " SAMPLE_T, Input, INT, 采样时间。", " OUT, Output, REAL, 指令的结果。", " ERR_CODE, Output, WORD, 错误信息。", " LD_TIME, Static, REAL, 提前时间的单位与采样时间的相同。", " LG_TIME, Static, REAL, 滞后时间的时间单位与采样时间的相同。", " GAIN, Static, REAL, 增益（%/% 的增益）。", " PREV_IN, Static, REAL, 上一次输入。", " PREV_OUT, Static, REAL, 上一次输出。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GAIN 参数的增益值必须大于零。如果 GAIN 的值小于或等于零，则不进行计算，并在 ERR_CODE 中输出错误信息。"}
{"指令名": "SEG", "指令说明": "“创建 7 段显示的位模式”指令用于将所指定源字的四个十六进制数都转换为 7 段显示的等价位模式。", "参数列表": [" IN, Input, WORD, 以四个十六进制数字表示的源字。", " OUT, Output, DWORD, 7 段显示的位模式。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "指令的结果在参数 OUT 中以双字形式输出。"}
{"指令名": "BCDCPL", "指令说明": "“求十进制补码”指令用于计算操作数中所指定 7 位 BCD 数的十进制补码。", "参数列表": [" 操作数, Input, 位字符串, 7 位 BCD 数。", " 函数值, DWORD, 指令的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "使用数学公式 10000000（BCD 编码）- 7 位 BCD 值进行计算。"}
{"指令名": "BITSUM", "指令说明": "可以使用“统计置位位数量”指令统计信号状态被置位为“1”的操作数的位数。", "参数列表": [" 操作数, Input, DWORD, 要统计其置位位数量的操作数。", " 函数值, INT, 指令的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "文档中未提供其他有用信息。"}
{"指令名": "T_COMP", "指令说明": "此指令用于对数据类型为“定时器”或“日期和时间”的两个变量的内容进行比较。", "参数列表": [" IN1, Input, DATE, TIME, LTIME, TOD, LTOD, DT, LDT, DTL, S5Time, 待比较的第一个值。", " IN2, Input, DATE, TIME, LTIME, TOD, LTOD, DT, LDT, DTL, S5Time, 待比较的第二个值。", " OUT, Output, BOOL, 返回值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "要进行比较，数据类型的长度和格式必须相同。比较的结果将在 OUT 参数中作为返回值输出。"}
{"指令名": "T_CONV", "指令说明": "使用指令“T_CONV”将 IN 输入参数的数据类型转换为 OUT 输出上输出的数据类型。", "参数列表": [" IN, Input, 整数、TIME、日期和时间*, 要转换的值。", " OUT, Return, 整数、TIME、日期和时间*, 转换结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "如果使用了相同数据类型的输入和输出参数，则该指令将复制对应值。"}
{"指令名": "T_ADD", "指令说明": "使用该指令将 IN1 输入中的时间信息加到 IN2 输入中的时间信息上。", "参数列表": [" IN1, Input, TIME, LTIME, 要相加的第一个数。", " IN2, Input, TIME, LTIME, 要相加的第二个数。", " OUT, Return, DINT, DWORD, TIME, TOD, 相加的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "在计算过程中，可能超出输出参数 OUT 的最大值或低于最小值。通过评估使能输出 ENO，可检测这一错误。"}
{"指令名": "T_SUB", "指令说明": "使用该指令将 IN1 输入参数中的时间值减去 IN2 输入参数中的时间值。", "参数列表": [" IN1, Input, TIME, LTIME, 被减数。", " IN2, Input, TIME, LTIME, 减数。", " OUT, Return, DINT, DWORD, TIME, TOD, 相减的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "在计算过程中，可能超出输出参数 OUT 的最大值或低于最小值。通过评估使能输出 ENO，可检测这一错误。"}
{"指令名": "T_DIFF", "指令说明": "使用该指令将 IN1 输入参数中的时间值减去 IN2 输入参数中的时间值。", "参数列表": [" IN1, Input, DTL, DATE, TOD, 被减数。", " IN2, Input, DTL, DATE, TOD, 减数。", " OUT, Return, TIME, INT, LTIME, INT, 输入参数之间的差值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "如果 IN2 输入参数中的时间值大于 IN1 输入参数中的时间值，则 OUT 输出参数中将输出一个负数结果。"}
{"指令名": "T_COMBINE", "指令说明": "该指令用于合并日期值和时间值，并生成一个合并日期时间值。", "参数列表": [" IN1, Input, DATE, 日期的输入变量。", " IN2, Input, TOD, 时间的输入变量。", " OUT, Return, DTL, DT, LDT, 日期和时间的返回值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "在 SCL 程序中使用 T_COMBINE 时，将指令“T_COMBINE”从“指令”任务卡拖放到 SCL 编程窗口中，内部指令 CONCAT_DATE_TOD 或 CONCAT_DATE_LTOD 显示在该窗口内。"}
{"指令名": "WR_SYS_T", "指令说明": "使用该指令，可设置 CPU 时钟的日期和时间（模块时间）。", "参数列表": [" IN, Input, DTL, DT, LDT, 日期和时间。", " RET_VAL, Return, INT, 指令的状态。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "CPU 时钟的模块时间将用作 CPU 发起的所有时间处理过程的模板。"}
{"指令名": "RD_SYS_T", "指令说明": "可以使用该指令读取 CPU 时钟的当前日期和当前时间（模块时间）。", "参数列表": [" RET_VAL, Return, INT, 指令的状态。", " OUT, Output, DTL, DT, LDT, CPU 的日期和时间。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "得出的值不包含有关本地时区或夏令时的信息。"}
{"指令名": "RD_LOC_T", "指令说明": "使用该指令从 CPU 时钟读取当前本地时间。", "参数列表": [" RET_VAL, Return, INT, 指令的状态。", " OUT, Output, DTL, LDT, DTL, 本地时间。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "在输出本地时间时，会用到夏令时和标准时间的时区和开始时间（已在 CPU 时钟的组态中设置）的相关信息。"}
{"指令名": "WR_LOC_T", "指令说明": "指令“WR_LOC_T”用于设置 CPU 时钟的日期和时间。", "参数列表": [" LOCTIME, Input, DTL, LDT, 本地时间。", " DST, Input, BOOL, Daylight Saving Time。", " RET_VAL, Return, INT, 错误消息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "本地时间和系统时间的时间信息粒度与具体产品有关，且至少为 1 毫秒。"}
{"指令名": "SET_TIMEZONE", "指令说明": "使用指令“SET_TIMEZONE”设置进行本地时区和夏令时/标准时间切换的参数。", "参数列表": [" REQ, Input, BOOL, 执行函数。", " TimeZone, Input, TimeTransformationRule, 本地时区参数和夏令时/标准时间转换参数。", " DONE, Output, BOOL, 状态参数。", " BUSY, Output, BOOL, 状态参数。", " ERROR, Output, BOOL, 状态参数。", " STATUS, Output, WORD, 详细的错误和状态信息。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "每次更改时区时，需要调用该指令一次。例如，建议在启动 OB 中调用“SET_TIMEZONE”。"}
{"指令名": "SNC_RTCB", "指令说明": "同步时钟从站是指将某总线段的时钟主站的日期和日时钟传送到该总线段中的所有时钟从站。", "参数列表": [" RET_VAL, Output, INT, 执行过程中如果发生错误，则返回值将包含错误代码。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "仅当在其实时时钟被指定为至少一个总线段的主站时钟的 CPU 上调用了“SNC_RTCB”时，同步才可能成功。"}
{"指令名": "TIME_TCK", "指令说明": "使用指令“TIME_TCK”，可以读取 CPU 的系统时间。", "参数列表": [" RET_VAL, Return, TIME, 读取的系统时间。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "系统时间是一个时间计数器，从 0 开始计数，直至最大值 2147483647 ms。发生溢出时，系统时间将重新从“0”开始计数。"}
{"指令名": "RTM", "指令说明": "可使用该指令对 CPU 的 32 位运行小时计数器执行设置、启动、停止和读取操作。", "参数列表": [" NR, Input, RTM, 运行小时计数器的编号。", " MODE, Input, BYTE, 作业 ID。", " PV, Input, DINT, 运行小时计数器的新值。", " RET_VAL, Return, INT, 指令执行过程中如果发生错误，则返回值将包含错误代码。", " CQ, Output, BOOL, 运行小时计数器的状态。", " CV, Output, DINT, 运行小时计数器的当前值。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "在执行用户程序期间也可以停止或重新启动运行小时计数器，但这可能会导致保存的值不正确。"}
{"指令名": "S_MOVE", "指令说明": "可以使用此指令将参数 IN 中字符串的内容写入在参数 OUT 中指定的数据区域。", "参数列表": [" IN, Input, STRING, WSTRING, 源字符串。", " OUT, Output, STRING, WSTRING, 目标字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "要复制数据类型为 ARRAY 的变量，可使用指令“MOVE_BLK”和“UMOVE_BLK”。"}
{"指令名": "S_COMP", "指令说明": "使用该指令，可比较两个 (W)STRING 格式的变量的内容，并将比较结果作为返回值输出。", "参数列表": [" IN1, Input, STRING, WSTRING, 输入变量，格式为 STRING / WSTRING。", " IN2, Input, STRING, WSTRING, 输入变量，格式为 STRING / WSTRING。", " OUT, Output, BOOL, 比较的结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "按照字符的 ASCII 码从左侧开始比较字符。第一个不同的字符决定比较结果。"}
{"指令名": "S_CONV", "指令说明": "使用该指令将 IN 输入中的值转换为 OUT 输出中指定的数据格式。", "参数列表": [" IN, Input, CHAR, WCHAR, USINT, UINT, UDINT, ULINT, SINT, INT, DINT, LINT, REAL, LREAL, 要转换的值。", " OUT, Output, CHAR, WCHAR, USINT, UINT, UDINT, ULINT, SINT, INT, DINT, LINT, REAL, LREAL, STRING, WSTRING, 转换结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "转换后字符串的长度取决于 IN 输入中的值。在 SCL 中，运算后返回的字符串将覆盖返回值处变量中的内容。"}
{"指令名": "STRG_VAL", "指令说明": "“STRG_VAL”指令可将字符串转换为整数或浮点数。", "参数列表": [" IN, Input, STRING, WSTRING, 要转换的数字字符串。", " FORMAT, Input, WORD, 字符的输入格式。", " P, Input, UINT, 要转换的第一个字符的引用。", " OUT, Output, USINT, SINT, UINT, INT, UDINT, DINT, REAL, LREAL, 转换结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "转换允许的字符包括数字“0”到“9”、小数点、小数撇、计数制“E”和“e”，以及加减号字符。如果发现无效字符，将取消转换过程。"}
{"指令名": "VAL_STRG", "指令说明": "“VAL_STRG”指令用于将数字值转换为字符串。", "参数列表": [" IN, Input, USINT, SINT, UINT, INT, UDINT, DINT, REAL, LREAL, 要转换的值。", " SIZE, Input, USINT, 字符位数。", " PREC, Input, USINT, 小数位数。", " FORMAT, Input, WORD, 字符的输出格式。", " P, InOut, UINT, 开始写入结果的字符。", " OUT, Output, STRING, WSTRING, 转换结果。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "无效字符将中断转换过程。"}
{"指令名": "Strg_TO_Chars", "指令说明": "通过指令“Strg_TO_Chars”，可将数据类型为 STRING 的字符串复制到 Array of CHAR 或 Array of BYTE 中；或将数据类型为 WSTRING 的字符串复制到 Array of WCHAR 或 Array of WORD 中。", "参数列表": [" STRG, Input, STRING, WSTRING, 复制操作的源。", " PCHARS, Input, DINT, Array of (W)CHAR / BYTE / WORD 结构中的位置，从该位置处开始写入字符。", " CHARS, InOut, VARIANT, 复制操作的目标。", " CNT, Output, UINT, 移动的字符数量。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "该操作只能复制 ASCII 字符。如果目标域包含的字符数少于源字符串中的字符数，则将只写入最多与目标域最大长度相同的字符数。"}
{"指令名": "Chars_TO_Strg", "指令说明": "通过指令“Chars_TO_Strg”，可将字符串从 Array of CHAR 或 Array of BYTE 复制到数据类型为 STRING 的字符串中；或将字符串从 ARRAY of WCHAR 或 Array of WORD 复制到数据类型为 WSTRING 的字符串中。", "参数列表": [" CHARS, Input, VARIANT, 复制操作的源。", " PCHARS, Input, DINT, Array of (W)CHAR / BYTE / WORD 中的位置，从该位置处开始复制字符。", " CNT, Input, UINT, 要复制的字符数。", " STRG, Output, STRING, WSTRING, 复制操作的目标。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "复制操作仅支持 ASCII 字符。如果字符串长度小于源域中的字符个数，则将在字符串中写入最大长度的字符数。"}
{"指令名": "MAX_LEN", "指令说明": "使用指令“MAX_LEN”，可确定输入参数 IN 中所指定字符串的最大长度，并将其作为数字值输出到输出参数 OUT 中。", "参数列表": [" IN, Input, STRING, WSTRING, 字符串。", " OUT, Return, INT, DINT, 最大字符数。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "(W)STRING 数据类型的变量包含两个长度"}
{"指令名": "JOIN", "指令说明": "将多个字符串通过指定的分隔符连接成一个数组，支持CSV格式和FSR格式。", "参数列表": [" Mode，Input，DWORD，指定合并方式（CSV或FSR）。", " RecSeparator，Input，VARIANT，源字符串的分隔符或填充字符。", " EndSeparator，Input，VARIANT，转换末尾的分隔符。", " SrcStruct，Input，VARIANT，指向源字符串的指针。", " Count，Input，UDINT，连接的字符串数量。", " DestArray，InOut，VARIANT，转换后写入字符的区域。", " Position，InOut，UDINT，为整个字符串中的位置制作索引。", " Ret_Val，Return，INT，指令的状态。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "JOIN指令在连接字符串时，需要注意字符串的最大长度限制和分隔符的选择。"}
{"指令名": "SPLIT", "指令说明": "将一个字符数组按照指定的分隔符拆分为多个字符串，支持CSV格式和FSR格式。", "参数列表": [" Mode，Input，DWord，指定分割方式。", " RecSeparator，Input，Variant，CSV格式的分隔符或FSR格式的填充字符。", " EndSeparator，Input，Variant，完整字符串末尾的分隔符。", " SrcArray，Input，Variant，指向待读取数组的指针。", " DestStruct，InOut，Variant，包含已转换字符串的结构。", " Position，InOut，UDInt，开始读取数组的位置。", " Ret_Val，Return，Int，指令执行结果/错误代码。", " Count，Output，UDInt，找到的字符串数量。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "SPLIT指令在拆分字符串时，需要考虑不同格式的处理方式和分隔符的选择。"}
{"指令名": "ATH", "指令说明": "将ASCII字符串转换为对应的十六进制数。", "参数列表": [" IN，Input，VARIANT，指向ASCII字符串的指针。", " N，Input，INT，待转换的ASCII字符数。", " RET_VAL，Return，WORD，指令的状态。", " OUT，Output，VARIANT，转换后的十六进制数。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "ATH指令在转换时，只接受数字0-9和大写或小写字母A-F，其他字符将被转换为0。"}
{"指令名": "HTA", "指令说明": "将十六进制数转换为对应的ASCII字符串。", "参数列表": [" IN，Input，VARIANT，十六进制数的起始地址。", " N，Input，UINT，待转换的十六进制字节数。", " RET_VAL，Return，WORD，错误消息。", " OUT，Output，VARIANT，结果的存储地址。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "HTA指令在转换时，输出的ASCII字符串长度将是输入值长度的两倍。"}
{"指令名": "LEN", "指令说明": "确定(W)STRING数据类型变量的当前长度。", "参数列表": [" IN，Input，STRING, WSTRING，D、L或常量，字符串。", " OUT，Return，INT，I、Q、M、D、L，有效字符数。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "LEN指令可以读取字符串的实际使用字符数量，空字符串长度为零。"}
{"指令名": "CONCAT", "指令说明": "合并两个字符串。", "参数列表": [" IN1，Input，STRING, WSTRING，D、L或常量，第一个字符串。", " IN2，Input，STRING, WSTRING，D、L或常量，第二个字符串。", " OUT，Return，STRING, WSTRING，D、L，生成的字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "CONCAT指令在合并时，如果结果超出OUT参数长度，则限制到可用长度。"}
{"指令名": "LEFT", "指令说明": "从字符串中提取左侧的字符。", "参数列表": [" IN，Input，STRING, WSTRING，D、L或常量，字符串。", " L，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要提取的字符数。", " OUT，Return，STRING, WSTRING，D、L，提取的部分字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "LEFT指令在提取时，如果L大于字符串长度，则返回整个字符串。"}
{"指令名": "RIGHT", "指令说明": "从字符串中提取右侧的字符。", "参数列表": [" IN，Input，STRING, WSTRING，D、L或常量，字符串。", " L，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要提取的字符数。", " OUT，Return，STRING, WSTRING，D、L，提取的部分字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "RIGHT指令在提取时，如果L大于字符串长度，则返回整个字符串。"}
{"指令名": "MID", "指令说明": "从字符串中提取中间的字符。", "参数列表": [" IN，Input，STRING, WSTRING，D、L或常量，字符串。", " L，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要提取的字符串长度。", " P，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要提取的第一个字符的位置。", " OUT，Return，STRING, WSTRING，D、L，提取的部分字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "MID指令在提取时，如果P超出字符串长度，则返回空字符串。"}
{"指令名": "DELETE", "指令说明": "在字符串中删除特定位置的字符。", "参数列表": [" IN，Input，STRING, WSTRING，D、L或常量，字符串。", " L，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要删除的字符数。", " P，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要删除的第一个字符的位置。", " OUT，Return，STRING, WSTRING，D、L，生成的字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "DELETE指令在删除时，如果P或L为负数或超出字符串长度，则返回空字符串或原始字符串。"}
{"指令名": "INSERT", "指令说明": "在字符串中插入字符。", "参数列表": [" IN1，Input，STRING, WSTRING，D、L或常量，原始字符串。", " IN2，Input，STRING, WSTRING，D、L或常量，要插入的字符串。", " P，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，插入位置。", " OUT，Return，STRING, WSTRING，D、L，生成的字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "INSERT指令在插入时，如果P超出IN1长度，则IN2追加到IN1之后。"}
{"指令名": "REPLACE", "指令说明": "替换字符串中的字符。", "参数列表": [" IN1，Input，STRING, WSTRING，D、L或常量，要替换其中字符的字符串。", " IN2，Input，STRING, WSTRING，D、L或常量，含有要插入的字符的字符串。", " L，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要替换的字符数。", " P，Input，BYTE, INT, SINT, USINT，I、Q、M、D、L或常量，要替换的第一个字符的位置。", " OUT，Return，STRING, WSTRING，D、L，生成的字符串。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "REPLACE指令在替换时，如果P或L为负数或零，则返回空字符串。"}
{"指令名": "FIND", "指令说明": "在字符串中查找特定字符或字符串。", "参数列表": [" IN1，Input，STRING, WSTRING，D、L或常量，被搜索的字符串。", " IN2，Input，STRING, WSTRING，D、L或常量，要搜索的字符串。", " OUT，Return，INT，I、Q、M、D、L，字符位置。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "FIND指令在搜索时，输出第一次出现该值的位置，如果没有匹配项，则输出0。"}
{"指令名": "GetSymbolName", "指令说明": "读取输入参数的变量名称。", "参数列表": [" VARIABLE，Input，PARAMETER，选择读取输入参数名称的本地接口。", " SIZE，Input，DINT，OUT参数处，输出字符数的限值。", " OUT，Return，WSTRING，D、L，输出输入参数的变量名称。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GetSymbolName指令可能导致代码存储器空间需求增加和程序运行时间延长。"}
{"指令名": "GetSymbolPath", "指令说明": "查询从调用路径起始处的实参名称。", "参数列表": [" VARIABLE，Input，PARAMETER，选择形参，在调用路径起始处将读取其对应实参的名称。", " SIZE，Input，DINT，OUT参数处，输出字符数的限值。", " OUT，Output，WSTRING，D、L，输出输入参数来源的变量名称。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GetSymbolPath指令可能导致代码存储器空间需求增加和程序运行时间延长。"}
{"指令名": "GetInstanceName", "指令说明": "在函数块中读取背景数据块的名称。", "参数列表": [" SIZE，Input，DINT，OUT参数处，输出字符数的限值。", " OUT，Output，WSTRING，D、L，背景数据块的读取名称。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GetInstanceName指令可能导致代码存储器空间需求增加和程序运行时间延长。"}
{"指令名": "GetInstancePath", "指令说明": "查询块实例的复合全局名称。", "参数列表": [" SIZE，Input，DINT，OUT参数处，输出字符数的限值。", " OUT，Output，WSTRING，D、L，读取块实例的全局名称。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GetInstancePath指令可能导致代码存储器空间需求增加和程序运行时间延长。"}
{"指令名": "GetBlockName", "指令说明": "读取块名称。", "参数列表": [" SIZE，Input，DINT，RET_VAL参数处，输出字符数的限值。", " RET_VAL，Output，WSTRING，D、L，读取程序块名称。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GetBlockName指令可以限制块名称的长度，如果名称被截断，末尾标识为\"...\"。"}
{"指令名": "GetSymbolForReference", "指令说明": "确定间接寻址对象的名称。", "参数列表": [" execute，Input，Bool，控制参数：在上升沿启动作业。", " objectRef，Input，引用，要确定其名称的对象的引用。", " size，Input，DInt，定义名称缩短的长度。", " done，Output，Bool，作业已执行，且无任何错误。", " busy，Output，Bool，作业尚未完成。", " error，Output，Bool，处理期间出错。", " status，Output，Int，作业处理状态或错误信息。", " reliability，Output，Int，保留供以后使用。", " symbol，InOut，WString，确定的名称。"], "示例代码和代码解读": "提供了SCL示例代码，展示了如何使用SHL指令进行左移操作。", "其他有用信息": "GetSymbolForReference是异步执行指令，作业执行可跨多次调用。"}
