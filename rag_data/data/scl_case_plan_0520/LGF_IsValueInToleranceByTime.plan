{"variables": ["1. name: value, type: Real, initial: None, role: An input value to be checked against the specified tolerance of the setpoint.", "2. name: setpoint, type: Real, initial: None, role: The reference setpoint for tolerance checking.", "3. name: lowerMinimum, type: Real, initial: None, role: The lower tolerance limit, which can be a percent or an absolute value.", "4. name: upperMaximum, type: Real, initial: None, role: The upper tolerance limit, which can be a percent or an absolute value.", "5. name: reset, type: Bool, initial: None, role: A control signal to reset the function block.", "6. name: configuration, type: LGF_typeIsValueInToleranceByTimeConfiguration, initial: None, role: Configuration parameters for the module.", "7. name: overHighLimit, type: Bool, initial: None, role: Output indicating if the value is above the high limit.", "8. name: belowLowLimit, type: Bool, initial: None, role: Output indicating if the value is below the low limit.", "9. name: inLimits, type: Bool, initial: None, role: Output indicating if the value is within the limits.", "10. name: setpointChange, type: Bool, initial: None, role: Output indicating if there has been a change in setpoint.", "11. name: error, type: Bool, initial: None, role: Output indicating if an error has occurred.", "12. name: status, type: Word, initial: None, role: Status code output for the function.", "13. name: instMonitorUpper, type: IEC_TIMER, initial: None, role: Timer for monitoring the duration the value is over the high limit.", "14. name: instMonitorLower, type: IEC_TIMER, initial: None, role: Timer for monitoring the duration the value is below the low limit.", "15. name: instMonitorChange, type: IEC_TIMER, initial: None, role: Timer for monitoring the duration after a setpoint change.", "16. name: statSetpointPrevious, type: Real, initial: None, role: Stores the previous setpoint value for change detection.", "17. name: statResetPrev, type: Bool, initial: None, role: Stores the previous state of the reset input for edge detection.", "18. name: statSetpointChange, type: Bool, initial: None, role: Internal flag to indicate if a setpoint change has occurred.", "19. name: statWasWithinTolerance, type: Bool, initial: None, role: Internal flag to indicate if the value was previously within tolerance.", "20. name: tempValueOverHighLimit, type: Bool, initial: None, role: Temporary variable to store if the value is over the high limit.", "21. name: tempValueUnderLowLimit, type: Bool, initial: None, role: Temporary variable to store if the value is under the low limit.", "22. name: ONE, type: Real, initial: 1.0, role: Constant value representing '1'.", "23. name: ONEHUNDRED_PERCENT, type: Real, initial: 100.0, role: Constant value representing '100%'.", "24. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing no error status.", "25. name: ERR_RANGE_LIMIT_VALUE_CALC, type: Word, initial: 16#8401, role: Error code for range/limit value calculation error.", "26. name: ERR_SETPOINT_ABOVE_HIGH_LIMIT, type: Word, initial: 16#8402, role: Error code for setpoint above high limit error.", "27. name: ERR_SETPOINT_BELOW_LOW_LIMIT, type: Word, initial: 16#8403, role: Error code for setpoint below low limit error."], "instructions": ["IEC_TIMER"], "planning": "# Step1. Initialize the monitoring timers (instMonitorUpper, instMonitorLower, instMonitorChange) for detecting limit violations and setpoint changes.\n# Step2. Calculate the actual limits based on the configuration (limits as absolute values or tolerance in percent).\n# Step3. Detect setpoint changes and reset the relevant flags and timers accordingly.\n# Step4. Perform error checking for invalid setpoint or calculation errors and set the error outputs and status codes.\n# Step5. If no errors, evaluate the value against the high and low limits, and update the monitoring timers based on the value's position relative to the limits.\n# Step6. Determine if the value is within the limits and update the output flags (overHighLimit, belowLowLimit, inLimits) accordingly.\n# Step7. Determine if a setpoint change has occurred by checking the setpoint change timer and update the setpointChange output.\n# Step8. Set the status to no error and ensure the ENO signal is true to indicate no errors have occurred.", "name": "LGF_IsValueInToleranceByTime"}