{"variables": ["1. name: textBefore, type: String, initial: None, role: Text in front of the characters which has to be extracted.", "2. name: textAfter, type: String, initial: None, role: Text behind the characters which has to be extracted.", "3. name: includeBeforeAfter, type: Bool, initial: FALSE, role: Determines if textBefore and textAfter should be included in the extracted string.", "4. name: startPos, type: DInt, initial: 0, role: The starting position within the array to begin the search from.", "5. name: extractedString, type: String, initial: '', role: The string that is extracted from the array.", "6. name: position, type: DInt, initial: -1, role: The position within the array where the extracted text begins.", "7. name: length, type: Int, initial: 0, role: The length of the extracted text.", "8. name: status, type: Word, initial: STATUS_NO_ERROR, role: The status of the function block execution.", "9. name: searchIn, type: Variant, initial: None, role: The array of Character or Byte to search in.", "10. name: tempNumElements, type: UDInt, initial: None, role: Temporary variable to hold the number of elements in the array.", "11. name: tempPosInArray, type: DInt, initial: startPos, role: Temporary variable to hold the current position in the array during the search.", "12. name: tempLenTextBefore, type: Int, initial: LEN(textBefore), role: Temporary variable to hold the length of the textBefore string.", "13. name: tempPosTextBefore, type: DInt, initial: 0, role: Temporary variable to hold the position of textBefore found in the array.", "14. name: tempLenTextAfter, type: Int, initial: LEN(textAfter), role: Temporary variable to hold the length of the textAfter string.", "15. name: tempPosTextAfter, type: DInt, initial: 0, role: Temporary variable to hold the position of textAfter found in the array.", "16. name: tempString, type: String, initial: '', role: Temporary variable to hold intermediate strings during processing."], "instructions": ["Chars_TO_Strg", "FIND", "LEFT", "MIN", "UDINT_TO_UINT", "UINT_TO_INT"], "planning": "# Step1. Initialize temporary variables and output variables to their default values.\n# Step2. Validate if the input searchIn is an array of characters or bytes, if not set error status and exit.\n# Step3. Search for the textBefore in the array starting from the startPos, if found proceed to search for textAfter.\n# Step4. If textAfter is found within the same or subsequent string segment, determine the length of the string to be extracted based on whether to include textBefore and textAfter.\n# Step5. Set the output variables extractedString, position, and length accordingly.\n# Step6. If only textBefore is found, set extractedString to the remaining string and adjust position and length.\n# Step7. If no text is found, keep repeating the search moving forward by the size of the processed string segment minus the length of textBefore to prevent missing split keywords.\n# Step8. If the end of the array is reached without finding the text, set the status to WARNING_NOTHING_FOUND.\n# Step9. Return the status of the function block execution.", "name": "LGF_ExtractStringFromCharArrayAdv"}