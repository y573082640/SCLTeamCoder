{"variables": ["1. name: requestIn, type: Bool, initial: None, role: Input signal for product incoming.", "2. name: requestOut, type: Bool, initial: None, role: Input signal for product outgoing.", "3. name: productNum, type: Int, initial: None, role: Output parameter indicating the number of products in the warehouse.", "4. name: libFreeNum, type: Int, initial: None, role: Output parameter indicating the number of free spaces in the warehouse.", "5. name: error, type: Bool, initial: None, role: Output parameter indicating if an error has occurred.", "6. name: status, type: Word, initial: None, role: Output parameter indicating the status code.", "7. name: library, type: Array[1..9] of Bool, initial: None, role: In-out parameter representing the occupation status of each level of the shelf.", "8. name: statLastItemIndex, type: Int, initial: None, role: Not used in the provided code.", "9. name: STATUS_OK, type: Word, initial: 16#0000, role: Constant representing the status code for normal operation.", "10. name: STATUS_ALL_OCCUPIED, type: Word, initial: 16#8001, role: Constant representing the status code when all positions are occupied.", "11. name: STATUS_ALL_EMPTY, type: Word, initial: 16#8002, role: Constant representing the status code when all positions are empty.", "12. name: tempIndex, type: Int, initial: None, role: Temporary variable used for iteration.", "13. name: tempError, type: Bool, initial: None, role: Temporary variable for storing error status, not used in the provided code.", "14. name: tempStatus, type: Word, initial: None, role: Temporary variable for storing status code, not used in the provided code."], "instructions": [""], "planning": "# Step1. Initialize the output parameters productNum and libFreeNum by iterating over the library array to count the number of products and free spaces.\n# Step2. Check if there is an incoming request (#requestIn). If so, iterate from the top of the shelf downwards to find the first free space. If a free space is found, mark it as occupied and update the product and free space counters. If no free space is found, set the error and status to indicate all occupied.\n# Step3. If there is an outgoing request (#requestOut), iterate from the bottom of the shelf upwards to find the first occupied space. If an occupied space is found, mark it as free and update the product and free space counters. If no occupied space is found, set the error and status to indicate all empty.\n# Step4. If there is no request, keep the current state and output the current values for productNum and libFreeNum.", "name": "FB_WarehouseManagement"}