{"variables": ["1. name: error, type: Bool, initial: None, role: An error flag indicating whether an error has occurred.", "2. name: status, type: Word, initial: None, role: A status code providing more details about the error or success.", "3. name: matrix1, type: Array[*, *] of LReal, initial: None, role: The first matrix to be compared.", "4. name: matrix2, type: Array[*, *] of LReal, initial: None, role: The second matrix to be compared.", "5. name: tempMatrix1LowerBoundRows, type: DInt, initial: None, role: Temporary variable to store the lower bound of rows for matrix1.", "6. name: tempMatrix1LowerBoundColumns, type: DInt, initial: None, role: Temporary variable to store the lower bound of columns for matrix1.", "7. name: tempMatrix1UpperBoundRows, type: DInt, initial: None, role: Temporary variable to store the upper bound of rows for matrix1.", "8. name: tempMatrix1UpperBoundColumns, type: DInt, initial: None, role: Temporary variable to store the upper bound of columns for matrix1.", "9. name: tempMatrix2LowerBoundRows, type: DInt, initial: None, role: Temporary variable to store the lower bound of rows for matrix2.", "10. name: tempMatrix2LowerBoundColumns, type: DInt, initial: None, role: Temporary variable to store the lower bound of columns for matrix2.", "11. name: tempMatrix2UpperBoundRows, type: DInt, initial: None, role: Temporary variable to store the upper bound of rows for matrix2.", "12. name: tempMatrix2UpperBoundColumns, type: DInt, initial: None, role: Temporary variable to store the upper bound of columns for matrix2.", "13. name: tempCounterRows, type: DInt, initial: None, role: Temporary loop counter for iterating over rows.", "14. name: tempCounterColumns, type: DInt, initial: None, role: Temporary loop counter for iterating over columns.", "15. name: ROWS, type: UInt, initial: 1, role: Constant representing the row dimension for array bounds.", "16. name: COLUMNS, type: UInt, initial: 2, role: Constant representing the column dimension for array bounds.", "17. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing no error status code.", "18. name: ERR_MATR1_LOWBOUND_ROWS_MATR2_LOWBOUND_ROWS, type: Word, initial: 16#8200, role: Constant representing an error status code for mismatched lower row bounds.", "19. name: ERR_MATR1_LOWBOUND_COLUMNS_MATR2_LOWBOUND_COLUMNS, type: Word, initial: 16#8201, role: Constant representing an error status code for mismatched lower column bounds.", "20. name: ERR_MATR1_UPPBOUND_ROWS_MATR2_UPPBOUND_ROWS, type: Word, initial: 16#8202, role: Constant representing an error status code for mismatched upper row bounds.", "21. name: ERR_MATR1_UPPBOUND_COLUMNS_MATR2_UPPBOUND_COLUMNS, type: Word, initial: 16#8203, role: Constant representing an error status code for mismatched upper column bounds."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "# Step1. Determine the size of the matrices by finding the lower and upper bounds for rows and columns using LOWER_BOUND and UPPER_BOUND instructions.\n# Step2. Check the lower and upper bounds of both matrices for equality. If they do not match, set the error flag, update the status, and return false.\n# Step3. If the matrix dimensions are equal, iterate through each element of the matrices using nested FOR loops and compare corresponding elements.\n# Step4. If any pair of elements do not match, set the error flag to false, update the status to no error, and return false.\n# Step5. If all elements match, set the result to true, the error flag to false, and the status to no error.\n# Step6. Due to no error handling, set ENO to TRUE.", "name": "LGF_MatrixCompare"}