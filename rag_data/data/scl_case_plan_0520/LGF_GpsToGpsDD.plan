{"variables": ["1. name: gps, type: LGF_typeGPS, initial: None, role: Contains the input GPS data in DMS format that needs to be converted to decimal degrees.", "2. name: error, type: Bool, initial: None, role: Indicates whether an error occurred during the function execution.", "3. name: status, type: Word, initial: None, role: Provides status information of the function execution, including error identification.", "4. name: tempGPS, type: LGF_typeGPS_DD, initial: None, role: Temporary variable to store the converted GPS data in decimal degrees format.", "5. name: tempStatus, type: Word, initial: None, role: Temporary variable to store the current status of the function execution.", "6. name: NORTH1, type: Char, initial: 'n', role: Constant used for comparing latitude direction.", "7. name: NORTH2, type: Char, initial: 'N', role: Constant used for comparing latitude direction.", "8. name: SOUTH1, type: Char, initial: 's', role: Constant used for comparing latitude direction.", "9. name: SOUTH2, type: Char, initial: 'S', role: Constant used for comparing latitude direction.", "10. name: EAST1, type: Char, initial: 'e', role: Constant used for comparing longitude direction.", "11. name: EAST2, type: Char, initial: 'E', role: Constant used for comparing longitude direction.", "12. name: WEST1, type: Char, initial: 'w', role: Constant used for comparing longitude direction.", "13. name: WEST2, type: Char, initial: 'W', role: Constant used for comparing longitude direction.", "14. name: MINUTES_PER_HOUR, type: Real, initial: 60.0, role: Conversion factor from minutes to hours.", "15. name: SECONDS_PER_HOUR, type: Real, initial: 3600.0, role: Conversion factor from seconds to hours.", "16. name: MAX_MIN_OR_SEC_59, type: UInt, initial: 59, role: Maximum valid value for minutes or seconds.", "17. name: DEGREE_0, type: Real, initial: 0.0, role: Placeholder for zero degrees.", "18. name: DEGREE_15, type: Real, initial: 15.0, role: Placeholder for 15 degrees (not used in this code).", "19. name: DEGREE_90, type: Real, initial: 90.0, role: Maximum valid latitude value in degrees.", "20. name: DEGREE_180, type: Real, initial: 180.0, role: Maximum valid longitude value in degrees.", "21. name: DEGREE_360, type: Real, initial: 360.0, role: Full circle in degrees (not used in this code).", "22. name: STATUS_EXECUTION_FINISHED_NO_ERROR, type: Word, initial: 16#0000, role: Status code indicating successful execution.", "23. name: ERR_LATITUDE_DIRECTION, type: Word, initial: 16#8200, role: Error code for invalid latitude direction.", "24. name: ERR_LATITUDE_VALUE, type: Word, initial: 16#8201, role: Error code for invalid latitude value.", "25. name: ERR_LONGITUDE_DIRECTION, type: Word, initial: 16#8202, role: Error code for invalid longitude direction.", "26. name: ERR_LONGITUDE_VALUE, type: Word, initial: 16#8203, role: Error code for invalid longitude value."], "instructions": ["UINT_TO_REAL"], "planning": "# Step1. Initialize the temporary status variable tempStatus to STATUS_EXECUTION_FINISHED_NO_ERROR.\n# Step2. Convert the seconds part of the latitude to decimal degrees and add it to the latitude in decimal degrees.\n# Step3. Convert the minutes part of the latitude to decimal degrees and add it to the latitude in decimal degrees.\n# Step4. Add the degrees part of the latitude to the latitude in decimal degrees.\n# Step5. Check the direction of the latitude. If it is south ('s' or 'S'), negate the latitude value. If it is north ('n' or 'N'), do nothing. If it is neither, set the error code to ERR_LATITUDE_DIRECTION in tempStatus.\n# Step6. Check if the absolute value of the latitude exceeds 90 degrees. If it does, set the error code to ERR_LATITUDE_VALUE in tempStatus.\n# Step7. The longitude conversion is not implemented in the given code, so no further steps are taken for longitude.\n# Step8. Set the error output to TRUE if tempStatus is not equal to STATUS_EXECUTION_FINISHED_NO_ERROR.\n# Step9. Set the status output to the value of tempStatus.\n# Step10. Return the converted GPS data in tempGPS.", "name": "LGF_GpsToGpsDD"}