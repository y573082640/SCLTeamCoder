{"variables": ["1. name: execute, type: Bool, initial: None, role: Input indicating the start of the file write process.", "2. name: fileName, type: String, initial: None, role: Input providing the name of the file including the path.", "3. name: done, type: Bool, initial: False, role: Output indicating the successful completion of the function block's operation.", "4. name: busy, type: Bool, initial: False, role: Output indicating the function block is currently processing.", "5. name: error, type: Bool, initial: False, role: Output indicating an error occurred during the function block's operation.", "6. name: status, type: Word, initial: STATUS_NO_CALL, role: Output providing the status of the function block for error identification.", "7. name: dataLength, type: DInt, initial: 0, role: Output indicating the length of the data written to the file.", "8. name: diagnostics, type: LGF_typeDiagnostics, initial: emptyDiagnostics, role: Structure to store and transfer diagnostic information from the function block.", "9. name: bufferByteArray, type: Array[*] of Byte, initial: None, role: IN/OUT array used to read/write data to the file.", "10. name: data, type: Variant, initial: None, role: IN/OUT data set to be written into the file.", "11. name: statInternal, type: Struct, initial: None, role: Internal structure to store the previous state of execute and the current states of done, busy, error, and diagnostics.", "12. name: instFileWrite, type: FileWriteC, initial: None, role: Instance of the FileWriteC instruction used to write data to the file.", "13. name: statMainState, type: DInt, initial: FB_STATE_NO_PROCESSING, role: Variable to store the current state of the function block's state machine.", "14. name: statParameterDataIsByteArray, type: Bool, initial: False, role: Variable to indicate if the parameter data is a byte array.", "15. name: statAsynchronusMode, type: Bool, initial: False, role: Variable to indicate if the function block is operating in asynchronous mode.", "16. name: statBufferSize, type: DInt, initial: 0, role: Variable to store the size of the buffer.", "17. name: statLengthData, type: DInt, initial: 0, role: Variable to store the length of the data to be written.", "18. name: statLengthFile, type: DInt, initial: 0, role: Variable to store the length of the file after writing.", "19. name: tempExecute, type: Bool, initial: None, role: Temporary variable to store the current value of execute for edge detection.", "20. name: tempExitStateLoop, type: Bool, initial: True, role: Temporary variable used to control the exit of the state loop.", "21. name: tempResult, type: Word, initial: None, role: Temporary variable to store the result of operations.", "22. name: tempBufferPosition, type: DInt, initial: None, role: Temporary variable used to store the current position in the buffer.", "23. name: tempPathPrefix, type: String, initial: None, role: Temporary variable used to store the path prefix for the file."], "instructions": ["FileWriteC"], "planning": "# Step1. Initialize the function block's outputs and internal states.\n# Step2. Check if the function block is triggered by a rising edge of the execute input and if the previous state of diagnostics is STATUS_NO_CALL.\n# Step3. If triggered, set the internal states for done, busy, and error, and initialize the diagnostics structure.\n# Step4. Initialize the subsidiary FBs with FALSE and set the main state to FB_STATE_INIT.\n# Step5. If the diagnostics status is STATUS_NO_CALL, return and do nothing.\n# Step6. Enter the state machine loop.\n# Step7. In the FB_STATE_INIT state, verify the file path, buffer boundary, and parameter data types.\n# Step8. Initialize the file write instruction with FALSE and check for errors.\n# Step9. If no errors, set the main state to FB_STATE_PARAMETER and set the exit state loop variable to the asynchronous mode.\n# Step10. In the FB_STATE_PARAMETER state, check if the parameter data is a byte array and copy the data to the buffer array.\n# Step11. If the parameter data is not a byte array, serialize the data into the buffer array.\n# Step12. If serialization is successful, set the length of the data and set the main state to FB_STATE_FILE_WRITE.\n# Step13. In the FB_STATE_FILE_WRITE state, set the file handler request to TRUE with the file name, offset, length, and data.\n# Step14. If the file write is successful, set the diagnostics status to STATUS_EXECUTION_FINISHED.\n# Step15. If an error occurs during file write, set the diagnostics status to ERR_FILE_WRITE.\n# Step16. If the diagnostics status is STATUS_EXECUTION_FINISHED and done is FALSE, set done to TRUE, busy to FALSE, and error to FALSE.\n# Step17. If an error occurs, set the diagnostics status to the appropriate error code and update the diagnostics structure.\n# Step18. If execute is FALSE and done or error is TRUE, reset the outputs.\n# Step19. Write the static values to the outputs.", "name": "LGF_FileWrite"}