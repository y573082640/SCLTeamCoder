{"variables": ["1. name: addRecipe, type: Bool, initial: None, role: Signal for initiating the addition of a new recipe.", "2. name: deleteRecipe, type: Bool, initial: None, role: Signal for initiating the deletion of a recipe.", "3. name: modifyRecipe, type: Bool, initial: None, role: Signal for initiating the modification of a recipe.", "4. name: queryRecipe, type: Bool, initial: None, role: Signal for initiating the query of a recipe.", "5. name: recipeIn, type: Struct, initial: None, role: Carrier of the input recipe data.", "6. name: recipeAdded, type: Bool, initial: None, role: Indicates successful addition of a recipe.", "7. name: recipeDeleted, type: Bool, initial: None, role: Indicates successful deletion of a recipe.", "8. name: recipeModified, type: Bool, initial: None, role: Indicates successful modification of a recipe.", "9. name: recipeQueryResult, type: Struct, initial: None, role: Carrier of the output recipe query result.", "10. name: error, type: Bool, initial: FALSE, role: Indicates the occurrence of an error.", "11. name: status, type: Word, initial: STATUS_OK, role: Carrier of the status/error code.", "12. name: recipe, type: Array[1..10] of Struct, initial: None, role: Database storing the recipes.", "13. name: freeIndex, type: Int, initial: 0, role: Index of the first free position in the recipe database.", "14. name: foundIndex, type: Int, initial: 0, role: Index of the found recipe in the database.", "15. name: index, type: Int, initial: None, role: Temporary loop iteration variable.", "16. name: found, type: Bool, initial: FALSE, role: Indicates if a recipe was found in the database."], "instructions": ["# No SCL instructions are used in the provided code."], "planning": "# Step1. Initialize the output indicators and status code at the beginning of each logic execution.\n# Step2. Check the addRecipe signal. If true, search for a duplicate or a free index in the recipe database.\n# Step3. If a duplicate is found, report an error with status code STATUS_DUPLICATE_ID. If no free space is found, report an error with status code STATUS_NO_SPACE.\n# Step4. If no errors are found, add the recipe to the database at the free index and set the recipeAdded indicator to TRUE.\n# Step5. If the deleteRecipe signal is true, search for the recipe in the database and delete it if found, otherwise report an error with status code STATUS_DELETE_NOT_FOUND.\n# Step6. If the modifyRecipe signal is true, search for the recipe in the database and modify it if found, otherwise report an error with status code STATUS_MODIFY_NOT_FOUND.\n# Step7. If the queryRecipe signal is true, search for the recipe in the database and output it if found, otherwise report an error with status code STATUS_NOT_FOUND.", "name": "FB_RecipeManager"}