{"variables": ["1. name: sortDirection, type: Bool, initial: None, role: Specifies the sorting order, FALSE for ascending, TRUE for descending.", "2. name: error, type: Bool, initial: None, role: Indicates if an error occurred during the execution of the function block.", "3. name: status, type: Word, initial: None, role: Represents the status of the function block execution, indicating any errors.", "4. name: array, type: Array[*] of LReal, initial: None, role: The array to be sorted, passed by reference to be modified in place.", "5. name: tempArray, type: Array[1..#MAX_ARRAY_ELEMENTS] of LReal, initial: None, role: Temporary working storage for the array to be sorted.", "6. name: tempLowerLimit, type: DInt, initial: None, role: Temporary variable to store the lower bound of the array.", "7. name: tempUpperLimit, type: DInt, initial: None, role: Temporary variable to store the upper bound of the array.", "8. name: tempNoOfElements, type: DInt, initial: None, role: Stores the number of elements in the array.", "9. name: tempGap, type: DInt, initial: None, role: Represents the current gap in the Shell sort algorithm.", "10. name: tempLoopIndex, type: DInt, initial: None, role: Loop index variable for iterating through the array.", "11. name: tempExchangeIndex, type: DInt, initial: None, role: Index used for swapping elements in the sorting process.", "12. name: tempExchangeVariable, type: LReal, initial: None, role: Temporary variable used for swapping elements in the sorting process.", "13. name: tempArrayOffset, type: DInt, initial: None, role: Offset for adjusting the index range of the array."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "# Step1. Initialize the input array size calculation by finding the lower and upper bounds.\n# Step2. Calculate the number of elements in the array.\n# Step3. Calculate the offset to shift the array index range.\n# Step4. Check if the number of elements exceeds the maximum limit or if the array is empty, and set the error status accordingly.\n# Step5. Copy the input array to the temporary working array with adjusted index.\n# Step6. Initialize the gap size for the Shell sort algorithm and calculate the maximum gap size.\n# Step7. Perform the Shell sort algorithm by iterating through the array with decreasing gap sizes.\n# Step8. Depending on the sortDirection, sort the array in ascending or descending order.\n# Step9. Write the sorted elements back from the temporary array to the input/output array.\n# Step10. Set the error status to FALSE and status to STATUS_NO_ERROR indicating successful execution.", "name": "LGF_ShellSort_LReal"}