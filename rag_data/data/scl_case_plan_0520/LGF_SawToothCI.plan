{"variables": ["1. name: amplitude, type: Real, initial: 1.0, role: Defines the amplitude of the sawtooth signal.", "2. name: offset, type: Real, initial: None, role: Defines the offset of the sawtooth signal.", "3. name: periode, type: UDInt, initial: 1000, role: Defines the period of the sawtooth signal.", "4. name: phaseShift, type: Real, initial: None, role: Defines the phase shift of the sawtooth signal.", "5. name: callOB, type: OB_CYCLIC, initial: None, role: The Cyclic Interrupt OB that triggers the function.", "6. name: reset, type: Bool, initial: FALSE, role: Input to reset the signal generator.", "7. name: value, type: Real, initial: None, role: Output of the current value of the sawtooth signal.", "8. name: error, type: Bool, initial: FALSE, role: Indicates if there is an error in execution.", "9. name: status, type: Word, initial: None, role: Provides the status of the function block or error identification.", "10. name: subFunctionStatus, type: Word, initial: None, role: Status or return value of called function blocks or system blocks.", "11. name: statCounter, type: UDInt, initial: None, role: Internal counter for the function block.", "12. name: tempCycleTime, type: UDInt, initial: None, role: Temporary variable to store the cycle time of the calling Cyclic Interrupt OB.", "13. name: tempCyclePhase, type: UDInt, initial: None, role: Temporary variable to store the cycle phase of the calling Cyclic Interrupt OB.", "14. name: tempCycleStatus, type: Word, initial: None, role: Temporary variable to store the status from the QRY_CINT instruction.", "15. name: tempReadTimeStatus, type: Int, initial: None, role: Temporary variable to store the read time status from the QRY_CINT instruction.", "16. name: tempValue, type: Real, initial: None, role: Temporary variable used in the sawtooth signal calculation.", "17. name: tempPhaseShift, type: Real, initial: None, role: Temporary variable used in the phase shift calculation.", "18. name: SECOND_IN_MS, type: UDInt, initial: 1000, role: Constant for the number of milliseconds in a second.", "19. name: ZERO, type: Int, initial: 0, role: Constant representing zero.", "20. name: SLOPE, type: Real, initial: 2.0, role: Constant representing the slope of the sawtooth signal.", "21. name: SUB_STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing no error in sub-function status.", "22. name: STATUS_FINISHED_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing no error in execution status.", "23. name: QRY_CINT_OB_UNAVAILABLE, type: Word, initial: 16#0000, role: Constant representing the OB unavailable error in QRY_CINT.", "24. name: ERR_OB_UNAVAILABLE, type: Word, initial: 16#8600, role: Constant representing the OB unavailable error.", "25. name: ERR_QRY_CINT, type: Word, initial: 16#8601, role: Constant representing the QRY_CINT error."], "instructions": ["QRY_CINT", "UDINT_TO_REAL", "REAL_TO_UDINT", "INT_TO_WORD"], "planning": "# Step1. Get the sample time using the QRY_CINT instruction and store the result in tempCycleTime, tempCyclePhase, and tempCycleStatus.\n# Step2. Check for errors after the QRY_CINT instruction, if any, set the error flags and return from the function block.\n# Step3. If the reset input is true, reset the statCounter and tempValue to zero.\n# Step4. If not resetting, increment the statCounter with the cycle time and calculate the modulo with the period to keep it within the desired range.\n# Step5. Calculate the true phase shift with modulo and use it to compute the sawtooth signal's value with the given formula.\n# Step6. Add the offset to the calculated sawtooth signal's value and assign it to the output value.\n# Step7. Set the error flag to false, update the status to no error, and ensure the ENO is set to true to indicate successful execution.", "name": "LGF_SawToothCI"}