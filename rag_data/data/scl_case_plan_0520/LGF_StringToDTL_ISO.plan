{"variables": ["1. name: date, type: String, initial: None, role: The input string representing the date and time to be converted.", "2. name: error, type: Bool, initial: None, role: An output indicating whether an error occurred during execution.", "3. name: status, type: Word, initial: None, role: An output that provides status information or error identification.", "4. name: tempIndex, type: DInt, initial: None, role: A temporary variable used for looping over characters in the nanosecond string.", "5. name: tempDateAndTime, type: DTL, initial: None, role: A temporary variable used to store and manipulate the converted date and time.", "6. name: tempDateString, type: String, initial: None, role: A temporary variable used to hold substring values during conversion."], "instructions": ["MID", "STRG_VAL"], "planning": "# Step1. Check if the input date string is empty, if yes, set error to true, status to STATUS_NO_JOB, and return an initial DTL value.\n# Step2. Extract and convert the year component from the input string and validate its range. If invalid, set error to true, status to ERR_FORMAT_YEAR, and return an initial DTL value.\n# Step3. Extract and convert the month component from the input string and validate its range. If invalid, set error to true, status to ERR_FORMAT_MONTH, and return an initial DTL value.\n# Step4. Extract and convert the day component from the input string and validate its range. If invalid, set error to true, status to ERR_FORMAT_DAY, and return an initial DTL value.\n# Step5. Extract and convert the hour component from the input string and validate its range. If invalid, set error to true, status to ERR_FORMAT_HOUR, and return an initial DTL value.\n# Step6. Extract and convert the minute component from the input string and validate its range. If invalid, set error to true, status to ERR_FORMAT_MINUTE, and return an initial DTL value.\n# Step7. Extract and convert the second component from the input string and validate its range. If invalid, set error to true, status to ERR_FORMAT_SECOND, and return an initial DTL value.\n# Step8. Extract the nanosecond component from the input string, replace any blank spaces with zeros, and convert to a numeric value. Validate its range. If invalid, set error to true, status to ERR_FORMAT_NANOSECOND, and return an initial DTL value.\n# Step9. Adjust the weekday of the tempDateAndTime by adding zero milliseconds.\n# Step10. Assign the tempDateAndTime to the function output, set error to false, and status to STATUS_FINISHED_NO_ERROR.", "name": "LGF_StringToDTL_ISO"}