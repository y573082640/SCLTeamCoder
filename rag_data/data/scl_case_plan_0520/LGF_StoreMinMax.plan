{"variables": ["1. name: value, type: LReal, initial: 0.0, role: An input value to be compared for finding min and max.", "2. name: reset, type: Bool, initial: false, role: A flag to indicate whether the min/max history should be reset.", "3. name: minValue, type: LReal, initial: 0.0, role: Output parameter representing the minimum value since first call or reset.", "4. name: maxValue, type: LReal, initial: 0.0, role: Output parameter representing the maximum value since first call or reset.", "5. name: statStoreMinValue, type: LReal, initial: #LREAL_MAX, role: Internal storage for the current minimum value.", "6. name: statStoreMaxValue, type: LReal, initial: #LREAL_MIN, role: Internal storage for the current maximum value.", "7. name: LREAL_MAX, type: LReal, initial: 1.7976931348623157e+308, role: Constant representing the maximum possible LReal value.", "8. name: LREAL_MIN, type: LReal, initial: -1.7976931348623157e+308, role: Constant representing the minimum possible LReal value."], "instructions": ["# There are no SCL instructions used in this case code."], "planning": "# Step1. Initialize the internal storage for min and max values with the largest and smallest possible LReal values respectively.\n# Step2. If the input 'reset' is TRUE, reset the internal storage for min and max values to the largest/smallest possible LReal values.\n# Step3. Compare the input 'value' with the internal stored min value. If 'value' is less than the stored min value, update the stored min value.\n# Step4. Compare the input 'value' with the internal stored max value. If 'value' is greater than the stored max value, update the stored max value.\n# Step5. Assign the internal stored min and max values to the output parameters 'minValue' and 'maxValue'.\n# Step6. Set the ENO to TRUE indicating no error occurred.", "name": "LGF_StoreMinMax"}