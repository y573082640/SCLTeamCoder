{"variables": ["1. name: sortDirection, type: Bool, initial: None, role: Determines the sorting order, ascending if FALSE, descending if TRUE.", "2. name: error, type: Bool, initial: None, role: Indicates whether an error occurred during the execution.", "3. name: status, type: Word, initial: None, role: Provides the status of the execution, used for error identification.", "4. name: array, type: Array[*] of UDInt, initial: None, role: The array to be sorted, input/output variable.", "5. name: tempArray, type: Array[1..#MAX_ARRAY_ELEMENTS] of UDInt, initial: None, role: Temporary array used to store a copy of the input array for sorting purposes.", "6. name: tempLowerLimit, type: DInt, initial: None, role: Temporary variable to store the lower limit of the array.", "7. name: tempUpperLimit, type: DInt, initial: None, role: Temporary variable to store the upper limit of the array.", "8. name: tempNoOfElements, type: DInt, initial: None, role: Temporary variable to store the number of elements in the array.", "9. name: tempGap, type: DInt, initial: None, role: Temporary variable used in the Shell sort algorithm to define the current gap.", "10. name: tempLoopIndex, type: DInt, initial: None, role: Temporary loop index used for iterating over array elements.", "11. name: tempExchangeIndex, type: DInt, initial: None, role: Temporary variable used for swapping elements in the array.", "12. name: tempExchangeVariable, type: UDInt, initial: None, role: Temporary variable used to hold an element value during swapping.", "13. name: tempArrayOffset, type: DInt, initial: None, role: Temporary variable used to calculate the offset for indexing the tempArray."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "# Step1. Calculate the lower and upper limits of the input array.\n# Step2. Calculate the number of elements in the array.\n# Step3. Check if the array has more elements than the maximum allowed or if it's empty, set error status accordingly.\n# Step4. If error status is set, terminate the function block execution.\n# Step5. Copy the input array to a temporary array, adjusting for indexing.\n# Step6. Initialize the gap for the Shell sort algorithm.\n# Step7. Calculate the maximum gap size based on the number of elements.\n# Step8. Perform the sorting using nested loops and the gap value, adjusting elements positions accordingly.\n# Step9. Once the gap is reduced to a threshold, the sorting is considered complete.\n# Step10. Copy the sorted elements back from the temporary array to the input/output array.\n# Step11. Set the execution status to no error.\n# Step12. Disable error handling by setting ENO to TRUE.", "name": "LGF_ShellSort_UDInt"}