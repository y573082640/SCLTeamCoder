{"variables": ["1. name: value, type: LReal, initial: None, role: The actual value to be checked against the tolerance range.", "2. name: setpoint, type: LReal, initial: None, role: The target value for the tolerance check.", "3. name: tolerance, type: LReal, initial: None, role: The tolerance percentage around the setpoint.", "4. name: overHighLimit, type: Bool, initial: None, role: Indicates if the value exceeds the upper tolerance limit.", "5. name: belowLowLimit, type: Bool, initial: None, role: Indicates if the value is below the lower tolerance limit.", "6. name: error, type: Bool, initial: None, role: Flag to indicate the occurrence of an error.", "7. name: status, type: Word, initial: None, role: Status code indicating the result of the operation.", "8. name: tempHighLimit, type: LReal, initial: None, role: Temporary variable to hold the calculated upper limit.", "9. name: tempLowLimit, type: LReal, initial: None, role: Temporary variable to hold the calculated lower limit.", "10. name: tempValueOverHighLimit, type: Bool, initial: None, role: Temporary flag to check if the value exceeds the high limit.", "11. name: tempValueUnderLowLimit, type: Bool, initial: None, role: Temporary flag to check if the value is under the low limit.", "12. name: ONE, type: LReal, initial: 1.0, role: Constant value representing 1.", "13. name: ONEHUNDRET_PROCENT, type: LReal, initial: 100.0, role: Constant value representing 100%.", "14. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing the status for no error.", "15. name: ERR_RANGE_LIMIT_VALUES, type: Word, initial: 16#8401, role: Constant representing an error status due to invalid range limit values."], "instructions": [""], "planning": "# Step1. Initialize the constants ONE, ONEHUNDRET_PROCENT, STATUS_NO_ERROR, and ERR_RANGE_LIMIT_VALUES.\n# Step2. Calculate the upper and lower limits based on the setpoint and tolerance values.\n# Step3. Check if the calculated limits are outside the valid data tolerance range and set error status accordingly.\n# Step4. Evaluate if the input value exceeds the high limit or is below the low limit.\n# Step5. Determine if the value is within the tolerance range by negating the OR operation of tempValueOverHighLimit and tempValueUnderLowLimit flags.\n# Step6. Write the results to the output parameters overHighLimit, belowLowLimit, error, and status.\n# Step7. Set ENO to TRUE indicating no error occurred during execution.", "name": "LGF_IsValueInTolerance"}