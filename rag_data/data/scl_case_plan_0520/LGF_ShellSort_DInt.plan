{"variables": ["1. name: sortDirection, type: Bool, initial: None, role: Determines the sorting order, FALSE for ascending, TRUE for descending.", "2. name: error, type: Bool, initial: None, role: Indicates if an error occurred during the execution.", "3. name: status, type: Word, initial: None, role: Represents the status of the function block, used for error identification.", "4. name: array, type: Array[*] of DInt, initial: None, role: The array to be sorted, passed by reference to store the sorted result.", "5. name: tempArray, type: Array[1..#MAX_ARRAY_ELEMENTS] of DInt, initial: None, role: Temporary array used to store a copy of the input array for sorting.", "6. name: tempLowerLimit, type: DInt, initial: None, role: Temporary variable to store the lower limit of the array.", "7. name: tempUpperLimit, type: DInt, initial: None, role: Temporary variable to store the upper limit of the array.", "8. name: tempNoOfElements, type: DInt, initial: None, role: Temporary variable to store the number of elements in the array.", "9. name: tempGap, type: DInt, initial: None, role: Temporary variable to store the current gap in the Shell sort algorithm.", "10. name: tempLoopIndex, type: DInt, initial: None, role: Temporary loop index variable used in the FOR loops.", "11. name: tempExchangeIndex, type: DInt, initial: None, role: Temporary variable used to swap elements in the array.", "12. name: tempExchangeVariable, type: DInt, initial: None, role: Temporary variable used to hold a value during element swapping.", "13. name: tempArrayOffset, type: DInt, initial: None, role: Temporary variable used to adjust the array index for the 1-based tempArray."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "# Step1. Initialize the temporary variables for array bounds, number of elements, and index offset.\n# Step2. Check if the array has more elements than the maximum allowed or if it is empty, set error status accordingly and return.\n# Step3. Copy the input array to a temporary local array with index adjustment.\n# Step4. Initialize the gap for the Shell sort and calculate the maximum gap size.\n# Step5. Perform the sorting algorithm using nested loops and conditional statements for comparing and swapping elements according to the specified sort direction.\n# Step6. Copy the sorted temporary array back to the input/output array.\n# Step7. Set the error status to FALSE and the status to 'No Error'.", "name": "LGF_ShellSort_DInt"}