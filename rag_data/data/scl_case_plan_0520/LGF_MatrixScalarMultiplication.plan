{"variables": ["1. name: scalar, type: LReal, initial: None, role: The scalar value where the matrix is multiplied.", "2. name: error, type: Bool, initial: None, role: The error flag indicating if the operation was successful or not.", "3. name: status, type: Word, initial: None, role: Status code indicating the result of the operation.", "4. name: matrixInput, type: Array[*, *] of LReal, initial: None, role: The input matrix to be multiplied.", "5. name: matrixResult, type: Array[*, *] of LReal, initial: None, role: The result matrix after the multiplication.", "6. name: tempMatrixInLowerBoundRows, type: DInt, initial: None, role: Temp variable to store the lower bound of rows for matrixInput.", "7. name: tempMatrixInLowerBoundColumns, type: DInt, initial: None, role: Temp variable to store the lower bound of columns for matrixInput.", "8. name: tempMatrixInUpperBoundRows, type: DInt, initial: None, role: Temp variable to store the upper bound of rows for matrixInput.", "9. name: tempMatrixInUpperBoundColumns, type: DInt, initial: None, role: Temp variable to store the upper bound of columns for matrixInput.", "10. name: tempResultMatrixLowerBoundRows, type: DInt, initial: None, role: Temp variable to store the lower bound of rows for matrixResult.", "11. name: tempResultMatrixLowerBoundColumns, type: DInt, initial: None, role: Temp variable to store the lower bound of columns for matrixResult.", "12. name: tempResultMatrixUpperBoundRows, type: DInt, initial: None, role: Temp variable to store the upper bound of rows for matrixResult.", "13. name: tempResultMatrixUpperBoundColumns, type: DInt, initial: None, role: Temp variable to store the upper bound of columns for matrixResult.", "14. name: tempRowIndex, type: DInt, initial: None, role: Temporary variable used for iteration over the rows of the matrix.", "15. name: tempColumIndex, type: DInt, initial: None, role: Temporary variable used for iteration over the columns of the matrix."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "# Step1. Determine the size of the input and result matrices by finding the lower and upper bounds for rows and columns using LOWER_BOUND and UPPER_BOUND instructions.\n# Step2. Compare the dimensions of the input and result matrices. If they do not match, set the error flag and appropriate status code, then return.\n# Step3. If the dimensions match, proceed to multiply each element in the input matrix by the scalar value and store the result in the corresponding location in the result matrix using nested FOR loops.\n# Step4. Set the error flag to FALSE and status code to STATUS_NO_ERROR to indicate successful operation.\n# Step5. Due to no error handling with ENO, force ENO to TRUE.", "name": "LGF_MatrixScalarMultiplication"}