{"variables": ["1. name: amplitude, type: Real, initial: 1.0, role: Specifies the amplitude of the rectangular signal.", "2. name: offset, type: Real, initial: None, role: Specifies the offset of the rectangular signal.", "3. name: periode, type: UDInt, initial: 1000, role: Specifies the period of the rectangular signal.", "4. name: phaseShift, type: Real, initial: None, role: Specifies the phase shift of the rectangular signal.", "5. name: callOB, type: OB_CYCLIC, initial: None, role: The calling Cyclic Interrupt OB.", "6. name: reset, type: Bool, initial: None, role: Input to reset the signal generator.", "7. name: value, type: Real, initial: None, role: Output current value of the rectangular signal.", "8. name: error, type: Bool, initial: None, role: Output indicating if there's an error.", "9. name: status, type: Word, initial: 16#0, role: Output status code.", "10. name: subFunctionStatus, type: Word, initial: 16#0, role: Status or return value of called FB's, FC's and system blocks.", "11. name: statCounter, type: UDInt, initial: None, role: Internal counter for signal generation calculations.", "12. name: tempCycleTime, type: UDInt, initial: None, role: Temporary variable to store cycle time of the OB.", "13. name: tempCyclePhase, type: UDInt, initial: None, role: Temporary variable to store cycle phase of the OB.", "14. name: tempCycleStatus, type: Word, initial: None, role: Temporary variable to store status after querying cycle time.", "15. name: tempReadTimeStatus, type: Int, initial: None, role: Temporary variable to store the return status of the QRY_CINT function.", "16. name: tempValue, type: Real, initial: None, role: Temporary variable to calculate the current signal value.", "17. name: tempPhaseShift, type: UDInt, initial: None, role: Temporary variable to store the calculated phase shift."], "instructions": ["QRY_CINT", "REAL_TO_UDINT", "MOD", "INT_TO_WORD"], "planning": "# Step1. Query the cycle time of the calling Cyclic Interrupt OB using the QRY_CINT instruction and store the result in tempCycleTime, tempCyclePhase, and tempCycleStatus. If an error occurs during the query, set the error flag and status accordingly and exit.\n# Step2. Check if the reset input is set, if so reset the statCounter and set the tempValue to zero.\n# Step3. If not resetting, increment the statCounter by the cycle time divided by the number of milliseconds in a second, and then take the modulo with the period to keep it within the signal period range.\n# Step4. Calculate the tempPhaseShift by converting the phaseShift input to an unsigned integer and taking the modulo with the period.\n# Step5. Determine the output signal value based on the position of the statCounter within the period and the phase shift. Add the amplitude to the offset if within the high part of the signal, otherwise subtract the amplitude.\n# Step6. Assign the calculated tempValue to the output value, set the error flag to FALSE, and set the status to indicate no error.\n# Step7. Set the ENO to TRUE to indicate no error occurred.", "name": "LGF_RectangleCI"}