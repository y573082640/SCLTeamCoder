{"variables": ["1. name: error, type: Bool, initial: None, role: An error flag indicating the presence of an error during matrix subtraction.", "2. name: status, type: Word, initial: None, role: A status code that provides specific error information when an error occurs.", "3. name: matrix1, type: Array[*, *] of LReal, initial: None, role: The first input matrix which is the minuend in the subtraction operation.", "4. name: matrix2, type: Array[*, *] of LReal, initial: None, role: The second input matrix which is the subtrahend in the subtraction operation.", "5. name: matrixResult, type: Array[*, *] of LReal, initial: None, role: The result matrix which will store the subtraction result of matrix1 and matrix2.", "6. name: tempMatrix1LowerBoundRows, type: DInt, initial: None, role: Temporary variable to store the lower bound of rows for matrix1.", "7. name: tempMatrix1LowerBoundColumns, type: DInt, initial: None, role: Temporary variable to store the lower bound of columns for matrix1.", "8. name: tempMatrix1UpperBoundRows, type: DInt, initial: None, role: Temporary variable to store the upper bound of rows for matrix1.", "9. name: tempMatrix1UpperBoundColumns, type: DInt, initial: None, role: Temporary variable to store the upper bound of columns for matrix1.", "10. name: tempMatrix2LowerBoundRows, type: DInt, initial: None, role: Temporary variable to store the lower bound of rows for matrix2.", "11. name: tempMatrix2LowerBoundColumns, type: DInt, initial: None, role: Temporary variable to store the lower bound of columns for matrix2.", "12. name: tempMatrix2UpperBoundRows, type: DInt, initial: None, role: Temporary variable to store the upper bound of rows for matrix2.", "13. name: tempMatrix2UpperBoundColumns, type: DInt, initial: None, role: Temporary variable to store the upper bound of columns for matrix2.", "14. name: tempResultMatrixLowerBoundRows, type: DInt, initial: None, role: Temporary variable to store the lower bound of rows for the result matrix.", "15. name: tempResultMatrixLowerBoundColumns, type: DInt, initial: None, role: Temporary variable to store the lower bound of columns for the result matrix.", "16. name: tempResultMatrixUpperBoundRows, type: DInt, initial: None, role: Temporary variable to store the upper bound of rows for the result matrix.", "17. name: tempResultMatrixUpperBoundColumns, type: DInt, initial: None, role: Temporary variable to store the upper bound of columns for the result matrix.", "18. name: tempCounterRows, type: DInt, initial: None, role: Temporary loop counter for iterating over the rows of the matrices.", "19. name: tempCounterColumns, type: DInt, initial: None, role: Temporary loop counter for iterating over the columns of the matrices."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "# Step1. Declare the necessary variables and constants for the function.\n# Step2. Get the lower and upper bounds of rows and columns for all matrices.\n# Step3. Check the lower and upper bounds of the matrices to ensure they are compatible for subtraction.\n# Step4. If any dimension mismatch is found, set the error flag, update the status code, and exit the function.\n# Step5. If all dimensions are compatible, iterate through each element of the matrices using nested FOR loops.\n# Step6. Inside the loops, subtract the corresponding elements of matrix2 from matrix1 and store the result in matrixResult.\n# Step7. After completing the subtraction, set the error flag to FALSE and the status code to STATUS_NO_ERROR.\n# Step8. Disable the ENO mechanism by setting ENO to TRUE, as error handling is done using error and status variables.", "name": "LGF_MatrixSubtraction"}