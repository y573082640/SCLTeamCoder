{"variables": ["1. name: value, type: DWord, initial: None, role: The input DWORD where the bit has to be reset.", "2. name: bitNo, type: USInt, initial: None, role: The bit number to reset in the \"value\" parameter.", "3. name: BINARY_ONES, type: DWord, initial: 16#FFFFFFFF, role: A constant representing all bits set to 1 in a DWORD.", "4. name: TRUE_BOOL_BIT, type: DWord, initial: 16#0001, role: A constant representing a single true bit which can be shifted into the desired position.", "5. name: MAX_NO_OF_BITS, type: USInt, initial: 32, role: A constant representing the maximum number of bits in a DWORD."], "instructions": ["SHL", "XOR", "AND"], "planning": "# Step1. Define constants required for the logic to reset the bit.\n# Step2. Calculate the bit mask by shifting the TRUE_BOOL_BIT left by the bit number modulo MAX_NO_OF_BITS.\n# Step3. Use XOR to flip the calculated bit in BINARY_ONES and create a mask where only the bit to be reset is 0.\n# Step4. Use AND between the original value and the XOR result to reset the desired bit while keeping the rest unchanged.\n# Step5. Since no error handling is implemented, set ENO to TRUE.", "name": "LGF_BitReset"}