{"variables": ["1. name: initValue, type: Byte, initial: 16#00, role: Start value for the CRC calculation.", "2. name: mask, type: Byte, initial: 16#00, role: Generator polynomial for the CRC calculation.", "3. name: noOfElements, type: UInt, initial: 0, role: Number of elements to be used in CRC calculation.", "4. name: array, type: Array[*] of Byte, initial: None, role: Data stream for which the CRC value will be calculated.", "5. name: error, type: Bool, initial: None, role: Error flag indicating status of CRC calculation.", "6. name: status, type: Word, initial: None, role: Status code for error handling.", "7. name: tempCRC, type: Byte, initial: None, role: Temporary variable for CRC calculation.", "8. name: tempLowerLimit, type: DInt, initial: None, role: Temporary variable for calculation of the lower limit of the array.", "9. name: tempUpperLimit, type: DInt, initial: None, role: Temporary variable for calculation of the upper limit of the array.", "10. name: tempIndexArray, type: DInt, initial: None, role: Index variable for iterating over the array.", "11. name: tempIndexCRC, type: DInt, initial: None, role: Index variable for CRC calculation loop."], "instructions": ["XOR", "SHL"], "planning": "# Step1. Initialize the temporary CRC variable tempCRC with the initial value provided.\n# Step2. Calculate the lower and upper limits of the array (tempLowerLimit, tempUpperLimit).\n# Step3. Check if the noOfElements is greater than zero and does not exceed the array size. If it does, set an error and exit.\n# Step4. Iterate through the array from the lower to the upper limit using the tempIndexArray variable.\n# Step5. Within each iteration of the array, perform an XOR operation between the tempCRC and the current array element.\n# Step6. For each bit in the byte (8 bits), check the most significant bit (MSB) and if set, perform a left shift and XOR with the mask polynomial. If not set, just perform the left shift.\n# Step7. After iterating through the array and bits, assign the calculated CRC value to the function return value LGF_CalcCRC8.\n# Step8. Set the status to STATUS_NO_ERROR, clear the error flag, and set ENO to TRUE indicating successful execution without errors.", "name": "LGF_CalcCRC8"}