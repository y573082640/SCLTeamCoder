{"variables": ["1. name: frequency, type: Real, initial: None, role: The input frequency for generating pulses.", "2. name: impulse, type: Bool, initial: None, role: The output signal of the pulse generator.", "3. name: countdown, type: Time, initial: None, role: The time remaining until the next pulse.", "4. name: instTofTimePulse, type: TOF_TIME, initial: None, role: Timer instance used for pulse generation.", "5. name: statFrequencyOld, type: Real, initial: None, role: Stores the old frequency value to detect changes.", "6. name: statTimePulse, type: Time, initial: None, role: Stores the calculated time for one pulse period.", "7. name: tempImpulse, type: Bool, initial: None, role: Temporary variable to store the current state of the pulse signal.", "8. name: tempCountdown, type: Time, initial: None, role: Temporary variable to store the countdown time.", "9. name: ZERO, type: Real, initial: 0.0, role: Constant value representing zero.", "10. name: ZERO_TIME, type: Time, initial: T#0ms, role: Constant value representing zero time.", "11. name: THOUSAND, type: Real, initial: 1000.0, role: Constant value representing one thousand.", "12. name: THOUSAND_SECONDS, type: Time, initial: t#1000s, role: Constant value representing one thousand seconds."], "instructions": ["TOF_TIME"], "planning": "# Step1. Check if the input frequency is less than or equal to zero. If it is, set the pulse output to FALSE and countdown to zero.\n# Step2. If the frequency input has changed, calculate the new pulse period time and update the stored frequency.\n# Step3. Use the TOF_TIME timer to generate the pulse signal by toggling its state based on the timer's output.\n# Step4. Calculate the countdown time by subtracting the elapsed time of the timer from the pulse period time.\n# Step5. Assign the calculated pulse signal and countdown time to the output variables impulse and countdown.\n# Step6. Set ENO to TRUE, indicating no error has occurred.", "name": "LGF_Impulse"}