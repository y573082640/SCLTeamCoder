{"variables": ["1. name: value, type: LReal, initial: None, role: An input value to be checked to determine whether it is within the defined value range.", "2. name: setpoint, type: LReal, initial: None, role: The set point for the value range check.", "3. name: range, type: LReal, initial: None, role: The range within which the setpoint should lie.", "4. name: overHighLimit, type: Bool, initial: None, role: An output indicating if the value is greater than the upper limit.", "5. name: belowLowLimit, type: Bool, initial: None, role: An output indicating if the value is less than the lower limit.", "6. name: error, type: Bool, initial: None, role: An output indicating if an error occurred during execution.", "7. name: status, type: Word, initial: None, role: An output representing the status or error identification of the function block.", "8. name: tempHighLimit, type: LReal, initial: None, role: A temporary variable to store the calculated upper limit value.", "9. name: tempLowLimit, type: LReal, initial: None, role: A temporary variable to store the calculated lower limit value.", "10. name: tempValueOverHighLimit, type: Bool, initial: None, role: A temporary boolean indicating if the value is over the high limit.", "11. name: tempValueUnderLowLimit, type: Bool, initial: None, role: A temporary boolean indicating if the value is under the low limit.", "12. name: HALF, type: LReal, initial: 0.5, role: A constant used to calculate the upper and lower limits.", "13. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: A constant representing no error in the function block.", "14. name: ERR_RANGE_LIMIT_VALUES, type: Word, initial: 16#8401, role: A constant representing an error code for invalid range limit values."], "instructions": ["ABS"], "planning": "# Step1. Calculate the high and low limits using the setpoint and range.\n# Step2. Check if an error has already occurred (ENO = false), if so, set the error flag and corresponding status, then exit the function.\n# Step3. Determine if the value is higher than the high limit or lower than the low limit and store the results in temporary boolean variables.\n# Step4. Write the results to the outputs: If the value is within the range, set the return value to TRUE; otherwise, set it to FALSE. Also, set the overHighLimit and belowLowLimit flags accordingly.\n# Step5. Set the error flag to FALSE and status to no error.\n# Step6. Set ENO to TRUE, indicating no error in the execution of the function block.", "name": "LGF_IsValueInRange"}