FUNCTION "RandomRange_DInt" : DInt
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      minValue : DInt;
      maxValue : DInt;
   END_VAR

   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_TEMP 
      tempTime  : DTL;
      tempNanoSecondInDWord : DWord;
      tempTimeStatus : Word;
      tempRandomValue : DWord;
      tempNormReal : Real;
   END_VAR

   VAR CONSTANT 
      ZERO : DInt := 0;
      MAX_UDINT : UDInt := 4_294_967_295;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      ERR_MAX_LESS_MIN : Word := 16#8200;
      ERR_RD_SYS_T : Word := 16#8600;
   END_VAR


BEGIN
	REGION Block info header
	    //=============================================================================
	    // Title:            RandomRange_DInt
	    // Comment/Function: This function generates random numbers in defined limits (Datatype DInt)
	    
	    //=============================================================================
	END_REGION Block info header
	
	REGION Validation
	    // Check if the maximal Value is less than the minimal value
	    IF (#minValue > #maxValue) THEN
	        #error := true;
	        #status := #ERR_MAX_LESS_MIN;
	        
	        #RandomRange_DInt := #ZERO;
	        RETURN;
	    END_IF;
	    
	    // Read system time
	    #tempTimeStatus := INT_TO_WORD(RD_SYS_T(#tempTime));
	    
	    // Check return variable for error
	    IF (#tempTimeStatus <> #SUB_STATUS_NO_ERROR) THEN
	        #error := true;
	        #status := #ERR_RD_SYS_T;
	        
	        #RandomRange_DInt := #ZERO;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION Calculating random number
	    // Converting to double word so individual bytes can be addressed
	    #tempNanoSecondInDWord := UDINT_TO_DWORD(#tempTime.NANOSECOND);
	    
	    // Callculate a random-start-value depending on the time
	    #tempRandomValue.%B3 := #tempNanoSecondInDWord.%B0;
	    #tempRandomValue.%B2 := #tempNanoSecondInDWord.%B1;
	    #tempRandomValue.%B1 := #tempNanoSecondInDWord.%B2;
	    #tempRandomValue.%B0 := #tempNanoSecondInDWord.%B3;
	    
	    // Norm the calculated random number: 0.0 <= #tempNormReal <= 1.0
	    #tempNormReal := UDINT_TO_REAL(DWORD_TO_UDINT(#tempRandomValue)) / UDINT_TO_REAL(#MAX_UDINT);
	    
	    // Scale the tempNormReal to be in the range of maxValue and minValue
	    #RandomRange_DInt := REAL_TO_DINT((#tempNormReal * DINT_TO_REAL(#maxValue - #minValue) + DINT_TO_REAL(#minValue)));
	    
	    #error := false;
	    #status := #STATUS_FINISHED_NO_ERROR;
	    
	    // ENO mechanism is not used
	    ENO := TRUE;
	END_REGION
	
END_FUNCTION

