FUNCTION "LGF_AverageAndDeviation" : Void
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_AverageAndDeviation
   VAR_INPUT 
      variableArray : Array[*] of LReal;
   END_VAR

   VAR_OUTPUT 
      arithmeticAverage : LReal;
      standardDeviation : LReal;
   END_VAR

   VAR_TEMP 
      tempLowerBound : Int;
      tempUpperBound : Int;
      tempNumberOfElements : Int;
      tempSizeCounter : Int;
      tempArithmeticAverage : LReal;
      tempStandardDeviation : LReal;
   END_VAR

   VAR CONSTANT 
      NUMBER_OF_ELEMENTS_CORRECTION : Int := 1;
      DIMENSION_ONE : UDInt := 1;
      ZERO : LReal := 0.0;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //-----------------------------------------------------------------------------
	  // Title:            LGF_AverageAndDeviation
	  // Comment/Function: This function calculates the arithmetic average and the
	  //                   standard deviation of a array of numbers
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - no error handling, ENO forced to true
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|-----------------------------
	  // 01.00.00 | 19.08.2015 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 16.11.2015 | Siemens Industry Online Support
	  //                       | Bug fix at WRONG_TYPE:  #error := true
	  // 01.00.02 | 02.01.2017 | Siemens Industry Online Support
	  //                       | Upgrade: TIA Portal V14 Update 1
	  // 01.00.03 | 17.08.2018 | Siemens Industry Online Support
	  //                       | Upgrade: TIA V15 Update 2
	  // 01.00.04 | 23.11.2018 | Siemens Industry Online Support
	  //                       | Upgrade: TIA V15.1
	  // 02.00.00 | 25.01.2019 | Simatic Systems Support
	  //                       | Data type changed from Variant to Array[*] of LReal
	  // 02.00.01 | 31.10.2019 | Simatic Systems Support
	  //                       | Regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Checking number of lower and upper bound
	  #tempLowerBound := DINT_TO_INT(LOWER_BOUND(ARR := #variableArray, DIM := #DIMENSION_ONE));
	  #tempUpperBound := DINT_TO_INT(UPPER_BOUND(ARR := #variableArray, DIM := #DIMENSION_ONE));
	  
	  // Upper - Lower bound gives the number of elements. +1 should be added for correct calculation.
	  #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #NUMBER_OF_ELEMENTS_CORRECTION;
	END_REGION
	
	REGION Calculation of the arithmetic average
	  #tempArithmeticAverage := #ZERO;
	  FOR #tempSizeCounter := #tempLowerBound TO #tempUpperBound DO
	    #tempArithmeticAverage += #variableArray[#tempSizeCounter];
	  END_FOR;
	  
	  #tempArithmeticAverage /= DINT_TO_REAL(#tempNumberOfElements);
	END_REGION
	
	REGION Calculation of the standard deviation
	  #tempStandardDeviation := #ZERO;
	  FOR #tempSizeCounter := #tempLowerBound TO #tempUpperBound DO
	    #tempStandardDeviation += SQR((#variableArray[#tempSizeCounter] - #tempArithmeticAverage));
	  END_FOR;
	  
	  #tempStandardDeviation := SQRT(#tempStandardDeviation / DINT_TO_REAL(#tempNumberOfElements));
	END_REGION
	
	REGION Writting to outputs
	  #arithmeticAverage := #tempArithmeticAverage;
	  #standardDeviation := #tempStandardDeviation;
	
	  // ENO mechanism is not used - forced to true
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION

FUNCTION "LGF_DifferenceQuotientFC" : Void
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_DifferenceQuotientFC
   VAR_INPUT 
      deltaT : LReal;
   END_VAR

   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of LReal;
      derivatedValues : Array[*] of LReal;
   END_VAR

   VAR_TEMP 
      tempLowerBound : Int;
      tempUpperBound : Int;
      tempNumberOfElements : Int;
      tempLowerBoundOut : Int;
      tempUpperBoundOut : Int;
      tempNumberOfElementsOut : Int;
      tempCount : Int;
      tempDivision : LReal;
   END_VAR

   VAR CONSTANT 
      ZERO : LReal := 0.0;
      NUMBER_OF_ELEMENTS_CORRECTION : Int := 1;
      DIMENSION_ONE : UDInt := 1;
      MINIMUM_ARRAY_ELEMENTS : UDInt := 4;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      ERR_DELTA_T : Word := 16#8200;
      ERR_ARRAYS_DIFFERENT : Word := 16#8400;
      ERR_NOT_ENOUGH_VALUES : Word := 16#8401;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //----------------------------------------------------------------------------
	  // Title:            LGF_DifferenceQuotientFC
	  // Comment/Function: This function differentiates a signal
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //----------|------------|------------------------|----------------------------
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|----------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 15.11.2019 | Simatic Systems Support
	  //                       | Regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Checking number of lower and upper bound  
	  #tempLowerBound := DINT_TO_INT(LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE));
	  #tempUpperBound := DINT_TO_INT(UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE));
	  
	  #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #NUMBER_OF_ELEMENTS_CORRECTION;
	  
	  #tempLowerBoundOut := DINT_TO_INT(LOWER_BOUND(ARR := #derivatedValues, DIM := #DIMENSION_ONE));
	  #tempUpperBoundOut := DINT_TO_INT(UPPER_BOUND(ARR := #derivatedValues, DIM := #DIMENSION_ONE));
	  
	  #tempNumberOfElementsOut := #tempUpperBoundOut - #tempLowerBoundOut + #NUMBER_OF_ELEMENTS_CORRECTION;
	  
	  //check if size of arrays is ok
	  IF #tempNumberOfElementsOut <> #tempNumberOfElements THEN
	    #error := true;
	    #status := #ERR_ARRAYS_DIFFERENT;
	    RETURN;
	    // check size of arrays if the are big enough
	  ELSIF #tempNumberOfElements <= #MINIMUM_ARRAY_ELEMENTS THEN
	    #error := true;
	    #status := #ERR_NOT_ENOUGH_VALUES;
	    RETURN;
	    // DeltaT cannot be zero, devision by zero not possible.
	  ELSIF #deltaT = #ZERO THEN
	    #error := true;
	    #status := #ERR_DELTA_T;
	    RETURN;
	  END_IF;
	END_REGION
	
	REGION Calculating the derrivate values  
	  // calculate derivate value 
	  // keep the "Magic Numbers" as they are part of the Math equation and would extent the formular in a unreadable way
	  // ẏ(n)=1/12h*(y(n-2)-8y(n-1)+8y(n+1)-y(n+2))
	  // h = deltaT
	  #tempDivision := 1.0 / (12.0 * #deltaT);
	  FOR #tempCount := #tempLowerBound + 2 TO #tempUpperBound - 2 DO
	    #derivatedValues[#tempCount] := #tempDivision * (#values[#tempCount - 2] - 8 * #values[#tempCount - 1] + 8 * #values[#tempCount + 1] - #values[#tempCount + 2]);
	  END_FOR;
	  
	  // ẏ(n-2)=1/84h*(-125y(n-2)+136y(n-1)+48y(n)-88y(n+1)+29y(n+2))
	  // h = deltaT
	  #tempDivision := 1.0 / (84.0 * #deltaT);
	  #derivatedValues[0] := #tempDivision * (-125 * #values[0] + 136 * #values[1] + 48 * #values[2] - 88 * #values[3] + 29 * #values[4]);
	  
	  // ẏ(n-1)=1/84h*(-38y(n-2)-2y(n-1)+24y(n)+26y(n+1)-10y(n+2))
	  // h = deltaT
	  #derivatedValues[1] := #tempDivision * (-38 * #values[0] - 2 * #values[1] + 24 * #values[2] + 26 * #values[3] - 10 * #values[4]);
	  
	  // ẏ(n+1)=1/84h(10y(n-2)-26y(n-1)-24y(n)+2y(n+1)+38y(n+2))
	  // h = deltaT
	  #derivatedValues[#tempUpperBound - 1] := #tempDivision * (10 * #values[#tempUpperBound - 4] - 26 * #values[#tempUpperBound - 3] - 24 * #values[#tempUpperBound - 2] + 2 * #values[#tempUpperBound - 1] + 38 * #values[#tempUpperBound]);
	  
	  // y(n-2)=1/84h(-29y(n-2)+88y(n-1)-48y(n)-136y(n+1)+125y(n+2))
	  // h = deltaT
	  #derivatedValues[#tempUpperBound] := #tempDivision * (-29 * #values[#tempUpperBound - 4] + 88 * #values[#tempUpperBound - 3] - 48 * #values[#tempUpperBound - 2] - 136 * #values[#tempUpperBound - 1] + 125 * #values[#tempUpperBound]);
	  
	  #error := false;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION

FUNCTION "LGF_RegressionLine" : Void
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_RegressionLine
   VAR_OUTPUT 
      slope : LReal;
      intercept : LReal;
      error : Bool;
      status : Word;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of "LGF_typeRegressionLine";
   END_VAR

   VAR_TEMP 
      tempRegressionPoint : "LGF_typeRegressionLine";
      tempIndex : DInt;
      tempNumberOfElements : DInt;
      tempLowerBound : DInt;
      tempUpperBound : DInt;
      tempSumXY : LReal;
      tempSumX : LReal;
      tempSumY : LReal;
      tempSumX2 : LReal;
      tempIntercept : LReal;
      tempSlope : LReal;
   END_VAR

   VAR CONSTANT 
      ARRAY_FIRST_DIMENSION : UInt := 1;
      ELEMENTS_COUNT_CORRECTION : DInt := 1;
      ELEMENTS_NUMBER_THRESHOLD : DInt := 2;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      ERR_NOT_ENOUGH_VALUES : Word := 16#8200;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_RegressionLine
	  // Comment/Function: This function calculates the regression line
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.04 | 15.11.2019 | Simatic Systems Support
	  //                       | Code refactoring, comments added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Initialization and input data processing
	  //calculate number of elements
	  #tempLowerBound := LOWER_BOUND(ARR := #values, DIM := #ARRAY_FIRST_DIMENSION);
	  #tempUpperBound := UPPER_BOUND(ARR := #values, DIM := #ARRAY_FIRST_DIMENSION);
	  
	  // Array elements calculation
	  // (example: 6 - 2 = 4; but real number of elements is 5)
	  #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #ELEMENTS_COUNT_CORRECTION;
	  
	  // Check whether the array contains less than the maximum possible amount of elements
	  IF #tempNumberOfElements < #ELEMENTS_NUMBER_THRESHOLD THEN
	    #slope := 0.0;
	    #intercept := 0.0;
	    #error := TRUE;
	    #status := #ERR_NOT_ENOUGH_VALUES;
	    RETURN;
	  END_IF;
	END_REGION
	
	REGION Regression line calculation
	  // caluclate sum of all needed values
	  FOR #tempIndex := #tempLowerBound TO #tempUpperBound DO
	    // make a temp copy first
	    #tempRegressionPoint := #values[#tempIndex];
	    
	    // Sum of x(n) * y(n)
	    #tempSumXY += #tempRegressionPoint.x * #tempRegressionPoint.y;
	    // Sum of x(n) 
	    #tempSumX += #tempRegressionPoint.x;
	    // Sum of y(n)
	    #tempSumY += #tempRegressionPoint.y;
	    // Sum of x²(n)
	    #tempSumX2 += SQR(#tempRegressionPoint.x);
	  END_FOR;
	  
	  // b = (n * ∑(x(n) * y(n) - ( ∑x(n) * ∑y(n)))/
	  //    (n * (∑x(n)^2) -(∑x(n) * ∑x(n)))
	  #tempSlope := (#tempNumberOfElements * #tempSumXY - (#tempSumX * #tempSumY)) / (#tempNumberOfElements * #tempSumX2 - (#tempSumX * #tempSumX));
	  
	  // a = Y - bX : X and Y are the average values of x and y
	  #tempIntercept := #tempSumY / #tempNumberOfElements - (#tempSlope * (#tempSumX / #tempNumberOfElements));
	END_REGION
	
	REGION Outputs assignment
	  // f(x)= a + b*x
	  #slope := #tempSlope;
	  #intercept := #tempIntercept;
	  
	  #error := false;
	  #status := #STATUS_EXECUTION_FINISHED;
	  // ENO not in use - force to true
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION

FUNCTION "LGF_SimpleSmoothingFC" : Void
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_SimpleSmoothingFC
   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of LReal;
      smoothedValues : Array[*] of LReal;
   END_VAR

   VAR_TEMP 
      tempCount : Int;
      tempNumberOfElements : Int;
      tempNumberOfElementsOut : Int;
      tempLowerBound : Int;
      tempUpperBound : Int;
      tempLowerBoundOut : Int;
      tempUpperBoundOut : Int;
   END_VAR

   VAR CONSTANT 
      NUMBER_OF_ELEMENTS_CORRECTION : Int := 1;
      DIMENSION_ONE : UDInt := 1;
      MINIMUM_ARRAY_ELEMENTS : UDInt := 3;
      NUMBER_OF_VALUES : UDInt := 3;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      ERR_NOT_ENOUGH_VALUES : Word := 16#8400;
      ERR_ARRAY_DIFFERENT : Word := 16#8401;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //----------------------------------------------------------------------------
	  // Title:            LGF_SimpleSmoothingFC
	  // Comment/Function: This function calculates the smoothed values
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 15.11.2019 | Simatic Systems Support
	  //                       | Regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Checking number of lower and upper bound
	  #tempLowerBound := DINT_TO_INT(LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE));
	  #tempUpperBound := DINT_TO_INT(UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE));
	  
	  #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #NUMBER_OF_ELEMENTS_CORRECTION;
	  
	  #tempLowerBoundOut := DINT_TO_INT(LOWER_BOUND(ARR := #smoothedValues, DIM := #DIMENSION_ONE));
	  #tempUpperBoundOut := DINT_TO_INT(UPPER_BOUND(ARR := #smoothedValues, DIM := #DIMENSION_ONE));
	  
	  #tempNumberOfElementsOut := #tempUpperBoundOut - #tempLowerBoundOut + #NUMBER_OF_ELEMENTS_CORRECTION;
	  
	  // Check if size of arrays is ok
	  IF #tempNumberOfElements <> #tempNumberOfElementsOut THEN
	    #error := true;
	    #status := #ERR_ARRAY_DIFFERENT;
	    RETURN;
	    // Check size of arrays if the are big enough
	  ELSIF #tempNumberOfElements < #MINIMUM_ARRAY_ELEMENTS THEN
	    #error := true;
	    #status := #ERR_NOT_ENOUGH_VALUES;
	    RETURN;
	  END_IF;
	  
	  // Caluclating smoothed value
	  // y(Nsmoothed)= (y(n-1)+y(n)+y(n+1)) / 3
	  FOR #tempCount := #tempLowerBound + 1 TO #tempUpperBound - 1 DO
	    #smoothedValues[#tempCount] := (#values[#tempCount - 1] + #values[#tempCount] + #values[#tempCount + 1]) / #NUMBER_OF_VALUES;
	  END_FOR;
	  
	  #error := false;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION

FUNCTION "LGF_SmoothByPolynomFC" : Void
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_SmoothByPolynomFC
   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of LReal;
      smoothedValues : Array[*] of LReal;
   END_VAR

   VAR_TEMP 
      tempCount : Int;
      tempNumberOfElements : Int;
      tempNumberOfElementsOut : Int;
      tempLowerBound : Int;
      tempUpperBound : Int;
      tempLowerBoundOut : Int;
      tempUpperBoundOut : Int;
   END_VAR

   VAR CONSTANT 
      NUMBER_OF_ELEMENTS_CORRECTION : Int := 1;
      DIMENSION_ONE : UDInt := 1;
      MINIMUM_ARRAY_ELEMENTS : UDInt := 5;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      ERR_ARRAYS_DIFFERENT : Word := 16#8400;
      ERR_NOT_ENOUGH_VALUES : Word := 16#8401;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //----------------------------------------------------------------------------
	  // Title:            LGF_SmoothByPolynomFC
	  // Comment/Function: This function calculates the smoothed values by polynom
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.05 | 15.11.2019 | Simatic Systems Support
	  //                       | Regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Checking number of lower and upper bound
	  #tempLowerBound := DINT_TO_INT(LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE)); 
	  #tempUpperBound := DINT_TO_INT(UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE));
	  
	  #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #NUMBER_OF_ELEMENTS_CORRECTION;
	  
	  #tempLowerBoundOut := DINT_TO_INT(LOWER_BOUND(ARR := #smoothedValues, DIM := #DIMENSION_ONE));
	  #tempUpperBoundOut := DINT_TO_INT(UPPER_BOUND(ARR := #smoothedValues, DIM := #DIMENSION_ONE));
	  
	  #tempNumberOfElementsOut := #tempUpperBoundOut - #tempLowerBoundOut + #NUMBER_OF_ELEMENTS_CORRECTION;
	  
	  //check if size of arrays is ok
	  IF #tempNumberOfElementsOut <> #tempNumberOfElements THEN
	    #error := true;
	    #status := #ERR_ARRAYS_DIFFERENT;
	    RETURN;
	  ELSIF #tempNumberOfElements <= #MINIMUM_ARRAY_ELEMENTS THEN
	    #error := true;
	    #status := #ERR_NOT_ENOUGH_VALUES;
	    RETURN;
	  END_IF;
	  
	  FOR #tempCount := #tempLowerBound + 2 TO #tempUpperBound - 2 DO
	    // calculate new smoothed value
	    // keep the "Magic Numbers" as they are part of the Math equation and would extent the formular in a unreadable way
	    // y(n)=1/35*(-3*y(n-2)+12*y(n-1)+17*y(n)+12*y(n+1)-3*y(n+2))
	    // 1/35 = 0.028571
	    #smoothedValues[#tempCount] := 0.028571 * (-3 * #values[#tempCount - 2] + 12 * #values[#tempCount - 1] + 17 * #values[#tempCount] + 12 * #values[#tempCount + 1] - 3 * #values[#tempCount + 2]);
	  END_FOR;
	  
	  // calculate Replacementvalues for 0,1 and n-1,n
	  // y(0) =1/70*(69*y(0)+4*y(1)-6*y(2)+4*y(3)-y(4))
	  // 1/70 = 0.014286
	  #smoothedValues[#tempLowerBound] := 0.014286 * (69 * #values[#tempLowerBound] + 4 * #values[#tempLowerBound + 1] - 6 * #values[#tempLowerBound + 2] + 4 * #values[#tempLowerBound + 3] - #values[#tempLowerBound + 4]);
	  // y(1) =2/70*(2*y(0)+27*y(1)+12*y(2)-8*y(3)+2*y(4))
	  // 2/70 = 0.028571
	  #smoothedValues[#tempLowerBound + 1] := 0.028571 * (2 * #values[#tempLowerBound] + 27 * #values[#tempLowerBound + 1] + 12 * #values[#tempLowerBound + 2] - 8 * #values[#tempLowerBound + 3] + 2 * #values[#tempLowerBound + 4]);
	  // y(n-1) =2/70*(2*y(n-4)-8*y(n-3)+12*y(n-2)+27*y(n-1)+2*y(n))
	  // 2/70 = 0.028571
	  #smoothedValues[#tempUpperBound - 1] := 0.028571 * (2 * #values[#tempUpperBound - 4] - 8 * #values[#tempUpperBound - 3] + 12 * #values[#tempUpperBound - 2] + 27 * #values[#tempUpperBound - 1] + 2 * #values[#tempUpperBound]);
	  // y(n) =1/70*(-y(n-4)+4*y(n-3)-6*y(n-2)+4*y(n-1)+69*y(n))
	  // 1/70 = 0.014286
	  #smoothedValues[#tempUpperBound] := 0.014286 * (- #values[#tempUpperBound - 4] + 4 * #values[#tempUpperBound - 3] - 6 * #values[#tempUpperBound - 2] + 4 * #values[#tempUpperBound - 1] + 69 * #values[#tempUpperBound]);
	  
	  #error := false;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION

FUNCTION_BLOCK "LGF_Boxplot_DInt"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_Boxplot_DInt
   VAR_INPUT 
      execute : Bool;
      rangeOutlier : LReal := 1.5;
   END_VAR

   VAR_OUTPUT 
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
      subfunctionStatus { ExternalWritable := 'False'} : Word;
      outlierMax { ExternalWritable := 'False'} : LReal;
      max { ExternalWritable := 'False'} : DInt;
      q75 { ExternalWritable := 'False'} : LReal;
      median { ExternalWritable := 'False'} : LReal;
      q25 { ExternalWritable := 'False'} : LReal;
      min { ExternalWritable := 'False'} : DInt;
      outlierMin { ExternalWritable := 'False'} : LReal;
      skewness { ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of DInt;
   END_VAR

   VAR 
      statMaxNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statMinNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statSubfuncStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instShellSort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LGF_ShellSort_DInt";
      statMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statQuartil25 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statQuartil75 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statNumberOfElements { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statMedian { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statDeltaQuartil { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statOutlierMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statOutlierMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statSkewness { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statBorderOutlier { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_TEMP 
      tempK : LReal;
      tempValueDInt : DInt;
      tempValueDInt1 : DInt;
      tempArrLowBound : DInt;
      tempArrUppBound : DInt;
   END_VAR

   VAR CONSTANT 
      ZERO_LREAL : LReal := 0.0;
      ZERO_DINT : DInt := 0;
      RANGE_OUTLIER_LOWER_BORDER : LReal := 1.0;
      ELEMENTS_COUNT_CORRECTION : Int := 1;
      CONVERT_TO_PERCENT : Int := 100;
      DIMENSION_ONE : UDInt := 1;
      NO_REMAINDER : Int := 0;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      ERR_NEG_ARR_BOUND : Word := 16#8200;
      ERR_SHELL_SORT : Word := 16#8600;
      ERR_RANGE_NOT_OK : Word := 16#9101;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //----------------------------------------------------------------------------
	  // Title:            LGF_Boxplot_Dint
	  // Comment/Function: The function block sorts the data row and calculates
	  //                   the so-called "five point summary" for an array of double integers
	  //                   Auto ENO disabled, forced to true - error handling done by error and status
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //----------|------------|------------------------|----------------------------
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|----------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 05.11.2019 | Simatic Systems Support
	  //                       | Code reworked, regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Dectect execution bit
	  //Positive edge detection
	  IF #execute AND NOT #statExecuteOld THEN
	    //count array elements
	    #tempArrLowBound := LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    #tempArrUppBound := UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    
	    //Reset outputs and statics
	    #statStatus := #STATUS_FIRST_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	    #statQuartil25 := #ZERO_LREAL;
	    #statMedian := #ZERO_LREAL;
	    #statQuartil75 := #ZERO_LREAL;
	    #statOutlierMax := #ZERO_LREAL;
	    #statOutlierMin := #ZERO_LREAL;
	    #statSkewness := #ZERO_LREAL;
	    #statMaxNew := #ZERO_DINT;
	    #statMinNew := #ZERO_DINT;
	    #statMin := #ZERO_DINT;
	    #statMax := #ZERO_DINT;
	    
	    //FB is currently inactive
	  ELSIF NOT #execute THEN
	    #statStatus := #STATUS_NO_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	  END_IF;
	  #statExecuteOld := #execute;
	END_REGION
	
	REGION Validation
	  //Check rangeOutlier
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //Value is not ok. Range have to be > 1.0 or 0.0
	    IF #rangeOutlier <> #ZERO_LREAL AND #rangeOutlier <= #RANGE_OUTLIER_LOWER_BORDER THEN
	      #statStatus := #ERR_RANGE_NOT_OK;
	      
	      //Check array boundry
	    ELSIF #tempArrLowBound < 0 THEN
	      #statStatus := #ERR_NEG_ARR_BOUND;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Boxplot calculation
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //Get number of elents of the array
	    #statNumberOfElements := (#tempArrUppBound - #tempArrLowBound + #ELEMENTS_COUNT_CORRECTION);
	    
	    //Sort array
	    #instShellSort(array := #values);
	    
	    IF #instShellSort.error THEN
	      #statStatus := #ERR_SHELL_SORT;
	      #statSubfuncStatus := #instShellSort.status;
	    ELSE
	      #statMin := #values[#tempArrLowBound];
	      #statMax := #values[#tempArrUppBound];
	      //calculate median (Q50) - different calculation if the Number of Elements is even or odd 
	      IF (#statNumberOfElements MOD 2) = #NO_REMAINDER THEN
	        // if n is even -> calculate MEDIAN = (x(n/2)+x(n/2+1))/2 
	        #tempValueDInt := #values[((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) / 2)];
	        #tempValueDInt1 := #values[((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) / 2) + 1];
	        #statMedian := DINT_TO_LREAL(((#tempValueDInt1 + #tempValueDInt) / 2));
	      ELSE
	        // if n is odd -> MEDIAN = x(n+1/2)
	        #statMedian := DINT_TO_LREAL(#values[(#statNumberOfElements + 1 - #ELEMENTS_COUNT_CORRECTION) / 2]);
	      END_IF;
	      
	      //calculate 1.quartil(Q25)
	      // q1 = x(k) with  k=(n+3)/4 
	      #tempK := (DINT_TO_LREAL(#statNumberOfElements + 3 - #ELEMENTS_COUNT_CORRECTION) / 4.0);
	      
	      #tempValueDInt := #values[TRUNC(#tempK)];
	      #tempValueDInt1 := #values[TRUNC(#tempK) + 1];
	      #statQuartil25 := DINT_TO_LREAL(#tempValueDInt) + (FRAC_LREAL(#tempK) * DINT_TO_LREAL(#tempValueDInt1 - #tempValueDInt));
	      
	      //calculate 3.quartil(Q75)
	      //q3 = x(n+1-k) with k=(3n+1)/4
	      #tempK := (3 * DINT_TO_REAL(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION + 1) / 4.0);
	      
	      #tempValueDInt := #values[TRUNC(#tempK)];
	      #tempValueDInt1 := #values[TRUNC(#tempK) + 1];
	      #statQuartil75 := DINT_TO_LREAL(#tempValueDInt) + FRAC_LREAL(#tempK) * DINT_TO_REAL(#tempValueDInt1 - #tempValueDInt);
	      
	      //only if RANGE_OUTLIER is not zero
	      IF #rangeOutlier <> 0 THEN
	        //calculate Delta Q75-Q25
	        #statDeltaQuartil := #statQuartil75 - #statQuartil25;
	        
	        //check for min outlier
	        //calculate border for outlier
	        #statBorderOutlier := #statQuartil25 - #rangeOutlier * #statDeltaQuartil;
	        
	        //search in array for values outside the border
	        FOR #statCounter := 0 TO DINT_TO_INT(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) DO
	          #tempValueDInt := #values[#statCounter];
	          IF #tempValueDInt < LREAL_TO_DINT(#statBorderOutlier) THEN
	            //detected a value as outlier, check next value
	            ;
	          ELSE
	            //all outlier detected. Calulate new Min Value in range and calulate outlier in %
	            #statOutlierMin := DINT_TO_LREAL((#CONVERT_TO_PERCENT * #statCounter)) / DINT_TO_LREAL(#statNumberOfElements);
	            #statMinNew := #tempValueDInt;
	            EXIT;
	          END_IF;
	        END_FOR;
	        
	        //check for max outlier
	        //calculate border for outlier
	        #statBorderOutlier := #statQuartil75 + #rangeOutlier * #statDeltaQuartil;
	        //search in array for values outside the border 
	        FOR #statCounter := DINT_TO_INT(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) TO 0 BY - 1 DO
	          #tempValueDInt := #values[#statCounter];
	          IF #tempValueDInt > LREAL_TO_DINT(#statBorderOutlier) THEN
	            //detected a value as outlier, check next value
	            ;
	          ELSE
	            //all outlier detected. Calulate new Max Value in range and calulate outliers in %
	            #statOutlierMax := DINT_TO_REAL((#CONVERT_TO_PERCENT * (#statNumberOfElements - INT_TO_DINT(#statCounter) - #ELEMENTS_COUNT_CORRECTION))) / DINT_TO_REAL(#statNumberOfElements);
	            #statMaxNew := #tempValueDInt;
	            EXIT;
	          END_IF;
	        END_FOR;
	      END_IF;
	      
	      //calculate Skewness
	      //S= ((Q25 + Q75)-2*Q50) / (Q75 - Q25)
	      #statSkewness := (#statQuartil75 + #statQuartil25 - 2.0 * #statMedian) / (#statQuartil75 - #statQuartil25);
	      
	      #statStatus := #STATUS_EXECUTION_FINISHED;
	      #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	      
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Write Outputs
	  IF #rangeOutlier <> #ZERO_LREAL THEN
	    #min := #statMinNew;
	    #max := #statMaxNew;
	  ELSE
	    #min := #statMin;
	    #max := #statMax;
	  END_IF;
	  
	  #q25 := #statQuartil25;
	  #median := #statMedian;
	  #q75 := #statQuartil75;
	  #outlierMin := #statOutlierMin;
	  #outlierMax := #statOutlierMax;
	  #skewness := #statSkewness;
	  
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #subfunctionStatus := #statSubfuncStatus;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Boxplot_LReal"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_Boxplot_LReal
   VAR_INPUT 
      execute : Bool;
      rangeOutlier : LReal := 1.5;
   END_VAR

   VAR_OUTPUT 
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := 16#0;
      subfunctionStatus { ExternalWritable := 'False'} : Word;
      outlierMax { ExternalWritable := 'False'} : LReal;
      max { ExternalWritable := 'False'} : LReal;
      q75 { ExternalWritable := 'False'} : LReal;
      median { ExternalWritable := 'False'} : LReal;
      q25 { ExternalWritable := 'False'} : LReal;
      min { ExternalWritable := 'False'} : LReal;
      outlierMin { ExternalWritable := 'False'} : LReal;
      skewness { ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of LReal;
   END_VAR

   VAR 
      statMaxNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMinNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statSubfuncStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instShellSort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LGF_ShellSort_LReal";
      statMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statQuartil25 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statQuartil75 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statNumberOfElements { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statMedian { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statDeltaQuartil { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statOutlierMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statOutlierMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statSkewness { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statBorderOutlier { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_TEMP 
      tempK : LReal;
      tempValueLReal : LReal;
      tempValueLReal1 : LReal;
      tempArrLowBound : DInt;
      tempArrUppBound : DInt;
   END_VAR

   VAR CONSTANT 
      ZERO_LREAL : LReal := 0.0;
      ZERO_DINT : DInt := 0;
      RANGE_OUTLIER_LOWER_BORDER : LReal := 1.0;
      ELEMENTS_COUNT_CORRECTION : Int := 1;
      CONVERT_TO_PERCENT : Int := 100;
      DIMENSION_ONE : UDInt := 1;
      NO_REMAINDER : UDInt := 0;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      ERR_NEG_ARR_BOUND : Word := 16#8200;
      ERR_SHELL_SORT : Word := 16#8600;
      ERR_RANGE_NOT_OK : Word := 16#9101;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //----------------------------------------------------------------------------
	  // Title:            LGF_Boxplot_LReal
	  // Comment/Function: The function block sorts the data row and calculates
	  //                   the so-called "five point summary" for an array of long real
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //----------|------------|------------------------|----------------------------
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|----------------------------
	  // 01.00.00 | 05.11.2019 | Siemens Industry Online Support
	  //                       | First released version
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Dectect execution bit
	  //Positive edge detection
	  IF #execute AND NOT #statExecuteOld THEN
	    //count array elements
	    #tempArrLowBound := LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    #tempArrUppBound := UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    
	    //Reset outputs and statics
	    #statStatus := #STATUS_FIRST_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	    #statQuartil25 := #ZERO_LREAL;
	    #statMedian := #ZERO_LREAL;
	    #statQuartil75 := #ZERO_LREAL;
	    #statOutlierMax := #ZERO_LREAL;
	    #statOutlierMin := #ZERO_LREAL;
	    #statSkewness := #ZERO_LREAL;
	    #statMaxNew := #ZERO_DINT;
	    #statMinNew := #ZERO_DINT;
	    #statMin := #ZERO_DINT;
	    #statMax := #ZERO_DINT;
	    
	    //FB is currently inactive
	  ELSIF NOT #execute THEN
	    #statStatus := #STATUS_NO_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	  END_IF;
	  #statExecuteOld := #execute;
	END_REGION
	
	REGION Validation
	  //Check rangeOutlier
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //Value is not ok. Range have to be > 1.0 or 0.0
	    IF #rangeOutlier <> #ZERO_LREAL AND #rangeOutlier <= #RANGE_OUTLIER_LOWER_BORDER THEN
	      #statStatus := #ERR_RANGE_NOT_OK;
	      
	      //Check array boundry
	    ELSIF #tempArrLowBound < 0 THEN
	      #statStatus := #ERR_NEG_ARR_BOUND;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Boxplot calculation
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //Get number of elents of the array
	    #statNumberOfElements := (#tempArrUppBound - #tempArrLowBound + #ELEMENTS_COUNT_CORRECTION);
	    
	    //Sort array
	    #instShellSort(array := #values);
	    
	    IF #instShellSort.error THEN
	      #statStatus := #ERR_SHELL_SORT;
	      #statSubfuncStatus := #instShellSort.status;
	    ELSE
	      #statMin := #values[#tempArrLowBound];
	      #statMax := #values[#tempArrUppBound];
	      //calculate median (Q50) - different calculation if the Number of Elements is even or odd 
	      IF (#statNumberOfElements MOD 2) = #NO_REMAINDER THEN
	        // if n is even -> calculate MEDIAN = (x(n/2)+x(n/2+1))/2 
	        #tempValueLReal := #values[((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) / 2)];
	        #tempValueLReal1 := #values[((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) / 2) + 1];
	        #statMedian := ((#tempValueLReal1 + #tempValueLReal) / 2);
	      ELSE
	        // if n is odd -> MEDIAN = x(n+1/2)
	        #statMedian := #values[(#statNumberOfElements + 1 - #ELEMENTS_COUNT_CORRECTION) / 2];
	      END_IF;
	      
	      //calculate 1.quartil(Q25)
	      // q1 = x(k) with  k=(n+3)/4 
	      #tempK := (DINT_TO_LREAL(#statNumberOfElements + 3 - #ELEMENTS_COUNT_CORRECTION) / 4.0);
	      
	      #tempValueLReal := #values[TRUNC(#tempK)];
	      #tempValueLReal1 := #values[TRUNC(#tempK) + 1];
	      #statQuartil25 := #tempValueLReal + (FRAC_LREAL(#tempK) * (#tempValueLReal1 - #tempValueLReal));
	      
	      //calculate 3.quartil(Q75)
	      //q3 = x(n+1-k) with k=(3n+1)/4
	      #tempK := ((3 * DINT_TO_LREAL(#statNumberOfElements + 1 - #ELEMENTS_COUNT_CORRECTION)) / 4.0);
	      
	      #tempValueLReal := #values[TRUNC(#tempK)];
	      #tempValueLReal1 := #values[TRUNC(#tempK) + 1];
	      #statQuartil75 := #tempValueLReal + FRAC_LREAL(#tempK) * (#tempValueLReal1 - #tempValueLReal);
	      
	      //only if RANGE_OUTLIER <> 0
	      IF #rangeOutlier <> 0 THEN
	        //calculate Delta Q75-Q25
	        #statDeltaQuartil := #statQuartil75 - #statQuartil25;
	        //check for min outlier
	        //calculate border for outlier
	        #statBorderOutlier := #statQuartil25 - #rangeOutlier * #statDeltaQuartil;
	        
	        //search in array for values outside the border
	        FOR #statCounter := 0 TO DINT_TO_INT(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) DO
	          #tempValueLReal := #values[#statCounter];
	          
	          IF #tempValueLReal < LREAL_TO_DINT(#statBorderOutlier) THEN
	            //detected a value as outlier, check next value
	            ;
	          ELSE
	            //all outlier detected. Calulate new Min Value in range and calulate outlier in %
	            #statOutlierMin := DINT_TO_LREAL((#CONVERT_TO_PERCENT * #statCounter)) / DINT_TO_LREAL(#statNumberOfElements);
	            #statMinNew := #tempValueLReal;
	            EXIT;
	          END_IF;
	        END_FOR;
	        
	        //check for max outlier
	        //calculate border for outlier
	        #statBorderOutlier := #statQuartil75 + #rangeOutlier * #statDeltaQuartil;
	        //search in array for values outside the border 
	        FOR #statCounter := DINT_TO_INT(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) TO 0 BY - 1 DO
	          #tempValueLReal := #values[#statCounter];
	          IF #tempValueLReal > LREAL_TO_DINT(#statBorderOutlier) THEN
	            //detected a value as outlier, check next value
	            ;
	          ELSE
	            //all outlier detected. Calulate new Max Value in range and calulate outliers in %
	            #statOutlierMax := DINT_TO_LREAL((#CONVERT_TO_PERCENT * (#statNumberOfElements - INT_TO_DINT(#statCounter) - #ELEMENTS_COUNT_CORRECTION))) / DINT_TO_LREAL(#statNumberOfElements);
	            #statMaxNew := #tempValueLReal;
	            EXIT;
	          END_IF;
	        END_FOR;
	      END_IF;
	      
	      //calculate Skewness
	      //S= ((Q25 + Q75)-2*Q50) / (Q75 - Q25)
	      #statSkewness := (#statQuartil75 + #statQuartil25 - 2.0 * #statMedian) / (#statQuartil75 - #statQuartil25);
	      
	      #statStatus := #STATUS_EXECUTION_FINISHED;
	      #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	      
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Write Outputs
	  IF #rangeOutlier <> #ZERO_DINT THEN
	    #min := #statMinNew;
	    #max := #statMaxNew;
	  ELSE
	    #min := #statMin;
	    #max := #statMax;
	  END_IF;
	  
	  #q25 := #statQuartil25;
	  #median := #statMedian;
	  #q75 := #statQuartil75;
	  #outlierMin := #statOutlierMin;
	  #outlierMax := #statOutlierMax;
	  #skewness := #statSkewness;
	  
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #subfunctionStatus := #statSubfuncStatus;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Boxplot_UDInt"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_Boxplot_UDInt
   VAR_INPUT 
      execute : Bool;
      rangeOutlier : LReal := 1.5;
   END_VAR

   VAR_OUTPUT 
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
      subfunctionStatus { ExternalWritable := 'False'} : Word;
      outlierMax { ExternalWritable := 'False'} : LReal;
      max { ExternalWritable := 'False'} : UDInt;
      q75 { ExternalWritable := 'False'} : LReal;
      median { ExternalWritable := 'False'} : LReal;
      q25 { ExternalWritable := 'False'} : LReal;
      min { ExternalWritable := 'False'} : UDInt;
      outlierMin { ExternalWritable := 'False'} : LReal;
      skewness { ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of UDInt;
   END_VAR

   VAR 
      statMaxNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
      statMinNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statSubfuncStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instShellSort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LGF_ShellSort_UDInt";
      statMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
      statMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
      statQuartil25 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statQuartil75 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statNumberOfElements { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statMedian { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statDeltaQuartil { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statOutlierMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statOutlierMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statSkewness { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statBorderOutlier { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_TEMP 
      tempK : LReal;
      tempValueUDInt : UDInt;
      tempValueUDInt1 : UDInt;
      tempArrLowBound : DInt;
      tempArrUppBound : DInt;
   END_VAR

   VAR CONSTANT 
      ZERO_LREAL : LReal := 0.0;
      ZERO_UINT : UInt := 0;
      RANGE_OUTLIER_LOWER_BORDER : LReal := 1.0;
      ELEMENTS_COUNT_CORRECTION : Int := 1;
      CONVERT_TO_PERCENT : Int := 100;
      DIMENTION_ONE : UDInt := 1;
      NO_REMAINDER : UDInt := 0;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      ERR_NEG_ARR_BOUND : Word := 16#8200;
      ERR_SHELL_SORT : Word := 16#8600;
      ERR_RANGE_NOT_OK : Word := 16#9101;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //----------------------------------------------------------------------------
	  // Title:            LGF_Boxplot_UDInt
	  // Comment/Function: The function block sorts the data row and calculates
	  //                   the so-called "five point summary" for an array of unsigned double integers
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //----------|------------|------------------------|----------------------------
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|----------------------------
	  // 01.00.00 | 05.11.2019 | Siemens Industry Online Support
	  //                       | First released version
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Dectect execution bit
	  //Positive edge detection
	  IF #execute AND NOT #statExecuteOld THEN
	    //Get array boundaries
	    #tempArrLowBound := LOWER_BOUND(ARR := #values, DIM := #DIMENTION_ONE);
	    #tempArrUppBound := UPPER_BOUND(ARR := #values, DIM := #DIMENTION_ONE);
	    
	    //Reset outputs and statics
	    #statStatus := #STATUS_FIRST_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	    #statQuartil25 := #ZERO_LREAL;
	    #statMedian := #ZERO_LREAL;
	    #statQuartil75 := #ZERO_LREAL;
	    #statOutlierMax := #ZERO_LREAL;
	    #statOutlierMin := #ZERO_LREAL;
	    #statSkewness := #ZERO_LREAL;
	    #statMaxNew := #ZERO_UINT;
	    #statMinNew := #ZERO_UINT;
	    #statMin := #ZERO_UINT;
	    #statMax := #ZERO_UINT;
	    
	    //FB is currently inactive
	  ELSIF NOT #execute THEN
	    #statStatus := #STATUS_NO_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	  END_IF;
	  #statExecuteOld := #execute;
	END_REGION
	
	REGION Validation
	  //Check rangeOutlier
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //Value is not ok. Range have to be > 1.0 or 0.0
	    IF #rangeOutlier <> #ZERO_LREAL AND #rangeOutlier <= #RANGE_OUTLIER_LOWER_BORDER THEN
	      #statStatus := #ERR_RANGE_NOT_OK;
	      
	      //Check array boundry
	    ELSIF #tempArrLowBound < 0 THEN
	      #statStatus := #ERR_NEG_ARR_BOUND;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Boxplot calculation
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //Get number of elements of the array
	    #statNumberOfElements := (#tempArrUppBound - #tempArrLowBound + #ELEMENTS_COUNT_CORRECTION);
	    
	    //Sort array
	    #instShellSort(array := #values);
	    
	    IF #instShellSort.error THEN
	      #statStatus := #ERR_SHELL_SORT;
	      #statSubfuncStatus := #instShellSort.status;
	    ELSE
	      #statMin := #values[#tempArrLowBound];
	      #statMax := #values[#tempArrUppBound];
	      //calculate median (Q50)
	      IF (#statNumberOfElements MOD 2) = #NO_REMAINDER THEN
	        // if n is even -> calculate MEDIAN = (x(n/2)+x(n/2+1))/2 
	        #tempValueUDInt := #values[((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) / 2)];
	        #tempValueUDInt1 := #values[((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION) / 2) + 1];
	        #statMedian := ((#tempValueUDInt1 + #tempValueUDInt) / 2);
	      ELSE
	        // if n is odd -> MEDIAN = x(n+1/2)
	        #statMedian := #values[((#statNumberOfElements + 1 - #ELEMENTS_COUNT_CORRECTION) / 2)];
	      END_IF;
	      
	      //calculate 1.quartil(Q25)
	      // q1 = x(k) with  k=(n+3)/4 
	      #tempK := (DINT_TO_LREAL(#statNumberOfElements + 3 - #ELEMENTS_COUNT_CORRECTION) / 4.0);
	      
	      #tempValueUDInt := #values[TRUNC(#tempK)];
	      #tempValueUDInt1 := #values[TRUNC(#tempK) + 1];
	      #statQuartil25 := UDINT_TO_LREAL(#tempValueUDInt) + (FRAC_LREAL(#tempK) * UDINT_TO_LREAL(#tempValueUDInt1 - #tempValueUDInt));
	      
	      //calculate 3.quartil(Q75)
	      //q3 = x(n+1-k) with k=(3n+1)/4
	      #tempK := (3 * DINT_TO_LREAL(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION + 1) / 4.0);
	      
	      #tempValueUDInt := #values[TRUNC(#tempK)];
	      #tempValueUDInt1 := #values[TRUNC(#tempK) + 1];
	      #statQuartil75 := UDINT_TO_LREAL(#tempValueUDInt) + FRAC_LREAL(#tempK) * UDINT_TO_LREAL(#tempValueUDInt1 - #tempValueUDInt);
	      
	      //only if RANGE_OUTLIER <> 0
	      IF #rangeOutlier <> 0 THEN
	        //calculate Delta Q75-Q25
	        #statDeltaQuartil := #statQuartil75 - #statQuartil25;
	        //check for min outlier
	        //calculate border for outlier
	        #statBorderOutlier := #statQuartil25 - #rangeOutlier * #statDeltaQuartil;
	        
	        //search in array for values outside the border
	        FOR #statCounter := 0 TO (DINT_TO_INT(#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION)) DO
	          #tempValueUDInt := #values[#statCounter];
	          
	          IF #tempValueUDInt < LREAL_TO_DINT(#statBorderOutlier) THEN
	            //detected a value as outlier, check next value
	            ;
	          ELSE
	            //all outlier detected. Calulate new Min Value in range and calulate outlier in %
	            #statOutlierMin := DINT_TO_LREAL((#CONVERT_TO_PERCENT * #statCounter)) / DINT_TO_LREAL(#statNumberOfElements);
	            #statMinNew := #tempValueUDInt;
	            EXIT;
	          END_IF;
	        END_FOR;
	        
	        //check for max outlier
	        //calculate border for outlier
	        #statBorderOutlier := #statQuartil75 + #rangeOutlier * #statDeltaQuartil;
	        //search in array for values outside the border 
	        FOR #statCounter := DINT_TO_INT((#statNumberOfElements - #ELEMENTS_COUNT_CORRECTION)) TO 0 BY - 1 DO
	          #tempValueUDInt := #values[#statCounter];
	          IF #tempValueUDInt > LREAL_TO_DINT(#statBorderOutlier) THEN
	            //detected a value as outlier, check next value
	            ;
	          ELSE
	            //all outlier detected. Calulate new Max Value in range and calulate outliers in %
	            #statOutlierMax := DINT_TO_LREAL((#CONVERT_TO_PERCENT * (#statNumberOfElements - INT_TO_DINT(#statCounter) - #ELEMENTS_COUNT_CORRECTION))) / DINT_TO_LREAL(#statNumberOfElements);
	            #statMaxNew := #tempValueUDInt;
	            EXIT;
	          END_IF;
	        END_FOR;
	      END_IF;
	      
	      //calculate Skewness
	      //S= ((Q25 + Q75)-2*Q50) / (Q75 - Q25)
	      #statSkewness := (#statQuartil75 + #statQuartil25 - 2.0 * #statMedian) / (#statQuartil75 - #statQuartil25);
	      
	      #statStatus := #STATUS_EXECUTION_FINISHED;
	      #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	      
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Write outputs
	  IF #rangeOutlier <> #ZERO_LREAL THEN
	    #min := #statMinNew;
	    #max := #statMaxNew;
	  ELSE
	    #min := #statMin;
	    #max := #statMax;
	  END_IF;
	  
	  #q25 := #statQuartil25;
	  #median := #statMedian;
	  #q75 := #statQuartil75;
	  #outlierMin := #statOutlierMin;
	  #outlierMax := #statOutlierMax;
	  #skewness := #statSkewness;
	  
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #subfunctionStatus := #statSubfuncStatus;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_DifferenceQuotientFB"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_DifferenceQuotientFB
   VAR_INPUT 
      enable : Bool;
      insert : Bool;
      value : LReal;
      deltaT : LReal;
   END_VAR

   VAR_OUTPUT 
      derivatedValue { ExternalWritable := 'False'} : LReal;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      statValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#MINIMUM_NUMBER_OF_VALUES] of LReal;
      statCount { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statDerivatedValue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statEnableOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statInsertOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR

   VAR CONSTANT 
      ZERO : LReal := 0.0;
      MINIMUM_NUMBER_OF_VALUES : UDInt := 4;
      INCREMENT_VALUE : Int := 1;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      STATUS_SUBSEQUENT_CALL : Word := 16#7002;
      STATUS_NOT_ENOUGH_VALUES : Word := 16#7010;
      ERR_DELTA_T : Word := 16#8200;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2018
	  //----------------------------------------------------------------------------
	  // Title:            LGF_DifferenceQuotientFB
	  // Comment/Function: This function block differentiates a signal
	  //                   Magic numbers that are part of mathematics formula are
	  //                   left without constants.
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //----------|------------|------------------------|----------------------------
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|----------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 04.11.2019 | Simatic Systems Support
	  //                       | Code reworked.
	  //                       | Regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Check function block call 
	  // // Check if FB is triggered - rising edge on enable
	  IF #enable AND NOT #statEnableOld THEN
	    // Reset 
	    #statCount := 0;
	    #statValues[0] := #ZERO;
	    #statValues[1] := #ZERO;
	    #statValues[2] := #ZERO;
	    #statValues[3] := #ZERO;
	    #statValues[4] := #ZERO;
	    
	    // Set status for first call
	    #statStatus := #STATUS_FIRST_CALL;
	    
	    // enabled after edge trigger
	  ELSIF #enable AND #statEnableOld THEN
	    REGION Values inserting and smoothing calculation
	      // positive edge of insert detected 
	      IF #insert AND NOT #statInsertOld THEN
	        // copy new value
	        #statValues[0] := #statValues[1]; // -> n-2
	        #statValues[1] := #statValues[2]; // -> n-1
	        #statValues[2] := #statValues[3]; // -> n
	        #statValues[3] := #statValues[4]; // -> n+1
	        #statValues[4] := #value; // -> n+2
	        
	        // Check if the minimum needed insered values is reached
	        // Increase the count of added values
	        IF #statCount <= #MINIMUM_NUMBER_OF_VALUES THEN
	          #statCount += #INCREMENT_VALUE;
	          #statStatus := #STATUS_NOT_ENOUGH_VALUES;
	          
	          // DeltaT cannot be zero, devision by zero not possible.
	        ELSIF #deltaT = #ZERO THEN
	          #statStatus := #ERR_DELTA_T;
	        ELSE
	          // calculate derivate value 
	          // keep the "Magic Numbers" as they are part of the Math equation and would extent the formular in a unreadable way
	          // ẏ(n)=1/12deltaT*(y(n-2)-8y(n-1)+8y(n+1)-y(n+2))
	          #statDerivatedValue := (1.0 / (12.0 * #deltaT)) * (#statValues[0] - 8 * #statValues[1] + 8 * #statValues[3] - #statValues[4]);
	          #statStatus := #STATUS_SUBSEQUENT_CALL;
	        END_IF;
	      END_IF;
	    END_REGION
	  ELSE
	    #statDerivatedValue := #ZERO;
	    #statStatus := #STATUS_NO_CALL;
	  END_IF;
	  
	  // store previous values for edge dedection
	  #statEnableOld := #enable;
	  #statInsertOld := #insert;
	END_REGION
	
	REGION Writting to outputs
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #derivatedValue := #statDerivatedValue;
	  
	  // ENO mechanism is not used
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_FloatingAverage"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_FloatingAverage
   VAR_INPUT 
      cyclicExecution : Bool := false;
      trigger : Bool;
      value : LReal;
      windowSize : Int := 100;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      average { ExternalWritable := 'False'} : LReal;
      windowSizeReached { ExternalWritable := 'False'} : Bool;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      statValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[#ZERO_INT..#MAX_WINDOW_SIZE] of LReal;
      statValuesSum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal := 0.0;
      statArithmeticAverage { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal := 0.0;
      statWindowSizeOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int := 0;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int := 0;
      statwindowSizeReached { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statTriggerOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := false;
   END_VAR

   VAR_TEMP 
      tempValue : LReal;
      tempIndex : Int;
      tempTriggerEdge : Bool;
   END_VAR

   VAR CONSTANT 
      ZERO_INT : Int := 0;
      ZERO_LREAL : LReal := 0.0;
      MAX_WINDOW_SIZE : Int := 100;
      INCREMENT : Int := 1;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      ERR_WRONG_WINDOW_SIZE : Word := 16#8200;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_FloatingAverage
	  // Comment/Function: This function block calculates the floating arithmetic average
	  //                   of incoming REAL values each cycle or each trigger impulse.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 16.06.2016 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 02.01.2017 | Siemens Industry Online Support
	  //                       | Upgrade: TIA Portal V14 Update 1
	  // 01.01.00 | 21.02.2017 | Siemens Industry Online Support
	  //                       | Adding variable window size for calculation
	  //                       | Optimizing calculation algorithm
	  // 01.01.01 | 17.08.2018 | Siemens Industry Online Support
	  //                       | Upgrade: TIA V15 Update 2
	  // 01.01.02 | 23.11.2018 | Siemens Industry Online Support
	  //                       | Upgrade: TIA V15.1
	  // 01.01.03 | 07.11.2019 | Simatic Systems Support
	  //                       | Code refactoring, comments added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 16.06.2020 | Simatic Systems Support
	  //                       | refactor and simplify code
	  // 03.00.02 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Initialization and input data processing
	  // Copy commonly used data to temp variables
	  #tempValue := #value;
	  
	  // Positive edge detection for triggering of calculation
	  #tempTriggerEdge := #trigger AND NOT #statTriggerOld;
	  #statTriggerOld := #trigger;
	  
	  // Reset OR if window size changes the calculation
	  IF #reset OR (#windowSize <> #statWindowSizeOld) THEN
	    #statWindowSizeOld := #windowSize;
	    #statCounter := #ZERO_INT;
	    #statValuesSum := #ZERO_LREAL;
	    #statArithmeticAverage := #ZERO_LREAL;
	    #average := #ZERO_LREAL;
	    #windowSizeReached := FALSE;
	    #statwindowSizeReached := FALSE;
	    #error := false;
	    #status := #STATUS_FINISHED_NO_ERROR;
	    RETURN;
	    
	    // Check window size, in case of incorrect window size setup an error
	  ELSIF (#windowSize <= #ZERO_INT) OR (#windowSize > #MAX_WINDOW_SIZE) THEN
	    #statWindowSizeOld := #windowSize;
	    #statCounter := #ZERO_INT;
	    #statValuesSum := #ZERO_LREAL;
	    #statArithmeticAverage := #ZERO_LREAL;
	    #average := #ZERO_LREAL;
	    #statwindowSizeReached := FALSE;
	    #windowSizeReached := FALSE;
	    #error := TRUE;
	    #status := #ERR_WRONG_WINDOW_SIZE; // Info "No correct set of window size"
	    RETURN;
	  END_IF;
	END_REGION
	
	REGION Floating average calculation
	  // Triggered calculation OR cyclicly operation
	  IF #cyclicExecution OR #tempTriggerEdge THEN
	    
	    //Calculate array counter by using modulo
	    #tempIndex := #statCounter MOD #windowSize;
	    
	    // First step - fill the Array with values
	    // as long as desired window size is not reached
	    // counter and array starts with zero
	    IF (#statCounter < #windowSize) THEN
	      // Add value to sum
	      #statValuesSum += #tempValue;
	      // Add value to window
	      #statValues[#tempIndex] := #tempValue;
	      // Increment counter
	      #statCounter += #INCREMENT;
	      // Calculate avarage value
	      #statArithmeticAverage := #statValuesSum / #statCounter;
	      
	    ELSE
	      // wuindow size is reached, set output
	      #statwindowSizeReached := TRUE;
	      // Add value to sum
	      #statValuesSum += #tempValue - #statValues[#tempIndex];
	      // Add value to window
	      #statValues[#tempIndex] := #tempValue;
	      // Calculate avarage value
	      #statArithmeticAverage := #statValuesSum / #windowSize;
	      
	      // Manipulate counter value of window if modulo calc result is zero
	      IF (#tempIndex = #ZERO_INT) THEN
	        #statCounter := #windowSize + #INCREMENT;
	      ELSE
	        // Increment counter
	        #statCounter += #INCREMENT;
	      END_IF;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Outputs
	  #average := #statArithmeticAverage;
	  #windowSizeReached := #statwindowSizeReached;
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  
	  // ENO mechanism is not used - forced to true
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Histogram_DInt"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_Histogram_DInt
   VAR_INPUT 
      execute : Bool;
      numberOfClasses : UInt;
   END_VAR

   VAR_OUTPUT 
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
      subFunctionStatus { ExternalWritable := 'False'} : Word := 16#0;
      histValues { ExternalWritable := 'False'} : Array[0..1, 0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
      axis { ExternalWritable := 'False'} : Array[0..3] of LReal;
      classWidth { ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of DInt;
   END_VAR

   VAR 
      statArray { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#MAX_ARRAY_ELEMENTS] of DInt;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statSubfuncStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instShellSort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LGF_ShellSort_DInt";
      statMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statWidth { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statFrequencyValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statIndex { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statIndexOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt := 0;
      statBound { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMaxFrequency { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statHistFrequencyAbs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of Int;
      statHistFrequencyRel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
      statHistMiddleOfClass { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
   END_VAR

   VAR_TEMP 
      tempNumberOfElements : DInt;
      tempLowerBound : DInt;
      tempUpperBound : DInt;
      tempValueDInt : DInt;
      tempMinDInt : DInt;
      tempMaxDInt : DInt;
      tempLoopIndex : DInt;
      tempArrayOffset : DInt;
   END_VAR

   VAR CONSTANT 
      ZERO_INT : Int := 0;
      ZERO_LREAL : LReal := 0.0;
      DIMENSION_ONE : UInt := 1;
      ARRAY_START_INDEX : DInt := 0;
      ELEMENTS_COUNT_CORRECTION : DInt := 1;
      INCREMENT : DInt := 1;
      COUNTER_CORRECTION : DInt := 1;
      MIN_CLASSES_NUMBER : DInt := 1;
      MAX_CLASSES_NUMBER : DInt := 15;
      CLASSES_COUNTER_LOW_LIMIT : DInt := 0;
      CLASSES_COUNTER_UP_LIMIT : DInt := 14;
      RATIO : Int := 2;
      PERCENT_CORRECTION : Int := 100;
      MAX_ARRAY_ELEMENTS : DInt := 999;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      ERR_SHELL_SORT : Word := 16#8600;
      ERR_WRONG_NO_CLASSES : Word := 16#9101;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_Histogram_DInt
	  // Comment/Function: This function block calculates from measurement list all DInt
	  //                   values for creating a histogram with WinCC
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 02.00.00 | 06.11.2019 | Simatic Systems Support
	  //                       | Code refactoring, comments added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Detect execution bit
	  //Positive edge
	  IF #execute AND NOT #statExecuteOld THEN
	    //Get array boundaries
	    #tempLowerBound := LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    #tempUpperBound := UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    
	    //Reset and initialize tags
	    FOR #statCounter := #CLASSES_COUNTER_LOW_LIMIT TO #CLASSES_COUNTER_UP_LIMIT DO
	      #statHistFrequencyAbs[#statCounter] := #ZERO_INT;
	      #statHistFrequencyRel[#statCounter] := #ZERO_LREAL;
	      #statHistMiddleOfClass[#statCounter] := #ZERO_LREAL;
	    END_FOR;
	    
	    #statStatus := #STATUS_FIRST_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	    #statFrequencyValues := #ZERO_INT;
	    #statMaxFrequency := #ZERO_INT;
	    #statIndex := #ZERO_INT;
	    #statIndexOld := #ZERO_INT;
	    
	    //FB is currently inactive
	  ELSIF NOT #execute THEN
	    #statStatus := #STATUS_NO_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	  END_IF;
	  #statExecuteOld := #execute;
	END_REGION
	
	REGION Validation
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //check number of classes
	    IF ((#numberOfClasses > #MAX_CLASSES_NUMBER) OR (#numberOfClasses < #MIN_CLASSES_NUMBER)) THEN
	      #statStatus := #ERR_WRONG_NO_CLASSES;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Histogram calculation 
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    // Array elements calculation
	    // (for example: 6 - 2 = 4; but real number of elements is 5)
	    #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #ELEMENTS_COUNT_CORRECTION;
	    
	    // Shift array index to range 0..n
	    #tempArrayOffset := - #tempLowerBound;
	    
	    //Sort array
	    #instShellSort(array := #values);
	    
	    IF #instShellSort.error THEN
	      #statStatus := #ERR_SHELL_SORT;
	      #statSubfuncStatus := #instShellSort.status;
	    ELSE
	      //Identify max and min value
	      #tempMinDInt := #values[#tempLowerBound];
	      #tempMaxDInt := #values[#tempUpperBound];
	      
	      #statMin := DINT_TO_LREAL(#tempMinDInt);
	      #statMax := DINT_TO_LREAL(#tempMaxDInt);
	      
	      //calculate classwidth
	      #statWidth := (#statMax - #statMin) / #numberOfClasses;
	      #statBound := (#statMin + #statWidth);
	      
	      // Fill temporary array
	      FOR #tempLoopIndex := #tempLowerBound TO #tempUpperBound DO
	        #statArray[#tempLoopIndex + #tempArrayOffset] := #values[#tempLoopIndex];
	      END_FOR;
	      
	      //search for all values
	      FOR #statCounter := #ZERO_INT TO UINT_TO_INT(#numberOfClasses) - #COUNTER_CORRECTION DO
	        
	        //Count Values for Class 
	        #tempValueDInt := #statArray[#ARRAY_START_INDEX];
	        
	        WHILE (#tempValueDInt < LREAL_TO_DINT(#statBound)) AND #statIndex < #tempNumberOfElements - #COUNTER_CORRECTION DO
	          
	          IF #statIndex = #tempNumberOfElements THEN
	            EXIT;
	          END_IF;
	          #statIndex := #statIndex + #INCREMENT;
	          #tempValueDInt := #statArray[#statIndex];
	        END_WHILE;
	        
	        //the last value is not counted, because of rounding errors
	        IF #statIndex = #tempNumberOfElements - #COUNTER_CORRECTION THEN
	          #statIndex := #statIndex + #INCREMENT;
	        END_IF;
	        
	        // Evaluate frequency values
	        #statFrequencyValues := DINT_TO_INT(#statIndex - #statIndexOld);
	        
	        #statHistFrequencyAbs[#statCounter] := #statFrequencyValues;
	        #statHistFrequencyRel[#statCounter] := INT_TO_LREAL(#statFrequencyValues) / DINT_TO_LREAL(#tempNumberOfElements) * #PERCENT_CORRECTION;
	        
	        //Max values in one class for y-axis 
	        IF #statMaxFrequency < #statFrequencyValues THEN
	          #statMaxFrequency := #statFrequencyValues;
	        END_IF;
	        
	        #statBound := #statBound + #statWidth;
	        #statIndexOld := #statIndex;
	      END_FOR;
	    END_IF;
	    
	    //find the middle of each class
	    FOR #statCounter := #ZERO_INT TO UINT_TO_INT(#numberOfClasses) - #COUNTER_CORRECTION DO
	      #statHistMiddleOfClass[#statCounter] := #statMin + (DINT_TO_LREAL(#statCounter) * #statWidth) + #statWidth / #RATIO;
	    END_FOR;
	    
	    //Keeping those outputs in this IF statement and not in the out region
	    //because filling of the array is needed only once on first call
	    //copy values to output array
	    FOR #statCounter := #CLASSES_COUNTER_LOW_LIMIT TO #CLASSES_COUNTER_UP_LIMIT DO
	      #histValues[0, #statCounter] := #statHistFrequencyRel[#statCounter];
	      #histValues[1, #statCounter] := #statHistMiddleOfClass[#statCounter];
	    END_FOR;
	    #statStatus := #STATUS_EXECUTION_FINISHED;
	  END_IF;
	END_REGION
	
	REGION Write outputs 
	  // Assign Axis values
	  #axis[0] := #statMin;
	  #axis[1] := #statMax;
	  #axis[2] := #ZERO_LREAL;
	  #axis[3] := INT_TO_LREAL(#statMaxFrequency);
	  
	  // Write class width
	  #classWidth := #statWidth;
	  
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #subFunctionStatus := #statSubfuncStatus;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Histogram_LReal"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_Histogram_LReal
   VAR_INPUT 
      execute : Bool;
      numberOfClasses : UInt;
   END_VAR

   VAR_OUTPUT 
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
      subfunctionStatus { ExternalWritable := 'False'} : Word := 16#0;
      histValues { ExternalWritable := 'False'} : Array[0..1, 0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
      axis { ExternalWritable := 'False'} : Array[0..3] of LReal;
      classWidth { ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of LReal;
   END_VAR

   VAR 
      statArray { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#MAX_ARRAY_ELEMENTS] of LReal;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statSubfuncStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instShellSort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LGF_ShellSort_LReal";
      statMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statWidth { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statFrequencyValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statIndex { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statIndexOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt := 0;
      statBound { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMaxFrequency { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statHistFrequencyAbs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of Int;
      statHistFrequencyRel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
      statHistMiddleOfClass { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
   END_VAR

   VAR_TEMP 
      tempNumberOfElements : DInt;
      tempLowerBound : DInt;
      tempUpperBound : DInt;
      tempValueLReal : LReal;
      tempMinLReal : LReal;
      tempMaxLReal : LReal;
      tempLoopIndex : DInt;
      tempArrayOffset : DInt;
   END_VAR

   VAR CONSTANT 
      ZERO_INT : Int := 0;
      ZERO_LREAL : LReal := 0.0;
      DIMENSION_ONE : UInt := 1;
      ARRAY_START_INDEX : DInt := 0;
      ELEMENTS_COUNT_CORRECTION : DInt := 1;
      INCREMENT : DInt := 1;
      COUNTER_CORRECTION : DInt := 1;
      MIN_CLASSES_NUMBER : DInt := 1;
      MAX_CLASSES_NUMBER : DInt := 15;
      CLASSES_COUNTER_LOW_LIMIT : DInt := 0;
      CLASSES_COUNTER_UP_LIMIT : DInt := 14;
      RATIO : Int := 2;
      PERCENT_CORRECTION : Int := 100;
      MAX_ARRAY_ELEMENTS : DInt := 999;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      ERR_SHELL_SORT : Word := 16#8600;
      ERR_WRONG_NO_CLASSES : Word := 16#9101;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_Histogram_LReal
	  // Comment/Function: This function block calculates from measurement list all LReal
	  //                   values for creating a histogram with WinCC
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 02.00.00 | 06.11.2019 | Simatic Systems Support
	  //                       | Code refactoring, comments added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Detect execution bit
	  //Positive edge
	  IF #execute AND NOT #statExecuteOld THEN
	    //Get array boundaries
	    #tempLowerBound := LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    #tempUpperBound := UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    
	    //Reset and initialize tags
	    FOR #statCounter := #CLASSES_COUNTER_LOW_LIMIT TO #CLASSES_COUNTER_UP_LIMIT DO
	      #statHistFrequencyAbs[#statCounter] := #ZERO_INT;
	      #statHistFrequencyRel[#statCounter] := #ZERO_LREAL;
	      #statHistMiddleOfClass[#statCounter] := #ZERO_LREAL;
	    END_FOR;
	    
	    #statStatus := #STATUS_FIRST_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	    #statFrequencyValues := #ZERO_INT;
	    #statMaxFrequency := #ZERO_INT;
	    #statIndex := #ZERO_INT;
	    #statIndexOld := #ZERO_INT;
	    
	    //FB is currently inactive
	  ELSIF NOT #execute THEN
	    #statStatus := #STATUS_NO_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	  END_IF;
	  #statExecuteOld := #execute;
	END_REGION
	
	REGION Validation
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //check number of classes
	    IF ((#numberOfClasses > #MAX_CLASSES_NUMBER) OR (#numberOfClasses < #MIN_CLASSES_NUMBER)) THEN
	      #statStatus := #ERR_WRONG_NO_CLASSES;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Histogram calculation 
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    // Array elements calculation
	    // (for example: 6 - 2 = 4; but real number of elements is 5)
	    #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #ELEMENTS_COUNT_CORRECTION;
	    
	    // Shift array index to range 0..n
	    #tempArrayOffset := - #tempLowerBound;
	    
	    //Sort array
	    #instShellSort(array := #values);
	    
	    IF #instShellSort.error THEN
	      #statStatus := #ERR_SHELL_SORT;
	      #statSubfuncStatus := #instShellSort.status;
	    ELSE
	      //Identify max and min value
	      #tempMinLReal := #values[#tempLowerBound];
	      #tempMaxLReal := #values[#tempUpperBound];
	      
	      #statMin := #tempMinLReal;
	      #statMax := #tempMaxLReal;
	      
	      //calculate classwidth
	      #statWidth := (#statMax - #statMin) / #numberOfClasses;
	      #statBound := (#statMin + #statWidth);
	      
	      // Fill temporary array
	      FOR #tempLoopIndex := #tempLowerBound TO #tempUpperBound DO
	        #statArray[#tempLoopIndex + #tempArrayOffset] := #values[#tempLoopIndex];
	      END_FOR;
	      
	      //search for all values
	      FOR #statCounter := #ZERO_INT TO UINT_TO_INT(#numberOfClasses) - #COUNTER_CORRECTION DO
	        
	        //Count Values for Class 
	        #tempValueLReal := #statArray[#ARRAY_START_INDEX];
	        
	        WHILE (#tempValueLReal < LREAL_TO_DINT(#statBound)) AND #statIndex < #tempNumberOfElements - #COUNTER_CORRECTION DO
	          
	          IF #statIndex = #tempNumberOfElements THEN
	            EXIT;
	          END_IF;
	          #statIndex := #statIndex + #INCREMENT;
	          #tempValueLReal := #statArray[#statIndex];
	        END_WHILE;
	        
	        //the last value is not counted, because of rounding errors
	        IF #statIndex = #tempNumberOfElements - #COUNTER_CORRECTION THEN
	          #statIndex := #statIndex + #INCREMENT;
	        END_IF;
	        
	        // Evaluate frequency values
	        #statFrequencyValues := DINT_TO_INT(#statIndex - #statIndexOld);
	        
	        #statHistFrequencyAbs[#statCounter] := #statFrequencyValues;
	        #statHistFrequencyRel[#statCounter] := INT_TO_LREAL(#statFrequencyValues) / DINT_TO_LREAL(#tempNumberOfElements) * #PERCENT_CORRECTION;
	        
	        //Max values in one class for y-axis 
	        IF #statMaxFrequency < #statFrequencyValues THEN
	          #statMaxFrequency := #statFrequencyValues;
	        END_IF;
	        
	        #statBound := #statBound + #statWidth;
	        #statIndexOld := #statIndex;
	      END_FOR;
	    END_IF;
	    
	    //find the middle of each class
	    FOR #statCounter := #ZERO_INT TO UINT_TO_INT(#numberOfClasses) - #COUNTER_CORRECTION DO
	      #statHistMiddleOfClass[#statCounter] := #statMin + (DINT_TO_LREAL(#statCounter) * #statWidth) + #statWidth / #RATIO;
	    END_FOR;
	    
	    //Keeping those outputs in this IF statement and not in the out region
	    //because filling of the array is needed only once on first call
	    //copy values to output array
	    FOR #statCounter := #CLASSES_COUNTER_LOW_LIMIT TO #CLASSES_COUNTER_UP_LIMIT DO
	      #histValues[0, #statCounter] := #statHistFrequencyRel[#statCounter];
	      #histValues[1, #statCounter] := #statHistMiddleOfClass[#statCounter];
	    END_FOR;
	    #statStatus := #STATUS_EXECUTION_FINISHED;
	  END_IF;
	END_REGION
	
	REGION Write outputs 
	  // Assign Axis values
	  #axis[0] := #statMin;
	  #axis[1] := #statMax;
	  #axis[2] := #ZERO_LREAL;
	  #axis[3] := INT_TO_LREAL(#statMaxFrequency);
	  
	  // Write class width
	  #classWidth := #statWidth;
	  
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #subfunctionStatus := #statSubfuncStatus;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Histogram_UDInt"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_Histogram_UDInt
   VAR_INPUT 
      execute : Bool;
      numberOfClasses : UInt;
   END_VAR

   VAR_OUTPUT 
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
      subfunctionStatus { ExternalWritable := 'False'} : Word := 16#0;
      histValues { ExternalWritable := 'False'} : Array[0..1, 0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
      axis { ExternalWritable := 'False'} : Array[0..3] of LReal;
      classWidth { ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR_IN_OUT 
      values : Array[*] of UDInt;
   END_VAR

   VAR 
      statArray { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#MAX_ARRAY_ELEMENTS] of UDInt;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statSubfuncStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instShellSort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LGF_ShellSort_UDInt";
      statMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statWidth { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statFrequencyValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statIndex { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statIndexOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt := 0;
      statBound { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statMaxFrequency { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statHistFrequencyAbs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of Int;
      statHistFrequencyRel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
      statHistMiddleOfClass { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#CLASSES_COUNTER_UP_LIMIT] of LReal;
   END_VAR

   VAR_TEMP 
      tempNumberOfElements : DInt;
      tempLowerBound : DInt;
      tempUpperBound : DInt;
      tempValueUDInt : UDInt;
      tempMinUDInt : UDInt;
      tempMaxUDInt : UDInt;
      tempLoopIndex : DInt;
      tempArrayOffset : DInt;
   END_VAR

   VAR CONSTANT 
      ZERO_INT : Int := 0;
      ZERO_LREAL : LReal := 0.0;
      DIMENSION_ONE : UInt := 1;
      ARRAY_START_INDEX : DInt := 0;
      ELEMENTS_COUNT_CORRECTION : DInt := 1;
      INCREMENT : DInt := 1;
      COUNTER_CORRECTION : DInt := 1;
      MIN_CLASSES_NUMBER : DInt := 1;
      MAX_CLASSES_NUMBER : DInt := 15;
      CLASSES_COUNTER_LOW_LIMIT : DInt := 0;
      CLASSES_COUNTER_UP_LIMIT : DInt := 14;
      RATIO : Int := 2;
      PERCENT_CORRECTION : Int := 100;
      MAX_ARRAY_ELEMENTS : DInt := 999;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      ERR_SHELL_SORT : Word := 16#8600;
      ERR_WRONG_NO_CLASSES : Word := 16#9101;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_Histogram_UDInt
	  // Comment/Function: This function block calculates from measurement list all UDInt
	  //                   values for creating a histogram with WinCC
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 02.00.00 | 06.11.2019 | Simatic Systems Support
	  //                       | Code refactoring, comments added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Detect execution bit
	  //Positive edge
	  IF #execute AND NOT #statExecuteOld THEN
	    //Get array boundaries
	    #tempLowerBound := LOWER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    #tempUpperBound := UPPER_BOUND(ARR := #values, DIM := #DIMENSION_ONE);
	    
	    //Reset and initialize tags
	    FOR #statCounter := #CLASSES_COUNTER_LOW_LIMIT TO #CLASSES_COUNTER_UP_LIMIT DO
	      #statHistFrequencyAbs[#statCounter] := #ZERO_INT;
	      #statHistFrequencyRel[#statCounter] := #ZERO_LREAL;
	      #statHistMiddleOfClass[#statCounter] := #ZERO_LREAL;
	    END_FOR;
	    
	    #statStatus := #STATUS_FIRST_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	    #statFrequencyValues := #ZERO_INT;
	    #statMaxFrequency := #ZERO_INT;
	    #statIndex := #ZERO_INT;
	    #statIndexOld := #ZERO_INT;
	    
	    //FB is currently inactive
	  ELSIF NOT #execute  THEN
	    #statStatus := #STATUS_NO_CALL;
	    #statSubfuncStatus := #SUB_STATUS_NO_ERROR;
	  END_IF;
	  #statExecuteOld := #execute;
	END_REGION
	
	REGION Validation
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    //check number of classes
	    IF ((#numberOfClasses > #MAX_CLASSES_NUMBER) OR (#numberOfClasses < #MIN_CLASSES_NUMBER)) THEN
	      #statStatus := #ERR_WRONG_NO_CLASSES;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION Histogram calculation 
	  IF #statStatus = #STATUS_FIRST_CALL THEN
	    // Array elements calculation
	    // (for example: 6 - 2 = 4; but real number of elements is 5)
	    #tempNumberOfElements := #tempUpperBound - #tempLowerBound + #ELEMENTS_COUNT_CORRECTION;
	    
	    // Shift array index to range 0..n
	    #tempArrayOffset := - #tempLowerBound;
	    
	    //Sort array
	    #instShellSort(array := #values);
	    
	    IF #instShellSort.error THEN
	      #statStatus := #ERR_SHELL_SORT;
	      #statSubfuncStatus := #instShellSort.status;
	    ELSE
	      //Identify max and min value
	      #tempMinUDInt := #values[#tempLowerBound];
	      #tempMaxUDInt := #values[#tempUpperBound];
	      
	      #statMin := UDINT_TO_REAL(#tempMinUDInt);
	      #statMax := UDINT_TO_REAL(#tempMaxUDInt);
	      
	      //calculate classwidth
	      #statWidth := (#statMax - #statMin) / #numberOfClasses;
	      #statBound := (#statMin + #statWidth);
	      
	      // Fill temporary array
	      FOR #tempLoopIndex := #tempLowerBound TO #tempUpperBound DO
	        #statArray[#tempLoopIndex + #tempArrayOffset] := #values[#tempLoopIndex];
	      END_FOR;
	      
	      //search for all values
	      FOR #statCounter := #ZERO_INT TO UINT_TO_INT(#numberOfClasses) - #COUNTER_CORRECTION DO
	        
	        //Count Values for Class 
	        #tempValueUDInt := #statArray[#ARRAY_START_INDEX];
	        
	        WHILE (#tempValueUDInt < LREAL_TO_UDINT(#statBound)) AND #statIndex < (#tempNumberOfElements - #COUNTER_CORRECTION) DO
	          
	          IF #statIndex = #tempNumberOfElements THEN
	            EXIT;
	          END_IF;
	          #statIndex := #statIndex + #INCREMENT;
	          #tempValueUDInt := #statArray[#statIndex];
	        END_WHILE;
	        
	        //the last value is not counted, because of rounding errors
	        IF #statIndex = #tempNumberOfElements - #COUNTER_CORRECTION THEN
	          #statIndex := #statIndex + #INCREMENT;
	        END_IF;
	        
	        // Evaluate frequency values
	        #statFrequencyValues := DINT_TO_INT(#statIndex - #statIndexOld);
	        
	        #statHistFrequencyAbs[#statCounter] := #statFrequencyValues;
	        #statHistFrequencyRel[#statCounter] := INT_TO_REAL(#statFrequencyValues) / DINT_TO_REAL(#tempNumberOfElements) * #PERCENT_CORRECTION;
	        
	        //Max values in one class for y-axis 
	        IF #statMaxFrequency < #statFrequencyValues THEN
	          #statMaxFrequency := #statFrequencyValues;
	        END_IF;
	        
	        #statBound := #statBound + #statWidth;
	        #statIndexOld := #statIndex;
	      END_FOR;
	    END_IF;
	    
	    //find the middle of each class
	    FOR #statCounter := #ZERO_INT TO UINT_TO_INT(#numberOfClasses) - #COUNTER_CORRECTION DO
	      #statHistMiddleOfClass[#statCounter] := #statMin + (DINT_TO_REAL(#statCounter) * #statWidth) + #statWidth / #RATIO;
	    END_FOR;
	    
	    //Keeping those outputs in this IF statement and not in the out region
	    //because filling of the array is needed only once on first call
	    //copy values to output array
	    FOR #statCounter := #CLASSES_COUNTER_LOW_LIMIT TO #CLASSES_COUNTER_UP_LIMIT DO
	      #histValues[0, #statCounter] := #statHistFrequencyRel[#statCounter];
	      #histValues[1, #statCounter] := #statHistMiddleOfClass[#statCounter];
	    END_FOR;
	    #statStatus := #STATUS_EXECUTION_FINISHED;
	  END_IF;
	END_REGION
	
	REGION Write outputs 
	  // Aassign Axis values
	  #axis[0] := #statMin;
	  #axis[1] := #statMax;
	  #axis[2] := #ZERO_LREAL;
	  #axis[3] := INT_TO_LREAL(#statMaxFrequency);
	  
	  // Write class width
	  #classWidth := #statWidth;
	  
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #subfunctionStatus := #statSubfuncStatus;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_SimpleSmoothingFB"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_SimpleSmoothingFB
   VAR_INPUT 
      enable : Bool;
      insert : Bool;
      value : LReal;
   END_VAR

   VAR_OUTPUT 
      smoothedValue { ExternalWritable := 'False'} : LReal;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
   END_VAR

   VAR 
      statValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#MINIMUM_NUMBER_OF_VALUES] of LReal;
      statCount { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statSmoothedValue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statEnableOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statInsertOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR

   VAR CONSTANT 
      ZERO_REAL : Real := 0.0;
      MINIMUM_NUMBER_OF_VALUES : UDInt := 2;
      NUMBER_OF_VALUES : UDInt := 3;
      INCREMENT_VALUE : Int := 1;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      STATUS_SUBSEQUENT_CALL : Word := 16#7002;
      STATUS_NOT_ENOUGH_VALUES : Word := 16#7010;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2018
	  //----------------------------------------------------------------------------
	  // Title:            LGF_SimpleSmoothingFB
	  // Comment/Function: This function block calculates smoothed values of a variable
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.03 | 05.11.2019 | Simatic Systems Support
	  //                       | Regions, comments and constants are added  
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Check function block call
	  // Check if FB is triggered - rising edge on enable
	  IF #enable AND NOT #statEnableOld THEN
	    // Reset static values
	    #statCount := 0;
	    #statValues[0] := #ZERO_REAL;
	    #statValues[1] := #ZERO_REAL;
	    #statValues[2] := #ZERO_REAL;
	    
	    //Set status for first call
	    #statStatus := #STATUS_FIRST_CALL;
	    
	    // Enabled after edge trigger
	  ELSIF #enable AND #statEnableOld THEN
	    REGION Values inserting and smoothing calculation
	      // positive edge of insert detected 
	      IF #insert AND NOT #statInsertOld THEN
	        
	        // Copy new value
	        #statValues[0] := #statValues[1];
	        #statValues[1] := #statValues[2];
	        #statValues[2] := #value;
	        
	        // Check if the minimum needed insered values is reached
	        // Increase the count of added values
	        IF #statCount <= #MINIMUM_NUMBER_OF_VALUES THEN
	          #statCount += #INCREMENT_VALUE;
	          #statStatus := #STATUS_NOT_ENOUGH_VALUES;
	        ELSE
	          // 3 values inserted, calculate smoothed value
	          #statSmoothedValue := (#statValues[0] + #statValues[1] + #statValues[2]) / #NUMBER_OF_VALUES;
	          #statStatus := #STATUS_SUBSEQUENT_CALL;
	        END_IF;
	      END_IF;
	    END_REGION
	  ELSE
	    #statStatus := #STATUS_NO_CALL;
	    #statSmoothedValue := #ZERO_REAL;
	  END_IF;
	  
	  // Store previous values for edge dedection
	  #statEnableOld := #enable;
	  #statInsertOld := #insert;
	END_REGION
	
	REGION Writting to outputs
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #smoothedValue := #statSmoothedValue;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_SmoothByPolynomFB"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_SmoothByPolynomFB
   VAR_INPUT 
      enable : Bool;
      insert : Bool;
      value : LReal;
   END_VAR

   VAR_OUTPUT 
      smoothedValue { ExternalWritable := 'False'} : LReal;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
   END_VAR

   VAR 
      statValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#MINIMUM_NUMBER_OF_VALUES] of LReal;
      statCount { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int := 0;
      statSmoothedValue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statEnableOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := false;
      statInsertOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := false;
   END_VAR

   VAR CONSTANT 
      ZERO_REAL : Real := 0.0;
      MINIMUM_NUMBER_OF_VALUES : UDInt := 4;
      INCREMENT_VALUE : Int := 1;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      STATUS_SUBSEQUENT_CALL : Word := 16#7002;
      STATUS_NOT_ENOUGH_VALUES : Word := 16#7010;
   END_VAR


BEGIN
	REGION Block info header
	  //============================================================================
	  // SIEMENS AG / (c)Copyright 2018
	  //----------------------------------------------------------------------------
	  // Title:            LGF_SmoothByPolynomFB
	  // Comment/Function: Calculates smoothed values by placing 3rd degree polynomial
	  //                   through five value points.
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled, forced to true - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 | 23.11.2018 | Siemens Industry Online Support
	  //                       | First released version
	  // 01.00.01 | 05.11.2019 | Simatic Systems Support
	  //                       | Bugfixes, regions, comments and constants are added
	  // 03.00.00 | 23.04.2020 | Simatic Systems Support
	  //                       | Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 | 06.04.2021 | Simatic Systems Support
	  //                       | Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Check function block call
	  // Check if FB is triggered - rising edge on enable
	  IF #enable AND NOT #statEnableOld THEN
	    // Reset static values
	    #statCount := 0;
	    #statValues[0] := #ZERO_REAL;
	    #statValues[1] := #ZERO_REAL;
	    #statValues[2] := #ZERO_REAL;
	    #statValues[3] := #ZERO_REAL;
	    #statValues[4] := #ZERO_REAL;
	    
	    // Set status for first call
	    #statStatus := #STATUS_FIRST_CALL;
	    
	    // Enabled after edge trigger
	  ELSIF #enable AND #statEnableOld THEN
	    REGION Values inserting and smoothing calculation
	      // Positive edge of insert detected 
	      IF #insert AND NOT #statInsertOld THEN
	        
	        // Copy new value
	        #statValues[0] := #statValues[1]; // -> n-2
	        #statValues[1] := #statValues[2]; // -> n-1
	        #statValues[2] := #statValues[3]; // -> n
	        #statValues[3] := #statValues[4]; // -> n+1
	        #statValues[4] := #value;         // -> n+2
	        
	        // Check if the minimum needed insered values is reached
	        // Increase the count of added values
	        IF #statCount <= #MINIMUM_NUMBER_OF_VALUES THEN
	          #statCount += #INCREMENT_VALUE;
	          #statStatus := #STATUS_NOT_ENOUGH_VALUES;
	        ELSE
	          // Calculate new smoothed value // keep the "Magic Numbers" as they are part of the Math equation and would extent the formular in a unreadable way
	          // y(n)=1/35*(-3*y(n-2)+12*y(n-1)+17*y(n)+12*y(n+1)-3*y(n+2))
	          // 1/35 = 0.028571
	          #statSmoothedValue := 0.028571 * (-3 * #statValues[0] + 12 * #statValues[1] + 17 * #statValues[2] + 12 * #statValues[3] - 3 * #statValues[4]);
	          #statStatus := #STATUS_SUBSEQUENT_CALL;
	        END_IF;
	      END_IF;
	    END_REGION
	  ELSE
	    #statStatus := #STATUS_NO_CALL;
	    #statSmoothedValue := #ZERO_REAL;
	  END_IF;
	  
	  // Store previous values for edge dedection
	  #statEnableOld := #enable;
	  #statInsertOld := #insert;
	END_REGION
	
	REGION Writting to outputs
	  #error := #statStatus.%X15;
	  #status := #statStatus;
	  #smoothedValue := #statSmoothedValue;
	  
	  // ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

