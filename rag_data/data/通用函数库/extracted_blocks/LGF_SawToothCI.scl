FUNCTION_BLOCK "LGF_SawToothCI"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_SawToothCI
   VAR_INPUT 
      amplitude : Real := 1.0;
      offset : Real;
      periode : UDInt := 1000;
      phaseShift : Real;
      callOB : OB_CYCLIC;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      value { ExternalWritable := 'False'} : Real;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word;
      subFunctionStatus { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
   END_VAR

   VAR_TEMP 
      tempCycleTime : UDInt;
      tempCyclePhase : UDInt;
      tempCycleStatus : Word;
      tempReadTimeStatus : Int;
      tempValue : Real;
      tempPhaseShift : Real;
   END_VAR

   VAR CONSTANT 
      SECOND_IN_MS : UDInt := 1000;
      ZERO : Int := 0;
      SLOPE : Real := 2.0;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      QRY_CINT_OB_UNAVAILABLE : Word := 16#0000;
      ERR_OB_UNAVAILABLE : Word := 16#8600;
      ERR_QRY_CINT : Word := 16#8601;
   END_VAR


BEGIN
	REGION Block info header
	  //=============================================================================
	  // Siemens AG / (c)Copyright 2017
	  //-----------------------------------------------------------------------------
	  // Title:            LGF_SawToothCl - Cyclic Interupt
	  // Comment/Function: This function generates a sawtooth-shaped signal profile. For this it uses the time interval of the calling Cyclic Interrupt OB.
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.06 23.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  //                      phase shift availability added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Get sample time
	  //get sample time, according to the cyclic interrupt OB number
	  #tempReadTimeStatus := QRY_CINT(OB_NR := #callOB, CYCLE => #tempCycleTime,
	                                  PHASE => #tempCyclePhase, STATUS => #tempCycleStatus);
	  
	  REGION Error handling
	    // Generate error message of the return value of QRY_CINT function
	    IF #tempReadTimeStatus <> #ZERO THEN
	      #error := TRUE;
	      #status := #ERR_QRY_CINT;
	      #subFunctionStatus := INT_TO_WORD(#tempReadTimeStatus);
	      #value := #ZERO;
	      RETURN;
	      
	      // Generate error message when OB unavailable
	    ELSIF (#tempCycleStatus = #QRY_CINT_OB_UNAVAILABLE) THEN
	      #error := TRUE;
	      #status := #ERR_OB_UNAVAILABLE;
	      #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	      #value := #ZERO;
	      RETURN;
	    END_IF;
	  END_REGION
	END_REGION
	
	REGION Caluclations AND outputs assigment  
	  IF #reset THEN
	    #statCounter := 0;
	    #tempValue := #ZERO;
	  ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #statCounter += #tempCycleTime / #SECOND_IN_MS;
	    #statCounter := #statCounter MOD #periode;
	    
	    // calculate true phase shift with modulo
	    #tempPhaseShift := UDINT_TO_REAL((#statCounter + REAL_TO_UDINT(#phaseShift)) MOD #periode);
	    
	    // formula to calculate saw tooth
	    #tempValue := #SLOPE * #amplitude / UDINT_TO_REAL(#periode) * #tempPhaseShift - #amplitude;
	  END_IF;
	  
	  #value := #tempValue + #offset;
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK