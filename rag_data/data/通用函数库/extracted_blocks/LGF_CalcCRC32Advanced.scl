FUNCTION "LGF_CalcCRC32Advanced" : DWord
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_CRC32Advanced
   VAR_INPUT 
      initValue { S7_PredefinedAssignment := '16#00'} : DWord;
      mask { S7_PredefinedAssignment := '16#00'} : DWord;
      finalXorValue { S7_PredefinedAssignment := '16#00'} : DWord;
      reflectInput { S7_PredefinedAssignment := 'FALSE'} : Bool;
      reflectResult { S7_PredefinedAssignment := 'FALSE'} : Bool;
      noOfElements { S7_PredefinedAssignment := '0'} : UInt;
   END_VAR

   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_IN_OUT 
      "array" : Array[*] of Byte;
   END_VAR

   VAR_TEMP 
      tempInput : Byte;
      tempCRC : DWord;
      tempInvCRC : DWord;
      tempLowerLimit : DInt;
      tempUpperLimit : DInt;
      tempIndexArray : DInt;
      tempIndexCRC : DInt;
   END_VAR

   VAR CONSTANT 
      SHIFT_ONE_BIT : UInt := 1;
      SHIFT_THREE_BYTE : UInt := 24;
      ARRAY_FIRST_DIMENSION : UInt := 1;
      CRC_LOOP_LOWER_LIMIT : DInt := 0;
      CRC_LOOP_UPPER_LIMIT : DInt := 7;
      STATUS_NO_ERROR : Word := 16#0000;
      ERR_NO_OF_ELEMENTS : Word := 16#8400;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_CRC32Advanced
	  // Comment/Function: This function makes a CRC calculation according
	  //                   to the CRC-32 algorithm
	  //                   advanced because of reflect In/Out and final XOR combination
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled - no error handling, no failure possible
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.03 09.10.2019  Simatic Systems Support
	  //                      Code refactoring, comments added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 12.11.2020  Simatic Systems Support
	  //                      Insert documentation
	  //                      Assign default start values to optional inputs - `initValue`, `mask`, `finalXorValue`, `reflectInput`, `reflectResult`
	  // 03.01.00 14.04.2023  Simatic Systems Support
	  //                      Add input `noOfElements` to assign length to be converted different from array size 
	  //                      Add outputs `error` and `status` display a wrong assignment to `noOfElements`
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Initialization and input data processing
	  // Defining initial value for algorithm
	  #tempCRC := #initValue;
	  // Input array size calculation
	  #tempLowerLimit := LOWER_BOUND(ARR := #array, DIM := #ARRAY_FIRST_DIMENSION);
	  #tempUpperLimit := UPPER_BOUND(ARR := #array, DIM := #ARRAY_FIRST_DIMENSION);
	  
	  // check paramter `noOfELements`, if gretaer than zero check if fits to array size
	  IF #noOfElements > 0 THEN
	    IF #noOfElements > (#tempUpperLimit - #tempLowerLimit + 1) THEN
	      #status := #ERR_NO_OF_ELEMENTS;
	      #error := TRUE;
	      ENO := FALSE;
	      #LGF_CalcCRC32Advanced := #tempCRC;
	      RETURN;
	    ELSE
	      #tempUpperLimit := #tempLowerLimit + #noOfElements - 1;
	    END_IF;
	  END_IF;
	END_REGION
	
	REGION CRC calculation
	  FOR #tempIndexArray := #tempLowerLimit TO #tempUpperLimit DO
	    
	    IF #reflectInput THEN
	      // Reverse bit order in input byte
	      #tempInput.%X7 := #array[#tempIndexArray].%X0;
	      #tempInput.%X6 := #array[#tempIndexArray].%X1;
	      #tempInput.%X5 := #array[#tempIndexArray].%X2;
	      #tempInput.%X4 := #array[#tempIndexArray].%X3;
	      #tempInput.%X3 := #array[#tempIndexArray].%X4;
	      #tempInput.%X2 := #array[#tempIndexArray].%X5;
	      #tempInput.%X1 := #array[#tempIndexArray].%X6;
	      #tempInput.%X0 := #array[#tempIndexArray].%X7;
	    ELSE
	      #tempInput := #array[#tempIndexArray];
	    END_IF;
	    
	    // Perform division using XOR function for appropriate DWord in array (with shift byte into MSB of 32bit CRC)
	    #tempCRC := #tempCRC XOR SHL(IN := BYTE_TO_DWORD(#tempInput), N := #SHIFT_THREE_BYTE);
	    
	    FOR #tempIndexCRC := #CRC_LOOP_LOWER_LIMIT TO #CRC_LOOP_UPPER_LIMIT DO
	      // Check if MSB is set
	      IF #tempCRC.%X31 THEN
	        // Shift left and perform division by mask polynomial using XOR function
	        #tempCRC := SHL(IN := #tempCRC, N := #SHIFT_ONE_BIT) XOR #mask;
	      ELSE
	        // Shift left without division
	        #tempCRC := SHL(IN := #tempCRC, N := #SHIFT_ONE_BIT);
	      END_IF;
	    END_FOR;
	    
	  END_FOR;
	END_REGION
	
	REGION Outputs assignment
	  IF #reflectResult THEN
	    // Reverse bit order in CRC checksum
	    #tempInvCRC.%X31 := #tempCRC.%X0;
	    #tempInvCRC.%X30 := #tempCRC.%X1;
	    #tempInvCRC.%X29 := #tempCRC.%X2;
	    #tempInvCRC.%X28 := #tempCRC.%X3;
	    #tempInvCRC.%X27 := #tempCRC.%X4;
	    #tempInvCRC.%X26 := #tempCRC.%X5;
	    #tempInvCRC.%X25 := #tempCRC.%X6;
	    #tempInvCRC.%X24 := #tempCRC.%X7;
	    #tempInvCRC.%X23 := #tempCRC.%X8;
	    #tempInvCRC.%X22 := #tempCRC.%X9;
	    #tempInvCRC.%X21 := #tempCRC.%X10;
	    #tempInvCRC.%X20 := #tempCRC.%X11;
	    #tempInvCRC.%X19 := #tempCRC.%X12;
	    #tempInvCRC.%X18 := #tempCRC.%X13;
	    #tempInvCRC.%X17 := #tempCRC.%X14;
	    #tempInvCRC.%X16 := #tempCRC.%X15;
	    #tempInvCRC.%X15 := #tempCRC.%X16;
	    #tempInvCRC.%X14 := #tempCRC.%X17;
	    #tempInvCRC.%X13 := #tempCRC.%X18;
	    #tempInvCRC.%X12 := #tempCRC.%X19;
	    #tempInvCRC.%X11 := #tempCRC.%X20;
	    #tempInvCRC.%X10 := #tempCRC.%X21;
	    #tempInvCRC.%X9 := #tempCRC.%X22;
	    #tempInvCRC.%X8 := #tempCRC.%X23;
	    #tempInvCRC.%X7 := #tempCRC.%X24;
	    #tempInvCRC.%X6 := #tempCRC.%X25;
	    #tempInvCRC.%X5 := #tempCRC.%X26;
	    #tempInvCRC.%X4 := #tempCRC.%X27;
	    #tempInvCRC.%X3 := #tempCRC.%X28;
	    #tempInvCRC.%X2 := #tempCRC.%X29;
	    #tempInvCRC.%X1 := #tempCRC.%X30;
	    #tempInvCRC.%X0 := #tempCRC.%X31;
	    
	    #LGF_CalcCRC32Advanced := #tempInvCRC XOR #finalXorValue;
	  ELSE
	    #LGF_CalcCRC32Advanced := #tempCRC XOR #finalXorValue;
	  END_IF;
	  
	  #status := #STATUS_NO_ERROR;
	  #error := FALSE;
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION