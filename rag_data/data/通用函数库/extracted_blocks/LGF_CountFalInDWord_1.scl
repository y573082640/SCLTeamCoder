FUNCTION "LGF_CountFalInDWord_1" : Int
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry_Support
FAMILY : LGF
NAME : LGF_CountFalInDWord
   VAR_INPUT 
      dWordActCycle : DWord;
      dWordPrevCycle : DWord;
   END_VAR

   VAR_TEMP 
      tempCount : Int;
   END_VAR


BEGIN
	REGION Block info header
	  //=============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //-----------------------------------------------------------------------------
	  // Library:       LGF (Library General Functions)
	  // Tested with:   CPU1212C DC/DC/DC FW:V4.2
	  // Engineering:   TIA Portal V14 Update 1
	  // Restrictions:  -
	  // Requirements:  PLC (S7-1200 / S7-1500)
	  // Functionality: Detects and counts falling edges in variables of type DWORD
	  //                NOTE
	  //                ==LEGACY FUNCTION==
	  //                Please update AND use the FB with the same name `LGF_CountFalInDWord` in the future!
	  //                This function is no longer maintained!
	  //-----------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 19.08.2015  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 02.01.2017  Siemens Industry Online Support
	  //                      Upgrade: TIA V14 Update 1
	  // 01.00.02 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.03 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 03.00.01 12.11.2020  Simatic Systems Support
	  //                      Insert documentation and LEGACY Hint
	  //                      Please use the FB with the same name `LGF_CountFalInDWord` in the future
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	// Initialization
	#tempCount := 0;
	
	//Byte 0
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000000000011) = DW#2#00000000000000000000000000000010) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000000000110) = DW#2#00000000000000000000000000000100) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000000001100) = DW#2#00000000000000000000000000001000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000000011000) = DW#2#00000000000000000000000000010000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000000110000) = DW#2#00000000000000000000000000100000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit             76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000001100000) = DW#2#00000000000000000000000001000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit             76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000011000000) = DW#2#00000000000000000000000010000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000000110000000) = DW#2#00000000000000000000000100000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	
	//Byte 1
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000001100000000) = DW#2#00000000000000000000001000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000011000000000) = DW#2#00000000000000000000010000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000000110000000000) = DW#2#00000000000000000000100000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000001100000000000) = DW#2#00000000000000000001000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000011000000000000) = DW#2#00000000000000000010000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000000110000000000000) = DW#2#00000000000000000100000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000001100000000000000) = DW#2#00000000000000001000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit             76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000011000000000000000) = DW#2#00000000000000010000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	
	//Byte 2
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000000110000000000000000) = DW#2#00000000000000100000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000001100000000000000000) = DW#2#00000000000001000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000011000000000000000000) = DW#2#00000000000010000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit             76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000000110000000000000000000) = DW#2#00000000000100000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000001100000000000000000000) = DW#2#00000000001000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000011000000000000000000000) = DW#2#00000000010000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000000110000000000000000000000) = DW#2#00000000100000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000001100000000000000000000000) = DW#2#00000001000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	
	//Byte 3
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000011000000000000000000000000) = DW#2#00000010000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00000110000000000000000000000000) = DW#2#00000100000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00001100000000000000000000000000) = DW#2#00001000000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00011000000000000000000000000000) = DW#2#00010000000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#00110000000000000000000000000000) = DW#2#00100000000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#01100000000000000000000000000000) = DW#2#01000000000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                76543210765432107654321076543210         76543210765432107654321076543210
	IF ((#dWordActCycle AND DW#2#11000000000000000000000000000000) = DW#2#10000000000000000000000000000000) THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	//Bit                 76543210765432107654321076543210         76543210765432107654321076543210
	IF (((#dWordActCycle AND DW#2#10000000000000000000000000000000) = DW#2#00000000000000000000000000000000)
	  AND ((#dWordPrevCycle AND DW#2#00000000000000000000000000000001) = DW#2#00000000000000000000000000000001))
	THEN
	  #tempCount := #tempCount + 1;
	END_IF;
	
	//Output
	#LGF_CountFalInDWord_1 := #tempCount;
END_FUNCTION