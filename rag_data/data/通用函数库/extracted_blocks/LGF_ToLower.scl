FUNCTION "LGF_ToLower" : String
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'Siemens Industry Online Support'
FAMILY : LGF
NAME : LGF_ToLower
   VAR_INPUT 
      In : String;
   END_VAR

   VAR_TEMP 
      tempCurrentCharIndex : UInt;
      tempStringLength : UInt;
      tempCurrentChar : Char;
      tempResult : String;
   END_VAR

   VAR CONSTANT 
      TO_UPPER_OFFSET : USInt := 32;
      UPPER_CASE_A : Char := 'A';
      UPPER_CASE_Z : Char := 'Z';
      FIRST_CHARACTER_POSITION : UInt := 1;
      NEXT_POSITION : UInt := 1;
   END_VAR


BEGIN
	REGION BLOCK INFO HEADER
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2023
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_ToLower
	  // Comment/Function: This function converts the capital letters of a string into their lower case equivalents.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V4.0
	  // Engineering:      TIA Portal V16.0
	  // Restrictions:     ENO mechanism is not used, no error handling
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	(/**/)
	END_REGION DESCRIPTION
	
	REGION INITIALIZATION
	  // First we clean up the resultstring to avoid returning random data
	  #tempResult := '';
	  #tempCurrentChar := '$00';
	  
	  // to avoid continuous system calls to LEN, we get the string length only once
	  // as it doesn't change during the conversion
	  #tempStringLength := INT_TO_UINT(LEN(#In));
	  
	  // we start converting at the beginning of the string. The first index into the string 
	  // is 1 (not zero based counting)
	  #tempCurrentCharIndex := #FIRST_CHARACTER_POSITION;
	END_REGION
	
	REGION CONVERSION
	  WHILE #tempCurrentCharIndex <= #tempStringLength DO
	    // We check the character at the indexed position in the string
	    // its ASCII code must be between 'A' and 'Z' (included) to be object of conversion
	    IF TRUE
	      AND #UPPER_CASE_A <= #In[#tempCurrentCharIndex]
	      AND #In[#tempCurrentCharIndex] <= #UPPER_CASE_Z
	    THEN
	      // The character is in the range of ASCII codes object to conversion
	      // Let's convert it into lower case
	      #tempCurrentChar := USINT_TO_CHAR(CHAR_TO_USINT(#In[#tempCurrentCharIndex]) + #TO_UPPER_OFFSET);
	    ELSE
	      // the character is not object to conversion. Therefore, we only copy it into the result string
	      #tempCurrentChar := #In[#tempCurrentCharIndex];
	    END_IF;
	    // Append the buffer character (may be converted) to the result string
	    #tempResult := CONCAT(IN1 := #tempResult,
	                          IN2 := #tempCurrentChar);
	    // Move on to the next character in the string
	    #tempCurrentCharIndex += #NEXT_POSITION;
	  END_WHILE;
	END_REGION
	
	// Returning the converted string as function result
	#LGF_ToLower := #tempResult;
	ENO := TRUE;
	
END_FUNCTION