FUNCTION "LGF_StringToTaddr" : TADDR_Param
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industry
FAMILY : LGF
NAME : LGF_StringToTaddr
   VAR_INPUT 
      ipAddressString : String;
   END_VAR

   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_TEMP 
      tempOctetIndex : Int;
      tempCharPosition : Int;
      tempAddressString : String;
      tempOctetString : String[#MAX_CHAR_FOR_IP_OCTET_NUMBER];
      tempNumber : UDInt;
      tempPortNumberIsSpecified : Bool;
      tempIpAdressTaddr {InstructionName := 'TADDR_Param'; LibVersion := '1.0'} : TADDR_Param;
   END_VAR

   VAR CONSTANT 
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      ERR_OCTET_WRONG_NUMBER_OF_CHAR : Word := 16#8110;
      ERR_OCTET_STRING_IS_EMPTY : Word := 16#8120;
      ERR_OCTET_EXCEEDS_MAX_IP_ADDRESS : Word := 16#8130;
      ERR_PORT_WRONG_NUMBER_OF_CHAR : Word := 16#8150;
      ERR_PORT_STRING_IS_EMPTY : Word := 16#8151;
      ERR_PORT_EXCEEDS_MAX_PORT : Word := 16#8152;
      MAX_IP_ADDRESS_OCTET_NUMBER : USInt := 255;
      MAX_PORT_NUMBER : UInt := 65535;
      EMPTY_STRING : Int := 0;
      MAX_CHAR_FOR_IP_OCTET_NUMBER : Int := 4;
      MAX_CHAR_FOR_PORT_NUMBER : Int := 5;
      INIT_VAL : USInt := 0;
      NUMBER_OF_IP_OCTETS : Int := 4;
      CHAR_DOT : Char := '.';
      CHAR_COLON : Char := ':';
      CONVERT_FORMAT_TO_INTEGER : Word := 16#0000;
      CONVERT_START_POSITION : UInt := 1;
   END_VAR


BEGIN
	REGION BLOCK INFO HEADER
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_StringToTaddr
	  // Comment/Function: This function converts a string IP Address into TADDR Parameter format.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU1212C DC/DC/DC FW:V4.2
	  // Engineering:      TIA Portal V14 Update 1
	  // Restrictions:     ENO mechanism is not used - Error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Initialization
	  #tempAddressString := #ipAddressString;
	  #tempIpAdressTaddr.REM_IP_ADDR[1] := #INIT_VAL;
	  #tempIpAdressTaddr.REM_IP_ADDR[2] := #INIT_VAL;
	  #tempIpAdressTaddr.REM_IP_ADDR[3] := #INIT_VAL;
	  #tempIpAdressTaddr.REM_IP_ADDR[4] := #INIT_VAL;
	  #tempIpAdressTaddr.REM_PORT_NR := #INIT_VAL;
	  #LGF_StringToTaddr := #tempIpAdressTaddr;
	END_REGION
	
	REGION Process Address String  
	  REGION Process octests 1-4
	    FOR #tempOctetIndex := 1 TO #NUMBER_OF_IP_OCTETS BY 1 DO
	      // check if loop has not reached the last octet
	      IF #tempOctetIndex < #NUMBER_OF_IP_OCTETS THEN
	        // search for dot as octet seperator
	        // there has to be a dot present between the octets
	        #tempCharPosition := FIND(IN1 := #tempAddressString, IN2 := #CHAR_DOT);
	        
	      ELSE
	        // search for colon as port seperator after the last Octet
	        #tempCharPosition := FIND(IN1 := #tempAddressString, IN2 := #CHAR_COLON);
	        
	        // if colon is present, there is a port number specified / check if Port number added
	        #tempPortNumberIsSpecified := (#tempCharPosition > 0);
	        
	        // if no port is spezified, its just the last octet
	        IF NOT #tempPortNumberIsSpecified THEN
	          // need to set the char position to the end of string + one for later cobesion and checks
	          #tempCharPosition := LEN(#tempAddressString) + 1;
	        END_IF;
	      END_IF;
	      
	      REGION Octet conversion
	        // check if IP Octet contains more then three digits --> Error
	        IF #tempCharPosition > #MAX_CHAR_FOR_IP_OCTET_NUMBER THEN
	          #error := TRUE;
	          #status := #ERR_OCTET_WRONG_NUMBER_OF_CHAR OR INT_TO_WORD(#tempOctetIndex);
	          #LGF_StringToTaddr := #tempIpAdressTaddr;
	          RETURN;
	        END_IF;
	        
	        // extract octet string
	        #tempOctetString := LEFT(IN := #tempAddressString, L := #tempCharPosition - 1);
	        // Check if Octet string is empty --> Error
	        IF LEN(#tempOctetString) = #EMPTY_STRING THEN
	          #error := TRUE;
	          #status := #ERR_OCTET_STRING_IS_EMPTY OR INT_TO_WORD(#tempOctetIndex);
	          #LGF_StringToTaddr := #tempIpAdressTaddr;
	          RETURN;
	        END_IF;
	        
	        // Convert the octet string to numerical value
	        STRG_VAL(IN     := #tempOctetString,
	                 FORMAT := #CONVERT_FORMAT_TO_INTEGER,
	                 P      := #CONVERT_START_POSITION,
	                 OUT    => #tempNumber);
	        
	        // check if the octet number exeeds the maximum possible range of 255 of USInt --> Error
	        IF #tempNumber > #MAX_IP_ADDRESS_OCTET_NUMBER THEN
	          #error := TRUE;
	          #status := #ERR_OCTET_EXCEEDS_MAX_IP_ADDRESS OR INT_TO_WORD(#tempOctetIndex);
	          #LGF_StringToTaddr := #tempIpAdressTaddr;
	          RETURN;
	        END_IF;
	        
	        // add address octet to temp address tag
	        #tempIpAdressTaddr.REM_IP_ADDR[#tempOctetIndex] := UDINT_TO_USINT(#tempNumber);
	        
	        // delete octet string from address string
	        #tempAddressString := DELETE(IN := #tempAddressString, P := 1, L := #tempCharPosition);
	      END_REGION Octet conversion
	    END_FOR;
	  END_REGION Process octests 1-4
	  
	  REGION PORT number conversion
	    // If the string contains a port number too, parse it
	    IF #tempPortNumberIsSpecified THEN
	      // lenght of string exceeds length of port string --> Error
	      IF LEN(#tempAddressString) > #MAX_CHAR_FOR_PORT_NUMBER THEN
	        #error := TRUE;
	        #status := #ERR_PORT_WRONG_NUMBER_OF_CHAR;
	        #LGF_StringToTaddr := #tempIpAdressTaddr;
	        RETURN;
	        
	        // Check if string is empty --> Error
	      ELSIF LEN(#tempAddressString) = #EMPTY_STRING THEN
	        #error := TRUE;
	        #status := #ERR_PORT_STRING_IS_EMPTY;
	        #LGF_StringToTaddr := #tempIpAdressTaddr;
	        RETURN;
	      END_IF;
	      
	      // Convert the port number string to numerical value
	      STRG_VAL(IN     := #tempAddressString,
	               FORMAT := #CONVERT_FORMAT_TO_INTEGER,
	               P      := #CONVERT_START_POSITION,
	               OUT    => #tempNumber);
	      
	      // check if the Port number exeeds the maximum possible range of 65535 of UInt --> Error
	      IF #tempNumber > #MAX_PORT_NUMBER THEN
	        #error := TRUE;
	        #status := #ERR_PORT_EXCEEDS_MAX_PORT;
	        #LGF_StringToTaddr := #tempIpAdressTaddr;
	        RETURN;
	      END_IF;
	      
	      // add port number to temp address tag
	      #tempIpAdressTaddr.REM_PORT_NR := UDINT_TO_UINT(#tempNumber);
	    END_IF;
	  END_REGION PORT number conversion
	  
	END_REGION
	
	REGION Outputs
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #LGF_StringToTaddr := #tempIpAdressTaddr;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION