FUNCTION_BLOCK "FB_CalculateDayOfYear"
{ S7_Optimized_Access := 'TRUE' }
VAR_INPUT
    Year : Int; 
    Month : Int; 
    Day : Int; 
END_VAR

VAR_OUTPUT
    DayOfYear : Int; 
    error : Bool; 
    status : Word; 
END_VAR

VAR
    DAYS_IN_MONTHS : ARRAY[1..12] OF Int := [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
END_VAR

VAR CONSTANT
    STATUS_OK : Word := 16#0000;
    ERR_INVALID_YEAR : Word := 16#8001;
    ERR_INVALID_MONTH : Word := 16#8002;
    ERR_INVALID_DAY : Word := 16#8003;
END_VAR

VAR_TEMP
    isLeapYear : Bool;
    tempDayOfYear : Int := 0;
    tempIndex : Int := 0;
END_VAR

BEGIN
    REGION Validation OF INPUT and OUTPUT 
        
    END_REGION

    
    REGION Validate Year
        IF #Year < 1000 OR #Year > 3000 THEN
            #error := TRUE;
            #status := #ERR_INVALID_YEAR;
            RETURN;
        END_IF;
    END_REGION

    REGION Validate Month
        IF #Month < 1 OR #Month > 12 THEN
            #error := TRUE;
            #status := #ERR_INVALID_MONTH;
            RETURN;
        END_IF;
    END_REGION

    REGION Check Leap Year
        #isLeapYear := ((#Year MOD 4 = 0) AND (#Year MOD 100 <> 0)) OR (#Year MOD 400 = 0);
        IF #isLeapYear THEN
            #DAYS_IN_MONTHS[2] := 29;
        ELSE
            #DAYS_IN_MONTHS[2] := 28;
        END_IF;
    END_REGION

    REGION Validate Day
        IF #Day < 1 OR #Day > #DAYS_IN_MONTHS[#Month] THEN
            #error := TRUE;
            #status := #ERR_INVALID_DAY;
            RETURN;
        END_IF;
    END_REGION

    REGION Calculate Day OF Year
        FOR #tempIndex := 1 TO #Month - 1 BY 1 DO
            #tempDayOfYear += #DAYS_IN_MONTHS[#tempIndex];
        END_FOR;
        #tempDayOfYear += #Day;
    END_REGION

    REGION Writting TO outputs
        #DayOfYear := #tempDayOfYear;
        #error := FALSE;
        #status := #STATUS_OK;
    END_REGION
END_FUNCTION_BLOCK