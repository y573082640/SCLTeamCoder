FUNCTION "LGF_MatrixMultiplication" : Void
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Digital_Industries
FAMILY : LGF
NAME : LGF_MatrixMultiplication
   VAR_OUTPUT 
      error : Bool;
      status : Word;
   END_VAR

   VAR_IN_OUT 
      matrix1 : Array[*, *] of LReal;
      matrix2 : Array[*, *] of LReal;
      matrixResult : Array[*, *] of LReal;
   END_VAR

   VAR_TEMP 
      tempMatrix1LowerBoundRows : DInt;
      tempMatrix1LowerBoundColumns : DInt;
      tempMatrix1UpperBoundRows : DInt;
      tempMatrix1UpperBoundColumns : DInt;
      tempMatrix2LowerBoundRows : DInt;
      tempMatrix2LowerBoundColumns : DInt;
      tempMatrix2UpperBoundRows : DInt;
      tempMatrix2UpperBoundColumns : DInt;
      tempResultMatrixLowerBoundRows : DInt;
      tempResultMatrixLowerBoundColumns : DInt;
      tempResultMatrixUpperBoundRows : DInt;
      tempResultMatrixUpperBoundColumns : DInt;
      tempJ : DInt;
      tempK : DInt;
      tempL : DInt;
      tempResult : LReal;
   END_VAR

   VAR CONSTANT 
      ZERO : Real := 0.0;
      ROWS : UInt := 1;
      COLUMNS : UInt := 2;
      STATUS_NO_ERROR : Word := 16#0000;
      ERR_MATR1_LOWBOUND_COLUMNS_MATR2_LOWBOUND_ROWS : Word := 16#8200;
      ERR_MATR1_UPPBOUND_COLUMNS_MATR2_UPPBOUND_ROWS : Word := 16#8201;
      ERR_MATR1_LOWBOUND_ROWS_RESMATR_LOWBOUND_ROWS : Word := 16#8202;
      ERR_MATR2_LOWBOUND_COLUMNS_RESMATR_LOWBOUND_COLUMNS : Word := 16#8203;
      ERR_MATR1_UPPBOUND_ROWS_RESMATR_UPPBOUND_ROWS : Word := 16#8204;
      ERR_MATR2_UPPBOUND_COLUMNS_RESMATR_UPPBOUND_COLUMNS : Word := 16#8205;
   END_VAR


BEGIN
	REGION Block info header
	  //=============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_MatrixMultiplication
	  // Comment/Function: Caluclates the multiplication of two matrices
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  //=================================================================================
	END_REGION Block info header
	
	REGION Getting matrices size
	  //Determine the size of the matrices
	  // Lower bound rows
	  #tempMatrix1LowerBoundRows := LOWER_BOUND(ARR := #matrix1, DIM := #ROWS);
	  #tempMatrix2LowerBoundRows := LOWER_BOUND(ARR := #matrix2, DIM := #ROWS);
	  #tempResultMatrixLowerBoundRows := LOWER_BOUND(ARR := #matrixResult, DIM := #ROWS);
	  // Lower bound columns
	  #tempMatrix1LowerBoundColumns := LOWER_BOUND(ARR := #matrix1, DIM := #COLUMNS);
	  #tempMatrix2LowerBoundColumns := LOWER_BOUND(ARR := #matrix2, DIM := #COLUMNS);
	  #tempResultMatrixLowerBoundColumns := LOWER_BOUND(ARR := #matrixResult, DIM := #COLUMNS);
	  
	  // Upper bound rows
	  #tempMatrix1UpperBoundRows := UPPER_BOUND(ARR := #matrix1, DIM := #ROWS);
	  #tempMatrix2UpperBoundRows := UPPER_BOUND(ARR := #matrix2, DIM := #ROWS);
	  #tempResultMatrixUpperBoundRows := UPPER_BOUND(ARR := #matrixResult, DIM := #ROWS);
	  // Upper bound columns
	  #tempMatrix1UpperBoundColumns := UPPER_BOUND(ARR := #matrix1, DIM := #COLUMNS);
	  #tempMatrix2UpperBoundColumns := UPPER_BOUND(ARR := #matrix2, DIM := #COLUMNS);
	  #tempResultMatrixUpperBoundColumns := UPPER_BOUND(ARR := #matrixResult, DIM := #COLUMNS);
	END_REGION
	
	REGION Error evaluation of matrices dimentions
	  // Matrix one must have the same count of rows as matrix two has columns. Else the multiplication is not possible.
	  IF #tempMatrix1LowerBoundColumns <> #tempMatrix2LowerBoundRows THEN
	    #error := true;
	    #status := #ERR_MATR1_LOWBOUND_COLUMNS_MATR2_LOWBOUND_ROWS;
	    RETURN;
	  ELSIF #tempMatrix1UpperBoundColumns <> #tempMatrix2UpperBoundRows THEN
	    #error := true;
	    #status := #ERR_MATR1_UPPBOUND_COLUMNS_MATR2_UPPBOUND_ROWS;
	    RETURN;
	  END_IF;
	  // Result matrix must have the same number of rows as matrix 1 and the same number of columns as the matrix 2.
	  IF (#tempMatrix1LowerBoundRows <> #tempResultMatrixLowerBoundRows) THEN
	    #error := true;
	    #status := #ERR_MATR1_LOWBOUND_ROWS_RESMATR_LOWBOUND_ROWS;
	    RETURN;
	  ELSIF (#tempMatrix1UpperBoundRows <> #tempResultMatrixUpperBoundRows) THEN
	    #error := true;
	    #status := #ERR_MATR1_UPPBOUND_ROWS_RESMATR_UPPBOUND_ROWS;
	    RETURN;
	  ELSIF (#tempMatrix2LowerBoundColumns <> #tempResultMatrixLowerBoundColumns) THEN
	    #error := true;
	    #status := #ERR_MATR2_LOWBOUND_COLUMNS_RESMATR_LOWBOUND_COLUMNS;
	    RETURN;
	  ELSIF (#tempMatrix2UpperBoundColumns <> #tempResultMatrixUpperBoundColumns) THEN
	    #error := true;
	    #status := #ERR_MATR2_UPPBOUND_COLUMNS_RESMATR_UPPBOUND_COLUMNS;
	    RETURN;
	  END_IF;
	END_REGION
	
	REGION Multiplication
	  //Multiplies each row with each column
	  FOR #tempJ := #tempMatrix1LowerBoundRows TO #tempMatrix1UpperBoundRows DO
	    FOR #tempK := #tempMatrix2LowerBoundColumns TO #tempMatrix2UpperBoundColumns DO
	      #tempResult := #ZERO;
	      FOR #tempL := #tempMatrix1LowerBoundColumns TO #tempMatrix1UpperBoundColumns DO
	        #tempResult := #tempResult + #matrix1[#tempJ, #tempL] * #matrix2[#tempL, #tempK];
	      END_FOR;
	      #matrixResult[#tempJ, #tempK] := #tempResult;
	    END_FOR;
	  END_FOR;
	  
	  #error := false;
	  #status := #STATUS_NO_ERROR;
	  // ENO mechanism is not used
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION