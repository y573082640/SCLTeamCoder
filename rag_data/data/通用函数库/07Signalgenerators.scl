FUNCTION_BLOCK "LGF_CosinusCI"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_CosinusCI
   VAR_INPUT 
      amplitude : Real := 1.0;
      offset : Real;
      periode : UDInt := 1000;
      phaseShift : Real;
      callOB : OB_CYCLIC;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      value { ExternalWritable := 'False'} : Real;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word;
      subFunctionStatus { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      statRad { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      statPhaseShift { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 0.0;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
   END_VAR

   VAR_TEMP 
      tempCycleTime : UDInt;
      tempCyclePhase : UDInt;
      tempCycleStatus : Word;
      tempReadTimeStatus : Int;
   END_VAR

   VAR CONSTANT 
      SECOND_IN_MS : UDInt := 1000;
      ZERO : Int := 0;
      SLOPE : Int := 2;
      TWO_PI : Real := 6.283185;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      QRY_CINT_OB_UNAVAILABLE : Word := 16#0000;
      ERR_OB_UNAVAILABLE : Word := 16#8600;
      ERR_QRY_CINT : Word := 16#8601;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_CosinusCI
	  // Comment/Function: This function generates a cosinusoidal signal profile. For this it uses the time interval of the calling Cyclic Interrupt OB.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.03 26.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  //                      phase shift availability added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  // 03.00.02 15.12.2023  Simatic Systems Support
	  //                      Fix callculation of 'phaseShift'
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Get sample time
	  // get sample time, according to the cyclic interrupt OB number
	  #tempReadTimeStatus := QRY_CINT(OB_NR := #callOB, CYCLE => #tempCycleTime,
	                                  PHASE => #tempCyclePhase, STATUS => #tempCycleStatus);
	  
	  REGION Error handling
	    // Generate error message of the QRY_CINT function
	    IF #tempReadTimeStatus <> #ZERO THEN
	      #error := TRUE;
	      #status := #ERR_QRY_CINT;
	      #subFunctionStatus := INT_TO_WORD(#tempReadTimeStatus);
	      #value := #ZERO;
	      RETURN;
	      // Generate error message when OB unavailable
	    ELSIF (#tempCycleStatus = #QRY_CINT_OB_UNAVAILABLE) THEN
	      #error := TRUE;
	      #status := #ERR_OB_UNAVAILABLE;
	      #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	      #value := 0;
	      RETURN;
	    END_IF;
	  END_REGION
	END_REGION
	
	REGION Caluclations and outputs assigment
	  IF #reset THEN
	    #statCounter := 0;
	    #value := #ZERO;
	  ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #statCounter += (#tempCycleTime) / #SECOND_IN_MS;
	    #statCounter := #statCounter MOD (#periode);
	    
	    // Transfer to radians
	    #statRad := UDINT_TO_REAL(#statCounter) * #TWO_PI / (UDINT_TO_REAL(#periode));
	    #statPhaseShift := (#phaseShift * #TWO_PI) / UDINT_TO_REAL(#periode);
	    
	    // Calculate output value
	    #value := COS(#statRad + #statPhaseShift) * #amplitude + #offset;
	  END_IF;
	  #error := false;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Frequency"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_Frequency
   VAR_INPUT 
      frequency : Real := 0.0;
      pulsePauseRatio : Real := 1.0;
   END_VAR

   VAR_OUTPUT 
      clock { ExternalWritable := 'False'} : Bool;
      countdown { ExternalWritable := 'False'} : Time;
   END_VAR

   VAR 
      instTofTimePulse {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TOF_TIME;
      instTofTimePause {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TOF_TIME;
      statFrequencyOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      statPulsePauseRatioOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      statTimePulse { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      statTimePause { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
   END_VAR

   VAR_TEMP 
      tempPulseRate : Real;
      tempPauseRate : Real;
      tempCountdown : Time;
   END_VAR

   VAR CONSTANT 
      ZERO : Real := 0.0;
      ZERO_TIME : Time := T#0ms;
      SECOND_IN_MS : Real := 1000.0;
      ONE : Real := 1.0;
   END_VAR


BEGIN
	REGION Block info header
	  //=============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //-----------------------------------------------------------------------------
	  // Title:            LGF_Frequency
	  // Comment/Function: This function generates a signal that changes between the values `FALSE` and `TRUE` depending on a defined frequency and a pulse pause ratio.
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 19.08.2015  Siemens Industry Online Support
	  //                      First released version
	  // 01.01.00 25.05.2016  Siemens Industry Online Support
	  //                      New function: pulse pause ratio
	  // 01.01.01 26.05.2016  Siemens Industry Online Support
	  //                      Add comments
	  // 01.01.02 02.01.2017  Siemens Industry Online Support
	  //                      Upgrade: TIA Portal V14 Update 1
	  // 01.01.03 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.01.04 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.07 20.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Calculation of settings and program execution
	  // If input <= 0.0 the block is disabled
	  IF (#frequency <= #ZERO) OR (#pulsePauseRatio <= #ZERO) THEN
	    #clock := FALSE;
	    #tempCountdown := #ZERO_TIME;
	  ELSE
	    
	    //Calculating function frequency and pulse pause ratio only when an input is changed
	    IF #statFrequencyOld <> #frequency OR #statPulsePauseRatioOld <> #pulsePauseRatio THEN
	      RESET_TIMER(TIMER := #instTofTimePause);
	      RESET_TIMER(TIMER := #instTofTimePulse);
	      
	      #tempPulseRate := #pulsePauseRatio / (#pulsePauseRatio + #ONE); // Calculate pulse rate   
	      #tempPauseRate := #ONE - #tempPulseRate;                      // Calculate pause rate   
	      #statTimePulse := UDINT_TO_TIME(REAL_TO_UDINT((#SECOND_IN_MS * #tempPulseRate / #frequency))); // Calculate pulse time   
	      #statTimePause := UDINT_TO_TIME(REAL_TO_UDINT((#SECOND_IN_MS * #tempPauseRate / #frequency))); // Calculate pause time
	      #statFrequencyOld := #frequency;
	      #statPulsePauseRatioOld := #pulsePauseRatio;
	    END_IF;
	    
	    //Two time off-delay timers that are resetting each other on expiration
	    #instTofTimePulse(IN := NOT #instTofTimePause.Q,
	                      PT := #statTimePulse);
	    
	    //If timer for pulse is running, remaining time of the PULSE is calculated
	    #tempCountdown := #statTimePulse - #instTofTimePulse.ET;
	    
	    #instTofTimePause(IN := #instTofTimePulse.Q,
	                      PT := #statTimePause);
	    
	    //If timer for pulse is NOT running, remaining time of the PAUSE is calculated
	    IF #tempCountdown = #ZERO_TIME THEN
	      #tempCountdown := #statTimePause - #instTofTimePause.ET;
	    END_IF;
	    
	  END_IF;
	END_REGION
	
	REGION Writing to outputs
	  // Assigning value of the pulse timer to the clock output
	  #clock := #instTofTimePulse.Q;
	  #countdown := #tempCountdown;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_Impulse"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_Impulse
   VAR_INPUT 
      frequency : Real;
   END_VAR

   VAR_OUTPUT 
      impulse { ExternalWritable := 'False'} : Bool;
      countdown { ExternalWritable := 'False'} : Time;
   END_VAR

   VAR 
      instTofTimePulse {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TOF_TIME;
      statFrequencyOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      statTimePulse { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
   END_VAR

   VAR_TEMP 
      tempImpulse : Bool;
      tempCountdown : Time;
   END_VAR

   VAR CONSTANT 
      ZERO : Real := 0.0;
      ZERO_TIME : Time := T#0ms;
      THOUSAND : Real := 1000.0;
      THOUSAND_SECONDS : Time := t#1000s;
   END_VAR


BEGIN
	REGION Block info header
	  //=============================================================================
	  // SIEMENS AG / (c)Copyright 2017
	  //-----------------------------------------------------------------------------
	  // Title:            LGF_Impulse
	  // Comment/Function: This function generates pulses at a given frequency. The pulse is always present for one (control) cycle.
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 19.08.2015  Siemens Industry Online Support
	  //                      First released version
	  // 01.01.01 16.06.2015  Siemens Industry Online Support
	  //                      LGF_Impulse calls new LGF_Frequency V1.1.1
	  // 01.01.02 02.01.2017  Siemens Industry Online Support
	  //                      Upgrade: TIA Portal V14 Update 1
	  // 01.02.00 02.02.2017  Siemens Industry Online Support
	  //                      Code optimization: no call of LGF_Frequency
	  //                      Fix at output "countdown"
	  // 01.02.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.02.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.02.04 20.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Calculation of settings and program execution
	  // If input <= 0.0 the block is disabled
	  IF #frequency <= #ZERO THEN
	    #tempImpulse := FALSE;
	    #tempCountdown := #ZERO_TIME;
	  ELSE
	    ////Calculating function frequency parameters - only when the input is changed
	    IF #frequency <> #statFrequencyOld THEN
	      // Assign frequency - convert frequency to period
	      #statTimePulse := #THOUSAND_SECONDS / TRUNC(#frequency * #THOUSAND);
	      #statFrequencyOld := #frequency;
	    END_IF;
	    
	    // Assign impulse
	    #tempImpulse := NOT #instTofTimePulse.Q;
	    
	    //Self-restarting timer, with time calculated from the frequency input
	    #instTofTimePulse(IN := NOT #instTofTimePulse.Q,
	                      PT := #statTimePulse);
	    
	    // Assign countdown
	    #tempCountdown := #statTimePulse - #instTofTimePulse.ET;
	  END_IF;
	END_REGION
	
	REGION Writing to outputs
	  // Assigning value of the pulse to the output
	  #impulse := #tempImpulse;
	  #countdown := #tempCountdown;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_RectangleCI"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_RectangleCI
   VAR_INPUT 
      amplitude : Real := 1.0;
      offset : Real;
      periode : UDInt := 1000;
      phaseShift : Real;
      callOB : OB_CYCLIC;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      value { ExternalWritable := 'False'} : Real;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := 16#0;
      subFunctionStatus { ExternalWritable := 'False'} : Word := 16#0;
   END_VAR

   VAR 
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
   END_VAR

   VAR_TEMP 
      tempCycleTime : UDInt;
      tempCyclePhase : UDInt;
      tempCycleStatus : Word;
      tempReadTimeStatus : Int;
      tempValue : Real;
      tempPhaseShift : UDInt;
   END_VAR

   VAR CONSTANT 
      SECOND_IN_MS : UDInt := 1000;
      ZERO : Int := 0;
      RATIO : UDInt := 2;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      QRY_CINT_OB_UNAVAILABLE : Word := 16#0000;
      ERR_OB_UNAVAILABLE : Word := 16#8600;
      ERR_QRY_CINT : Word := 16#8601;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_RectangleCI
	  // Comment/Function: This function generates a rectangular signal profile. For this it uses the time interval of the calling Cyclic Interrupt OB.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.03 26.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  //                      phase shift availability added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Get sample time
	  // get sample time, according to the cyclic interrupt OB number
	  #tempReadTimeStatus := QRY_CINT(OB_NR := #callOB, CYCLE => #tempCycleTime,
	                                  PHASE => #tempCyclePhase, STATUS => #tempCycleStatus);
	  
	  REGION Error handling
	    // Generate error message of the QRY_CINT function
	    IF #tempReadTimeStatus <> #ZERO THEN
	      #error := TRUE;
	      #status := #ERR_QRY_CINT;
	      #subFunctionStatus := INT_TO_WORD(#tempReadTimeStatus);
	      #value := #ZERO;
	      RETURN;
	      
	      // Generate error message when OB unavailable
	    ELSIF (#tempCycleStatus = #QRY_CINT_OB_UNAVAILABLE) THEN
	      #error := TRUE;
	      #status := #ERR_OB_UNAVAILABLE;
	      #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	      #value := #ZERO;
	      RETURN;
	    END_IF;
	  END_REGION
	END_REGION
	
	REGION Caluclations and outputs assigment
	  // calculate true phase shift with modulo
	  #tempPhaseShift := REAL_TO_UDINT(#phaseShift) MOD #periode;
	  
	  IF #reset THEN
	    #statCounter := #tempPhaseShift;
	    #tempValue := #ZERO;
	  ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #statCounter += #tempCycleTime / #SECOND_IN_MS;
	    #statCounter := #statCounter MOD #periode;
	    
	    // Calculate output value
	    #tempValue := #offset;
	    
	    IF (#statCounter >= #tempPhaseShift) AND (#statCounter < (#periode / #RATIO) + #tempPhaseShift) THEN
	      #tempValue += #amplitude;
	    ELSE
	      #tempValue -= #amplitude;
	    END_IF;
	  END_IF;
	  
	  #value := #tempValue;
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_SawToothCI"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_SawToothCI
   VAR_INPUT 
      amplitude : Real := 1.0;
      offset : Real;
      periode : UDInt := 1000;
      phaseShift : Real;
      callOB : OB_CYCLIC;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      value { ExternalWritable := 'False'} : Real;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word;
      subFunctionStatus { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
   END_VAR

   VAR_TEMP 
      tempCycleTime : UDInt;
      tempCyclePhase : UDInt;
      tempCycleStatus : Word;
      tempReadTimeStatus : Int;
      tempValue : Real;
      tempPhaseShift : Real;
   END_VAR

   VAR CONSTANT 
      SECOND_IN_MS : UDInt := 1000;
      ZERO : Int := 0;
      SLOPE : Real := 2.0;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      QRY_CINT_OB_UNAVAILABLE : Word := 16#0000;
      ERR_OB_UNAVAILABLE : Word := 16#8600;
      ERR_QRY_CINT : Word := 16#8601;
   END_VAR


BEGIN
	REGION Block info header
	  //=============================================================================
	  // Siemens AG / (c)Copyright 2017
	  //-----------------------------------------------------------------------------
	  // Title:            LGF_SawToothCl - Cyclic Interupt
	  // Comment/Function: This function generates a sawtooth-shaped signal profile. For this it uses the time interval of the calling Cyclic Interrupt OB.
	  // Library/Family:   LGF(Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      S7-PLCSIM Advanced V2.0 SP1
	  // Engineering:      TIA Portal V15 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.06 23.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  //                      phase shift availability added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Get sample time
	  //get sample time, according to the cyclic interrupt OB number
	  #tempReadTimeStatus := QRY_CINT(OB_NR := #callOB, CYCLE => #tempCycleTime,
	                                  PHASE => #tempCyclePhase, STATUS => #tempCycleStatus);
	  
	  REGION Error handling
	    // Generate error message of the return value of QRY_CINT function
	    IF #tempReadTimeStatus <> #ZERO THEN
	      #error := TRUE;
	      #status := #ERR_QRY_CINT;
	      #subFunctionStatus := INT_TO_WORD(#tempReadTimeStatus);
	      #value := #ZERO;
	      RETURN;
	      
	      // Generate error message when OB unavailable
	    ELSIF (#tempCycleStatus = #QRY_CINT_OB_UNAVAILABLE) THEN
	      #error := TRUE;
	      #status := #ERR_OB_UNAVAILABLE;
	      #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	      #value := #ZERO;
	      RETURN;
	    END_IF;
	  END_REGION
	END_REGION
	
	REGION Caluclations AND outputs assigment  
	  IF #reset THEN
	    #statCounter := 0;
	    #tempValue := #ZERO;
	  ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #statCounter += #tempCycleTime / #SECOND_IN_MS;
	    #statCounter := #statCounter MOD #periode;
	    
	    // calculate true phase shift with modulo
	    #tempPhaseShift := UDINT_TO_REAL((#statCounter + REAL_TO_UDINT(#phaseShift)) MOD #periode);
	    
	    // formula to calculate saw tooth
	    #tempValue := #SLOPE * #amplitude / UDINT_TO_REAL(#periode) * #tempPhaseShift - #amplitude;
	  END_IF;
	  
	  #value := #tempValue + #offset;
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_SinusCI"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_SinusCI
   VAR_INPUT 
      amplitude : Real := 1.0;
      offset : Real;
      periode : UDInt := 1000;
      phaseShift : Real;
      callOB : OB_CYCLIC;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      value { ExternalWritable := 'False'} : Real;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word;
      subFunctionStatus { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      statRad { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      statPhaseShift { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 0.0;
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
   END_VAR

   VAR_TEMP 
      tempCycleTime : UDInt;
      tempCyclePhase : UDInt;
      tempCycleStatus : Word;
      tempReadTimeStatus : Int;
   END_VAR

   VAR CONSTANT 
      SECOND_IN_MS : UDInt := 1000;
      ZERO : Int := 0;
      SLOPE : Int := 2;
      TWO_PI : Real := 6.283185;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      QRY_CINT_OB_UNAVAILABLE : Word := 16#0000;
      ERR_OB_UNAVAILABLE : Word := 16#8600;
      ERR_QRY_CINT : Word := 16#8601;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_SinusCI
	  // Comment/Function: This function generates a sinusoidal signal profile. For this it uses the time interval of the calling Cyclic Interrupt OB.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.03 26.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  //                      phase shift availability added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  // 03.00.02 15.12.2023  Simatic Systems Support
	  //                      Fix callculation of 'phaseShift'
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Get sample time
	  // get sample time, according to the cyclic interrupt OB number
	  #tempReadTimeStatus := QRY_CINT(OB_NR := #callOB, CYCLE => #tempCycleTime,
	                                  PHASE => #tempCyclePhase, STATUS => #tempCycleStatus);
	  
	  REGION Error handling
	    // Generate error message of the QRY_CINT function
	    IF #tempReadTimeStatus <> #ZERO THEN
	      #error := TRUE;
	      #status := #ERR_QRY_CINT;
	      #subFunctionStatus := INT_TO_WORD(#tempReadTimeStatus);
	      #value := #ZERO;
	      RETURN;
	      
	      // Generate error message when OB unavailable
	    ELSIF (#tempCycleStatus = #QRY_CINT_OB_UNAVAILABLE) THEN
	      #error := TRUE;
	      #status := #ERR_OB_UNAVAILABLE;
	      #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	      #value := #ZERO;
	      RETURN;
	    END_IF;
	  END_REGION
	END_REGION
	
	REGION Caluclations and outputs assigment
	  IF #reset THEN
	    #statCounter := 0;
	    #value := #ZERO;
	  ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #statCounter += (#tempCycleTime) / #SECOND_IN_MS;
	    #statCounter := #statCounter MOD (#periode);
	    
	    // Transfer to radians
	    #statRad := UDINT_TO_REAL(#statCounter) * #TWO_PI / (UDINT_TO_REAL(#periode));
	    #statPhaseShift := (#phaseShift * #TWO_PI) / UDINT_TO_REAL(#periode);
	    
	    // Calculate output value
	    #value := SIN(#statRad + #statPhaseShift) * #amplitude + #offset;
	  END_IF;
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "LGF_TriangleCI"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Siemens_Industry_Support
FAMILY : LGF
NAME : LGF_TriangleCI
   VAR_INPUT 
      amplitude : Real := 1.0;
      offset : Real;
      periode : UDInt := 1000;
      phaseShift : Real;
      callOB : OB_CYCLIC;
      reset : Bool;
   END_VAR

   VAR_OUTPUT 
      value { ExternalWritable := 'False'} : Real;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := 16#0;
      subFunctionStatus { ExternalWritable := 'False'} : Word := 16#0;
   END_VAR

   VAR 
      statCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
   END_VAR

   VAR_TEMP 
      tempCycleTime : UDInt;
      tempCyclePhase : UDInt;
      tempCycleStatus : Word;
      tempReadTimeStatus : Int;
      tempValue : Real;
      tempPhaseShift : Real;
   END_VAR

   VAR CONSTANT 
      SECOND_IN_MS : UDInt := 1000;
      ZERO : Int := 0;
      SLOPE : Real := 4.0;
      NEGATIVE_LINE_Y_OFFSET : Real := 2.0;
      SUB_STATUS_NO_ERROR : Word := 16#0000;
      STATUS_FINISHED_NO_ERROR : Word := 16#0000;
      QRY_CINT_OB_UNAVAILABLE : Word := 16#0000;
      ERR_OB_UNAVAILABLE : Word := 16#8600;
      ERR_QRY_CINT : Word := 16#8601;
   END_VAR


BEGIN
	REGION Block info header
	  //===============================================================================
	  // SIEMENS AG / (c)Copyright 2019
	  //-------------------------------------------------------------------------------
	  // Title:            LGF_TriangleCI
	  // Comment/Function: This function generates a triangular signal profile. For this it uses the time interval of the calling Cyclic Interrupt OB.
	  // Library/Family:   LGF (Library General Functions)
	  // Author:           Siemens Digital Industry Support
	  // Tested with:      CPU 1515F-2 PN FW:V2.6
	  // Engineering:      TIA Portal V15.1 Update 2
	  // Restrictions:     ENO disabled - error handling done by error and status
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  // Version  | Date       | Expert in charge       | Changes applied
	  //----------|------------|------------------------|------------------------------
	  // 01.00.00 03.07.2018  Siemens Industry Online Support
	  //                      First released version
	  // 01.00.01 17.08.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15 Update 2
	  // 01.00.02 23.11.2018  Siemens Industry Online Support
	  //                      Upgrade: TIA V15.1
	  // 01.00.03 26.09.2019  Simatic Systems Support
	  //                      Code refactoring, regions and more comments added
	  //                      phase shift availability added
	  // 03.00.00 23.04.2020  Simatic Systems Support
	  //                      Set version to V3.0.0, harmonize the version of the whole library
	  // 03.00.01 15.02.2021  Simatic Systems Support
	  //                      Insert documentation
	  //=============================================================================
	END_REGION Block info header
	
	REGION DESCRIPTION
	  (/**/)
	END_REGION DESCRIPTION
	
	REGION Get sample time
	  // get sample time, according to the cyclic interrupt OB number
	  #tempReadTimeStatus := QRY_CINT(OB_NR := #callOB, CYCLE => #tempCycleTime,
	                                  PHASE => #tempCyclePhase, STATUS => #tempCycleStatus);
	  
	  REGION Error handling
	    // Generate error message of the QRY_CINT function
	    IF #tempReadTimeStatus <> #ZERO THEN
	      #error := TRUE;
	      #status := #ERR_QRY_CINT;
	      #subFunctionStatus := INT_TO_WORD(#tempReadTimeStatus);
	      #value := #ZERO;
	      RETURN;
	      
	      // Generate error message when OB unavailable
	    ELSIF (#tempCycleStatus = #QRY_CINT_OB_UNAVAILABLE) THEN
	      #error := TRUE;
	      #status := #ERR_OB_UNAVAILABLE;
	      #subFunctionStatus := #SUB_STATUS_NO_ERROR;
	      #value := #ZERO;
	      RETURN;
	    END_IF;
	  END_REGION
	END_REGION
	
	REGION Caluclations and outputs assigment  
	  IF #reset THEN
	    #statCounter := 0;
	    #tempValue := #ZERO;
	  ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #statCounter += #tempCycleTime / #SECOND_IN_MS;
	    #statCounter := #statCounter MOD #periode;
	    
	    // calculate true phase shift with modulo
	    #tempPhaseShift := UDINT_TO_REAL((#statCounter + REAL_TO_UDINT(#phaseShift)) MOD #periode);
	    
	    // formula to calculate triangle
	    #tempValue := ABS((#SLOPE / UDINT_TO_REAL(#periode) * #tempPhaseShift - #NEGATIVE_LINE_Y_OFFSET) * #amplitude) - #amplitude;
	  END_IF;
	  
	  // write Output value
	  #value := #tempValue + #offset;
	  #error := FALSE;
	  #status := #STATUS_FINISHED_NO_ERROR;
	  #subFunctionStatus := #STATUS_FINISHED_NO_ERROR;
	  //ENO mechanism is not used - forced to true.
	  ENO := TRUE;
	END_REGION
	
END_FUNCTION_BLOCK

