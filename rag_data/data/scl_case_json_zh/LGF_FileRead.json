{"title": "File Reading from UserFiles Folder", "name": "LGF_FileRead", "description": "This function block offers reading data as binary / serialized data stream from files stored on the PLC's memory card in the folder UserFiles.", "type": "FUNCTION_BLOCK", "input": [{"name": "execute", "type": "Bool", "description": "Rising edge starts file read once"}, {"name": "dataLengthMustMatch", "type": "Bool", "description": "The length of the file data set and the dataset in the PLC have to match."}, {"name": "fileName", "type": "String", "description": "Name of file including path: `UserFiles/test.dat`"}], "output": [{"name": "done", "type": "Bool", "description": "Commanded functionality has been completed successfully"}, {"name": "busy", "type": "Bool", "description": "FB is not finished and new output values can be expected"}, {"name": "error", "type": "Bool", "description": "An error occurred during the execution of the FB"}, {"name": "status", "type": "Word", "description": "Status of the FB, Error identification"}, {"name": "dataLength", "type": "DInt", "description": "Data length read from file (serialized length of `data`)"}], "in/out": [{"name": "bufferByteArray", "type": "Array[*] of Byte", "description": "Byte array buffer for read / write from / to file"}, {"name": "data", "type": "Variant", "description": "Data set read from file"}], "return_value": [], "status_codes": {"16#0000": "STATUS_EXECUTION_FINISHED", "16#7000": "STATUS_NO_CALL", "16#7001": "STATUS_FIRST_CALL", "16#7002": "STATUS_SUBSEQUENT_CALL", "16#8201": "ERR_BUFFER_LOWERBOUND", "16#8202": "ERR_BUFFER_ARRAY_TO_SMALL_TO_COPY", "16#8401": "ERR_FILE_PATH", "16#8411": "ERR_FILE_SIZE_GRATER_THEN_DATA_SIZE", "16#8412": "ERR_FILE_SIZE_LESS_THEN_DATA_SIZE", "16#8600": "ERR_UNDEFINED_STATE", "16#8601": "ERR_MOVE_BLK_VARIANT", "16#8602": "ERR_DATA_SERIALIZE", "16#8603": "ERR_DATA_DESERIALIZE", "16#8604": "ERR_FILE_READ_INIT", "16#8605": "ERR_FILE_READ"}, "user_defined_types": [{"name": "LGF_typeDiagnostics", "description": "Diagnostic structure to store and transfer diagnostic information from blocks trough the interface.", "member": [{"name": "status", "type": "Word", "default": "16#0000", "description": "Status of the Block or error identification when error occurred"}, {"name": "subfunctionStatus", "type": "Word", "default": "16#0000", "description": "Status or return value of called FB's, FC's and system blocks"}, {"name": "stateNumber", "type": "DInt", "default": "0", "description": "State in the state machine of the block where the error occurred"}]}], "description_zh": "\n该函数块用于从PLC的内存卡中位于“UserFiles”文件夹中的文件中读取二进制/序列化数据流。它提供以下功能：\n\n1. 检测“execute”输入信号的上升沿，一旦检测到上升沿，就开始一次文件读取操作。\n2. 将文件数据集的长度与PLC中的数据集长度进行匹配（如果“dataLengthMustMatch”输入为真）。\n3. 使用“fileName”输入指定的文件名，包括路径，例如：“UserFiles/test.dat”。\n4. 提供输出信号：“done”表示操作已成功完成，“busy”表示FB尚未完成，新的输出值即将到来，“error”表示执行过程中出现错误。\n5. 返回状态代码，用于错误识别。\n6. 返回从文件中读取的数据长度。\n7. 提供一个诊断结构，包含状态、子函数状态和错误发生时状态机中的状态编号。\n\n函数块内部使用状态机来实现文件读取的流程，包括初始化、文件读取和参数处理等状态。在读取文件之前，它会验证文件路径和缓冲区边界，并确保缓冲区足够大以存储数据。如果指定了“dataLengthMustMatch”，则还会检查文件长度参数。\n\n如果读取过程中出现错误，函数块会将错误状态和子函数状态写入诊断结构，并停止执行。如果读取成功完成，它会将数据长度和状态代码写入输出，并将“done”输出置为真。\n\n函数块还支持异步模式，允许在执行过程中进行其他任务。在异步模式下，状态机会在每个周期内执行尽可能多的操作，直到达到一个等待点，然后退出循环。在下一个周期中，状态机将继续执行下去。\n\n\n"}