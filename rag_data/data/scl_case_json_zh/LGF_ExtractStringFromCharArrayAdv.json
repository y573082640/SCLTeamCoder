{"title": "Advanced String Extractor from Character Array", "name": "LGF_ExtractStringFromCharArrayAdv", "description": "The function extracts a String specified by a text before and after from an array of characters with extended options.", "type": "FUNCTION", "input": [{"name": "textBefore", "type": "String", "description": "Text in front of the characters which has to be extracted"}, {"name": "textAfter", "type": "String", "description": "Text behind the characters which has to be extracted"}, {"name": "includeBeforeAfter", "type": "Bool", "description": "TRUE: textBefore and textAfter are included in the extracted string"}, {"name": "startPos", "type": "DInt", "description": "Position within the array to start search from (index zero based)"}], "output": [{"name": "extractedString", "type": "String", "description": "Extracted string"}, {"name": "position", "type": "DInt", "description": "Position (index) within the array where text begins (index zero based)"}, {"name": "length", "type": "Int", "description": "Length of text that was extracted"}, {"name": "status", "type": "Word", "description": "Status of the FB"}], "in/out": [{"name": "searchIn", "type": "Variant", "description": "Array of Character or Byte to search in"}], "return_value": [{"type": "Word", "description": "Return value: Status of the FB"}], "status_codes": {"16#0000": "STATUS_NO_ERROR", "16#8200": "ERR_NO_ARRAY", "16#9001": "WARNING_ONLY_START", "16#9002": "WARNING_NOTHING_FOUND"}, "user_defined_types": [], "description_zh": "\n该函数用于从字符数组中提取一个由前后文本指定的字符串，并具有扩展选项的功能。函数接收四个输入参数：位于要提取的字符之前的文本（textBefore），位于要提取的字符之后的文本（textAfter），一个布尔值（includeBeforeAfter）决定是否包含前后文本，以及开始搜索的数组位置（startPos）。函数的输出包括提取的字符串（extractedString），文本在数组中的起始位置（position），提取文本的长度（length）以及状态码（status）。\n\n函数首先验证输入的数组是否为字符或字节类型，然后初始化一些临时变量。接着，函数进入一个循环，不断在数组中搜索指定的前后文本。如果找到了前后文本，它会根据是否包含前后文本的条件，计算出提取字符串的起始位置和长度，并将提取的字符串存储在输出参数中。如果在数组结束前找到了前后文本，它会更新状态码并退出循环。如果直到数组结束都没有找到前后文本，函数会输出一个警告状态码。\n\n函数的状态码包括：16#0000表示没有错误，16#8200表示输入不是一个数组，16#9001表示只找到了起始文本，16#9002表示没有找到任何文本。\n\n\n"}