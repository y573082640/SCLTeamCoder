{"title": "Bit status check operation", "name": "LGF_BitTest", "description": "This block checks whether a bit is TRUE or FALSE at a given position in a variable of the data type DWORD.", "type": "FUNCTION", "input": [{"name": "value", "type": "DWord", "description": "Tag where the bit has to be tested"}, {"name": "bitNo", "type": "USInt", "description": "bit number to test in \"value\" parameter"}], "output": [], "in/out": [], "return_value": [{"type": "Bool", "description": "Value of the checked bit."}], "status_codes": {}, "user_defined_types": [], "description_zh": "\n            FUNCTION \"LGF_BitTest\" : Bool\n{ S7_Optimized_Access := 'TRUE' }\nAUTHOR : Siemens_SIMATIC_Systems_Support\nFAMILY : LGF\nNAME : LGF_BitTest\n   VAR_INPUT \n      value : DWord;\n      bitNo : USInt;\n   END_VAR\n\n   VAR CONSTANT \n      BINARY_ZERO : DWord := 16#0000;\n      TRUE_BOOL_BIT : DWord := 16#0001;\n      MAX_NO_OF_BITS : USInt := 32;\n   END_VAR\n\n\nBEGIN\n\tREGION BLOCK INFO HEADER\n\t  //===============================================================================\n\t  // SIEMENS AG / (c)Copyright 2019\n\t  //-------------------------------------------------------------------------------\n\t  // Title:            LGF_BitTest\n\t  // Comment/Function: 在DWord中测试位是否为1或0\n\t  //                   返回TRUE或FALSE\n\t  //                   也可以用于Word和Byte，例如通过Dword_to_Byte进行转换\n\t  // Library/Family:   LGF (Library General Functions)\n\t  // Author:           Siemens Digital Industry\n\t  // Tested with:      CPU1212C DC/DC/DC FW:V4.2\n\t  // Engineering:      TIA Portal V15.1\n\t  // Restrictions:     不使用ENO，设置为true，无错误处理\n\t  // Requirements:     PLC (S7-1200 / S7-1500)\n\t  //-------------------------------------------------------------------------------\n\t  //===============================================================================\n\tEND_REGION\n\t\n\tREGION Logic\n\t  // 测试标签中的位\n\t  // 将一个真正的位移入选定的位置\n\t  // 使用\"AND\"逻辑与输入值进行比较，并检查是否不等于零\n\t  // 如果位为真，则结果为真，否则为假\n\t  #LGF_BitTest := (#BINARY_ZERO <> (#value AND SHL(IN := #TRUE_BOOL_BIT, N := (#bitNo MOD #MAX_NO_OF_BITS))));\n\t  \n\t  // 无需错误处理\n\t  ENO := TRUE;\n\tEND_REGION\n\t\nEND_FUNCTION\n            \n "}