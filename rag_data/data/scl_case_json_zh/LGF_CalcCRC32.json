{"title": "CRC-32 Calculator", "name": "LGF_CalcCRC32", "description": "The function LGF_CalcCRC32 uses 32 bits as the generator polynomial (mask) for CRC calculation.", "type": "FUNCTION", "input": [{"name": "initValue", "type": "DWord", "description": "Start value for the calculation"}, {"name": "mask", "type": "DWord", "description": "Generator polynomial for the calculation"}, {"name": "noOfElements", "type": "UInt", "description": "Number of elements to be used in CRC calculation"}], "output": [{"name": "error", "type": "Bool", "description": "Error flag"}, {"name": "status", "type": "Word", "description": "Status code"}], "in/out": [{"name": "array", "type": "Array[*] of Byte", "description": "Data stream for which the CRC value will be calculated"}], "return_value": [{"type": "DWord", "description": "Calculated CRC value"}], "status_codes": {"16#0000": "STATUS_NO_ERROR", "16#8400": "ERR_NO_OF_ELEMENTS"}, "user_defined_types": [], "description_zh": "\n函数 \"LGF_CalcCRC32\" 用于计算一个数据流的CRC-32值。它接受一个初始化值（initValue）和一个生成多项式（mask），以及要计算的数据流的元素数量（noOfElements）。函数的输入参数还包括一个字节数组（array），用于存储数据流。\n\n函数首先检查元素数量是否大于0，如果大于0，则进一步检查元素数量是否超出了数组的大小。如果元素数量超出数组大小，函数将返回一个错误状态ERR_NO_OF_ELEMENTS。\n\n接下来，函数使用CRC-32算法计算数组中每个字节的CRC值。对于数组中的每个字节，函数将其移位到CRC值的最前面，然后与掩码进行异或运算。接着，函数检查CRC值的最高位是否为1，如果是，则将CRC值左移一位后与掩码再次进行异或运算；如果不是，则只将CRC值左移一位。这个过程对数组中的每个字节重复进行，直到处理完所有的字节。\n\n最后，函数将计算出的CRC值返回给调用者，并将状态码设置为STATUS_NO_ERROR，表示没有错误发生。\n\n\n\n"}