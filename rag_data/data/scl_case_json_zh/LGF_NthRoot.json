{"title": "N-th root extraction", "name": "LGF_NthRoot", "description": "This function extracts the n-th root of a given value.", "type": "FUNCTION", "input": [{"name": "value", "type": "LReal", "description": "Value from which the root should be calculated"}, {"name": "root", "type": "LReal", "description": "Exponent of root"}], "output": [{"name": "error", "type": "Bool", "description": "Error flag"}, {"name": "status", "type": "Word", "description": "Status code"}], "in/out": [], "return_value": [{"type": "LReal", "description": "Returns the Nth root of a value"}], "status_codes": {"16#0000": "STATUS_NO_ERROR", "16#8200": "ERR_NEG_VAR"}, "user_defined_types": [], "description_zh": "\n该函数\"LGF_NthRoot\"用于计算给定值的n次方根。函数接收两个输入参数：value（LReal类型），表示要计算根的值；root（LReal类型），表示根的指数。函数的输出包括：error（Bool类型），表示错误标志；status（Word类型），表示状态码。函数的返回值是一个LReal类型的值，表示计算得到的n次方根。\n\n函数首先检查输入参数value是否为负数。如果value为负数，则将error设置为true，status设置为ERR_NEG_VAR（表示输入变量为负），并将函数的返回值设置为0.0，然后结束函数的执行。如果value不为负数，则继续执行。\n\n在计算n次方根的部分，函数使用了一个幂运算符\"**\"来计算value的（1/ root）次幂，从而得到n次方根。计算完成后，将error设置为false，status设置为STATUS_NO_ERROR（表示没有错误），函数的返回值即为计算得到的n次方根。\n\n函数使用了一个ENO机制，但在代码中被禁用，错误处理是通过error和status来完成。\n\n状态码定义如下：\n- 16#0000：STATUS_NO_ERROR，表示执行函数没有出错\n- 16#8200：ERR_NEG_VAR，表示输入变量为负\n\n\n"}