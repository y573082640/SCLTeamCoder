{"title": "Non-Linear Interpolation Function", "name": "LGF_NonLinearInterpolation", "description": "Implements a characteristic curve defined via an interpolation point table with linear interpolation.", "type": "FUNCTION_BLOCK", "input": [{"name": "value", "type": "LReal", "description": "Input value for calculating the output value"}, {"name": "defaultOutValue", "type": "LReal", "description": "Value for pre-assignment of the output variable"}, {"name": "enDefaultOutValue", "type": "Bool", "description": "Assign default output value"}, {"name": "track", "type": "Bool", "description": "Follow the value of the input without using the characteristic curve"}, {"name": "reset", "type": "Bool", "description": "Reset the interpolation if the point table is changed in running operation"}], "output": [{"name": "outputValue", "type": "LReal", "description": "The calculated output value from the input value"}], "in/out": [{"name": "setpoints", "type": "Array[*] of LGF_typeNonLinSetpoints", "description": "Setpoint table for defining the characteristic curve"}], "return_value": [], "status_codes": {}, "user_defined_types": [{"name": "LGF_typeNonLinSetpoints", "description": "Data type for setup a setpoint table", "member": [{"name": "inputValue", "type": "LReal", "default": "0.0", "description": "Input value to be interpolated"}, {"name": "outputValue", "type": "LReal", "default": "0.0", "description": "Corresponding interpolated value"}]}], "description_zh": "\n该函数块FB实现了通过插值点表定义的非线性插值特性曲线。特性曲线通过线性插值来计算输入值对应的输出值。函数块支持以下功能：\n\n1. 计算输出值：根据输入值和预设的插值点表，计算并返回对应的输出值。\n2. 使用默认输出值：如果使能默认输出值，则将预设的默认值赋给输出变量。\n3. 跟踪输入值：如果选择跟踪模式，则输出值将直接跟随输入值，不使用特性曲线进行插值。\n4. 重置插值：如果点表在运行过程中发生变化，可以通过重置输入来重新初始化插值过程。\n\n输入变量包括：\n- value (LReal): 用于计算输出值的输入值\n- defaultOutValue (LReal): 预设的输出变量值\n- enDefaultOutValue (Bool): 使能默认输出值\n- track (Bool): 跟踪输入值模式\n- reset (Bool): 重置插值模式\n\n输出变量包括：\n- outputValue (LReal): 计算得到的输出值\n\nInOut变量包括：\n- setpoints (Array[*] of LGF_typeNonLinSetpoints): 定义特性曲线的设定点表\n\n函数块的执行逻辑如下：\n\n1. 初始化：获取输入值，并确定插值点表的下界和上界。\n2. 不同模式：根据使能默认输出值、跟踪模式和重置模式的选择，执行相应的操作。\n3. 计算多项式输出：执行搜索过程，找到输入值所在的插值区间，并计算该区间的输出值。\n4. 写入输出：根据计算得到的多项式系数，计算并输出最终的输出值。\n\n函数块不使用ENO机制进行错误处理，而是通过错误和状态变量来处理可能出现的错误。\n\n用户自定义类型包括：\n- LGF_typeNonLinSetpoints: 定义插值点表中的每个点，包括输入值和对应的输出值。\n\n\n"}