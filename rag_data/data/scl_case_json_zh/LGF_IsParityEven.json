{"title": "Even Parity Checker for DWord", "name": "LGF_IsParityEven", "description": "The function checks whether the parity of the input variable of type DWord is even.", "type": "FUNCTION", "input": [{"name": "doubleWord", "type": "DWord", "description": "Variable for which the parity is to be determined."}], "output": [], "in/out": [], "return_value": [{"type": "Bool", "description": "TRUE: When the number of bits that are assigned `TRUE` is even"}], "status_codes": {"16#0000": "STATUS_NO_ERROR"}, "user_defined_types": [], "description_zh": "\n该函数\"LGF_IsParityEven\"用于检查一个32位双字（DWord）类型的输入变量doubleWord的奇偶性。函数通过一系列的位操作来判断doubleWord中值为1的比特数量是奇数还是偶数。如果1的比特数量为偶数，则函数返回真（TRUE），表示奇偶性为偶；否则返回假（FALSE），表示奇偶性为奇。\n\n函数首先将输入的doubleWord赋值给临时变量tempDword。然后，通过执行一系列的XOR和移位操作，tempDword中的比特位会被重新组合，以便于检查奇偶性。具体来说，tempDword首先与自身右移1位后的结果进行XOR操作，然后与自身右移2位后的结果进行XOR操作。接着，tempDword被转换为一个无符号整数，并与一个常量MASK_FOR_RESULT进行乘法操作，再转换回DWord类型。最后，tempDword被右移28位，结果存储在最低有效位（LSB）中。如果LSB为0，则表示1的比特数量为偶数；如果LSB为1，则表示1的比特数量为奇数。函数通过NOT操作和.%X0（测试LSB是否为0）来实现这个逻辑，并将结果存储在函数的返回值中。\n\n由于函数的执行过程中不可能产生错误，因此ENO被设置为FALSE，表示不需要进行错误处理。\n\n\n"}