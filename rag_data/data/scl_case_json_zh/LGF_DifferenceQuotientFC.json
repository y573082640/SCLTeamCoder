{"title": "Numeric Differentiation Function", "name": "LGF_DifferenceQuotientFC", "description": "This function numerically differentiates a signal sampled equidistantly in time.", "type": "FUNCTION", "input": [{"name": "deltaT", "type": "LReal", "description": "Equidistant distance between two measured values. (e.g. 1s)"}], "output": [{"name": "error", "type": "Bool", "description": "FALSE: No error TRUE: An error occurred during the execution of the FB"}, {"name": "status", "type": "Word", "description": "Status of the FB"}], "in/out": [{"name": "values", "type": "Array[*] of LReal", "description": "Values that will be included in the differentiation."}, {"name": "derivatedValues", "type": "Array[*] of LReal", "description": "The differentiated value range."}], "return_value": [{"type": "Void", "description": "Void - Function has no return value"}], "status_codes": {"16#0000": "STATUS_FINISHED_NO_ERROR", "16#8200": "ERR_DELTA_T Error: Delta time `deltaT` must not be zero.", "16#8400": "ERR_ARRAYS_DIFFERENT Error: The Array sizes are not equal.", "16#8401": "ERR_NOT_ENOUGH_VALUES Error: Not enough values."}, "user_defined_types": [], "description_zh": "\n该SCL函数\"LGF_DifferenceQuotientFC\"实现了对等距时间采样的信号进行数值微分的功能。函数接收一个输入参数`deltaT`，表示两个测量值之间的等距时间间隔。它处理两个数组：`values`数组包含将要被微分的信号值，`derivatedValues`数组将用于存储微分后的结果。\n\n在执行数值微分之前，函数首先检查`deltaT`是否为零，因为除以零是不允许的。接着，它验证输入数组`values`和输出数组`derivatedValues`的大小是否相等，以及它们是否至少包含4个元素，因为这是进行数值微分所需的最小元素数量。\n\n如果这些检查都通过，函数将使用中央差分公式计算`values`数组中每个元素的微分值，并将结果存储在`derivatedValues`数组中。具体的计算公式是：\n\nẏ(n)=1/12h*(y(n-2)-8y(n-1)+8y(n+1)-y(n+2))\n\n其中h是`deltaT`，ẏ(n)是n时刻的微分值，y(n-2)、y(n-1)、y(n+1)和y(n+2)分别是n时刻前第二个、前一个、后一个和后第二个时刻的信号值。\n\n对于数组边界上的元素，即第一个、第二个、倒数第二个和最后一个元素，函数使用不同的公式来计算它们的微分值，以避免数组越界错误。\n\n最后，函数将`error`输出设置为`false`，表示没有错误发生，并将`status`输出设置为`STATUS_FINISHED_NO_ERROR`，表示函数已成功执行。ENO（Enable Next Output）机制被禁用，因此ENO始终为`true`。\n\n\n"}