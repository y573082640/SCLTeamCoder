{"title": "DWORD falling edge counting", "name": "LGF_CountFalInDWord", "description": "The function analyzes a variable of the type DWORD and outputs how often a 1-0 sequence (falling edge) occurs in the variable.", "type": "FUNCTION_BLOCK", "input": [{"name": "value", "type": "DWord", "description": "Input Double word in which the falling edges are counted"}], "output": [{"name": "numberOfEdges", "type": "Int", "description": "Number of falling edges in the DWord"}], "in/out": [], "return_value": [], "status_codes": {}, "user_defined_types": [], "description_zh": "\n该案例代码定义了一个名为 \"LGF_CountFalInDWord\" 的函数块，用于分析和计算一个 DWORD 类型变量中 1-0 序列（即下降沿）出现的次数。函数块接收一个 DWORD 类型的输入变量 \"value\"，并输出一个整数类型的变量 \"numberOfEdges\"，表示 DWORD 变量中下降沿的个数。\n\n函数块的工作流程如下：\n\n1. 初始化阶段：将临时计数器 \"tempCount\" 设置为 0，将输入的 DWORD 值 \"value\" 复制到临时 DWORD 变量 \"tempDWord\" 中。\n\n2. 计数下降沿：首先检查前一个周期的 DWORD 值的最低有效位 (LSB) 和当前周期的 DWORD 值的最高有效位 (MSB) 是否构成下降沿。如果满足条件，则临时计数器 \"tempCount\" 加 1。\n\n3. 循环检查下降沿：通过一个循环，遍历 DWORD 变量的每一位，检查当前位和下一位是否构成下降沿。如果找到下降沿，则临时计数器 \"tempCount\" 加 1。在每次迭代后，将 DWORD 变量向右移位一位，以便检查下一位。\n\n4. 更新前一个周期的 DWORD 值：将当前周期的 DWORD 值 \"value\" 复制到用于存储前一个周期值的变量 \"statDWordPrevCycle\" 中。\n\n5. 输出结果：将临时计数器 \"tempCount\" 的值赋给输出变量 \"numberOfEdges\"，以供外部使用。\n\n6. 错误处理：本函数块不使用 ENO（Enable Next Object）机制进行错误处理，直接将 ENO 设置为 TRUE。\n\n该函数块通过简单的逻辑和位操作，有效地实现了在 DWORD 变量中计数下降沿的功能。\n\n\n"}