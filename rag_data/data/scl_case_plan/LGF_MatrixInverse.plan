{"variables": ["1. name: error, type: Bool, initial: FALSE, role: An output variable that indicates whether an error occurred during the matrix inversion process.", "2. name: status, type: Word, initial: STATUS_NO_ERROR, role: An output variable that holds the status code of the matrix inversion process.", "3. name: matrix, type: Array[*, *] of LReal, initial: None, role: An input/output variable representing the square matrix to be inverted.", "4. name: matrixResult, type: Array[*, *] of LReal, initial: None, role: An input/output variable where the inverted matrix will be stored.", "5. name: tempMatrix1LowerBoundRows, type: DInt, initial: None, role: A temporary variable to store the lower bound of rows for the input matrix.", "6. name: tempMatrix1LowerBoundColumns, type: DInt, initial: None, role: A temporary variable to store the lower bound of columns for the input matrix.", "7. name: tempMatrix1UpperBoundRows, type: DInt, initial: None, role: A temporary variable to store the upper bound of rows for the input matrix.", "8. name: tempMatrix1UpperBoundColumns, type: DInt, initial: None, role: A temporary variable to store the upper bound of columns for the input matrix.", "9. name: tempResultMatrixLowerBoundRows, type: DInt, initial: None, role: A temporary variable to store the lower bound of rows for the result matrix.", "10. name: tempResultMatrixLowerBoundColumns, type: DInt, initial: None, role: A temporary variable to store the lower bound of columns for the result matrix.", "11. name: tempResultMatrixUpperBoundRows, type: DInt, initial: None, role: A temporary variable to store the upper bound of rows for the result matrix.", "12. name: tempResultMatrixUpperBoundColumns, type: DInt, initial: None, role: A temporary variable to store the upper bound of columns for the result matrix.", "13. name: tempCounterRows, type: DInt, initial: None, role: A temporary loop counter for iterating through rows.", "14. name: tempCounterColumns, type: DInt, initial: None, role: A temporary loop counter for iterating through columns.", "15. name: tempColumns, type: DInt, initial: None, role: A temporary variable to store the number of columns in the input matrix.", "16. name: tempRows, type: DInt, initial: None, role: A temporary variable to store the number of rows in the input matrix.", "17. name: tempK, type: DInt, initial: None, role: A temporary variable used in the calculation of the inverted matrix.", "18. name: tempI, type: DInt, initial: None, role: A temporary loop counter used in the calculation of the inverted matrix.", "19. name: tempJ, type: DInt, initial: None, role: A temporary loop counter used in the calculation of the inverted matrix.", "20. name: tempMatrixElement, type: LReal, initial: None, role: A temporary variable to store elements of the matrix during the inversion process.", "21. name: PRECISION, type: LReal, initial: 1.0E-10, role: A constant used to determine the tolerance level for floating-point comparison.", "22. name: NEGATIVE_NUMERATOR, type: LReal, initial: -1.0, role: A constant used to negate matrix elements.", "23. name: ZERO, type: UInt, initial: 0, role: A constant representing the numerical value zero.", "24. name: ONE, type: UInt, initial: 1, role: A constant representing the numerical value one.", "25. name: ROWS, type: UInt, initial: 1, role: A constant representing the dimension for rows in array operations.", "26. name: COLUMNS, type: UInt, initial: 2, role: A constant representing the dimension for columns in array operations.", "27. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: A constant representing the status code for no error.", "28. name: ERR_NOT_SQUARE_MATRIX, type: Word, initial: 16#8200, role: A constant representing the error code for a non-square matrix.", "29. name: ERR_ALGORITHM_NOT_POSSIBLE, type: Word, initial: 16#8201, role: A constant representing the error code when the algorithm is not possible to execute.", "30. name: ERR_MATR1_LOWBOUND_ROWS_RESMATR_LOWBOUND_ROWS, type: Word, initial: 16#8202, role: A constant representing the error code for mismatched lower bound rows.", "31. name: ERR_MATR1_LOWBOUND_COLUMNS_RESMATR_LOWBOUND_COLUMNS, type: Word, initial: 16#8203, role: A constant representing the error code for mismatched lower bound columns.", "32. name: ERR_MATR1_UPPBOUND_ROWS_RESMATR_UPPBOUND_ROWS, type: Word, initial: 16#8204, role: A constant representing the error code for mismatched upper bound rows.", "33. name: ERR_MATR1_UPPBOUND_COLUMNS_RESMATR_UPPBOUND_COLUMNS, type: Word, initial: 16#8205, role: A constant representing the error code for mismatched upper bound columns."], "instructions": ["LOWER_BOUND", "UPPER_BOUND", "ABS", "IF", "ELSE", "RETURN", "FOR", "END_FOR", "ENO"], "planning": "Step1. Determine the size of the matrices by finding their lower and upper bounds for rows and columns.\nStep2. Count the number of columns and rows in the input matrix.\nStep3. Validate the input matrix to ensure it is square and that the bounds of the input and result matrices match.\nStep4. Initialize the result matrix with zeros.\nStep5. Negate the input matrix elements and store them in the result matrix.\nStep6. Perform the matrix inversion algorithm, which involves several steps:\n  - Relegation of the \"Main\" diagonal.\n  - Calculation of elements in the Pivot-column.\n  - Convert-calculation of elements not in the Pivot-column or Pivot-row.\n  - Calculation of elements in the Pivot-row.\nStep7. Set the error flag and status code if an error occurs during the inversion process.\nStep8. Set the ENO to TRUE to indicate successful execution, as error handling is done by the error and status variables.", "name": "LGF_MatrixInverse"}