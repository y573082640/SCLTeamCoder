{"variables": ["1. name: value, type: LReal, initial: None, role: The value to be checked against the setpoint and tolerance.", "2. name: setpoint, type: LReal, initial: None, role: The set point against which the value is compared.", "3. name: tolerance, type: LReal, initial: None, role: The tolerance range around the set point in percent.", "4. name: overHighLimit, type: Bool, initial: None, role: Indicates whether the value exceeds the upper limit.", "5. name: belowLowLimit, type: Bool, initial: None, role: Indicates whether the value is below the lower limit.", "6. name: error, type: Bool, initial: None, role: Error flag indicating an error in range limit values.", "7. name: status, type: Word, initial: None, role: Status code representing different states of the function.", "8. name: tempHighLimit, type: LReal, initial: None, role: Temporary variable to store the calculated high limit.", "9. name: tempLowLimit, type: LReal, initial: None, role: Temporary variable to store the calculated low limit.", "10. name: tempValueOverHighLimit, type: Bool, initial: None, role: Temporary flag to indicate if the value is over the high limit.", "11. name: tempValueUnderLowLimit, type: Bool, initial: None, role: Temporary flag to indicate if the value is under the low limit.", "12. name: ONE, type: LReal, initial: 1.0, role: Constant representing the numeric value 1.", "13. name: ONEHUNDRET_PROCENT, type: LReal, initial: 100.0, role: Constant representing 100 percent.", "14. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant for status code indicating no error.", "15. name: ERR_RANGE_LIMIT_VALUES, type: Word, initial: 16#8401, role: Constant for error status code indicating invalid range limit values."], "instructions": ["IF", "ABS", "DIV", "GT", "LT", "MUL", "ASSIGN", "NOT", "OR", "RETURN"], "planning": "Step1. Declare constants and temporary variables for calculations and flags.\nStep2. Calculate the high and low limits based on the setpoint and tolerance.\nStep3. Check if the function should return due to an error condition (ENO is false).\nStep4. Determine if the value is above the high limit or below the low limit.\nStep5. Set the function's return value to true if the value is within the calculated limits, otherwise false.\nStep6. Set the output flags for overHighLimit and belowLowLimit based on the temporary flags.\nStep7. Clear the error flag and set the status to no error.\nStep8. Set ENO to true as the function does not use it for error propagation.", "name": "LGF_IsValueInTolerance"}