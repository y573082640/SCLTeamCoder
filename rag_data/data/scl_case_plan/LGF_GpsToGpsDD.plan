{"variables": ["1. name: gps, type: LGF_typeGPS, initial: None, role: Input GPS data to be converted.", "2. name: error, type: Bool, initial: None, role: Output indicating whether an error occurred during execution.", "3. name: status, type: Word, initial: None, role: Output status of the function block, providing error identification.", "4. name: tempGPS, type: LGF_typeGPS_DD, initial: None, role: Temporary variable to store the converted GPS data.", "5. name: tempStatus, type: Word, initial: None, role: Temporary variable to store the status of the conversion process.", "6. name: NORTH1, type: Char, initial: 'n', role: Constant for latitude direction 'n'.", "7. name: NORTH2, type: Char, initial: 'N', role: Constant for latitude direction 'N'.", "8. name: SOUTH1, type: Char, initial: 's', role: Constant for latitude direction 's'.", "9. name: SOUTH2, type: Char, initial: 'S', role: Constant for latitude direction 'S'.", "10. name: EAST1, type: Char, initial: 'e', role: Constant for longitude direction 'e'.", "11. name: EAST2, type: Char, initial: 'E', role: Constant for longitude direction 'E'.", "12. name: WEST1, type: Char, initial: 'w', role: Constant for longitude direction 'w'.", "13. name: WEST2, type: Char, initial: 'W', role: Constant for longitude direction 'W'.", "14. name: MINUTES_PER_HOUR, type: Real, initial: 60.0, role: Constant for conversion factor from minutes to hours.", "15. name: SECONDS_PER_HOUR, type: Real, initial: 3600.0, role: Constant for conversion factor from seconds to hours.", "16. name: MAX_MIN_OR_SEC_59, type: UInt, initial: 59, role: Constant for maximum value for minutes and seconds.", "17. name: DEGREE_0, type: Real, initial: 0.0, role: Constant for zero degrees.", "18. name: DEGREE_15, type: Real, initial: 15.0, role: Constant for 15 degrees.", "19. name: DEGREE_90, type: Real, initial: 90.0, role: Constant for 90 degrees.", "20. name: DEGREE_180, type: Real, initial: 180.0, role: Constant for 180 degrees.", "21. name: DEGREE_360, type: Real, initial: 360.0, role: Constant for 360 degrees.", "22. name: STATUS_EXECUTION_FINISHED_NO_ERROR, type: Word, initial: 16#0000, role: Constant for status code indicating successful execution.", "23. name: ERR_LATITUDE_DIRECTION, type: Word, initial: 16#8200, role: Constant for error code indicating latitude direction error.", "24. name: ERR_LATITUDE_VALUE, type: Word, initial: 16#8201, role: Constant for error code indicating latitude value error.", "25. name: ERR_LONGITUDE_DIRECTION, type: Word, initial: 16#8202, role: Constant for error code indicating longitude direction error.", "26. name: ERR_LONGITUDE_VALUE, type: Word, initial: 16#8203, role: Constant for error code indicating longitude value error."], "instructions": ["UINT_TO_REAL", "ABS"], "planning": "Step1. Initialize the tempStatus to STATUS_EXECUTION_FINISHED_NO_ERROR.\nStep2. Convert latitude seconds to decimal degrees and add to tempGPS.latitude.\nStep3. Convert latitude minutes to decimal degrees and add to tempGPS.latitude.\nStep4. Add latitude degrees to tempGPS.latitude.\nStep5. Adjust the sign of tempGPS.latitude based on the direction (north or south).\nStep6. Check for latitude input errors (direction, minutes, seconds) and set tempStatus accordingly.\nStep7. Repeat steps 2-6 for longitude.\nStep8. If any error is detected (indicated by tempStatus), set tempGPS values to zero.\nStep9. Assign tempGPS to LGF_GpsToGpsDD output.\nStep10. Set error and status outputs based on tempStatus.\nStep11. Set ENO to TRUE as the ENO mechanism is not used.", "name": "LGF_GpsToGpsDD"}