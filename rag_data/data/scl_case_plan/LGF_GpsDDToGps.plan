{"variables": ["1. name: gps, type: LGF_typeGPS_DD, initial: None, role: Input GPS data in decimal degrees to be converted.", "2. name: error, type: Bool, initial: None, role: Output indicating whether an error occurred during execution.", "3. name: status, type: Word, initial: None, role: Output providing status of the function, including error identification.", "4. name: tempGPS_DD, type: LGF_typeGPS_DD, initial: None, role: Temporary variable to store input GPS data for processing.", "5. name: tempGPS, type: LGF_typeGPS, initial: None, role: Temporary variable to store the converted GPS data.", "6. name: tempRealStorage, type: Real, initial: None, role: Temporary storage for real number operations during conversion.", "7. name: tempStatus, type: Word, initial: None, role: Temporary variable to store the status during processing before assigning it to the output status.", "8. name: NORTH, type: Char, initial: 'N', role: Constant representing the north direction.", "9. name: SOUTH, type: Char, initial: 'S', role: Constant representing the south direction.", "10. name: EAST, type: Char, initial: 'E', role: Constant representing the east direction.", "11. name: WEST, type: Char, initial: 'W', role: Constant representing the west direction.", "12. name: MINUTES_PER_HOUR, type: Real, initial: 60.0, role: Constant representing the number of minutes in an hour.", "13. name: SECONDS_PER_MINUTE, type: Real, initial: 60.0, role: Constant representing the number of seconds in a minute.", "14. name: MAX_MIN_OR_SEC_59, type: UInt, initial: 59, role: Constant representing the maximum value for minutes or seconds.", "15. name: DEGREE_0, type: Real, initial: 0.0, role: Constant representing zero degrees.", "16. name: DEGREE_90, type: UInt, initial: 90, role: Constant representing 90 degrees.", "17. name: DEGREE_180, type: UInt, initial: 180, role: Constant representing 180 degrees.", "18. name: STATUS_EXECUTION_FINISHED_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing the status code for successful execution.", "19. name: ERR_LATITUDE_VALUE, type: Word, initial: 16#8201, role: Constant representing the error code for invalid latitude value.", "20. name: ERR_LONGITUDE_VALUE, type: Word, initial: 16#8203, role: Constant representing the error code for invalid longitude value."], "instructions": ["REAL_TO_UINT", "FRAC"], "planning": "# Step 1. Initialize the status to STATUS_EXECUTION_FINISHED_NO_ERROR.\n# Step 2. Copy the input GPS data to a temporary variable for processing.\n# Step 3. Determine the latitude direction (NORTH or SOUTH) and convert the decimal degrees to degrees, minutes, and seconds.\n# Step 4. Check for latitude value errors (degrees > 90, minutes > 59, seconds > 59) and set the status accordingly.\n# Step 5. Determine the longitude direction (EAST or WEST) and convert the decimal degrees to degrees, minutes, and seconds.\n# Step 6. Check for longitude value errors (degrees > 180, minutes > 59, seconds > 59) and set the status accordingly.\n# Step 7. If there are errors detected in the DMS input, set latitude and longitude degrees to zero and update the status.\n# Step 8. Assign the converted GPS data to the output variable LGF_GpsDDToGps.\n# Step 9. Set the error output based on the status error flag.\n# Step 10. Set the status output to the current status of processing.\n# Step 11. Since the ENO mechanism is not used, explicitly set ENO to TRUE and return.", "name": "LGF_GpsDDToGps"}