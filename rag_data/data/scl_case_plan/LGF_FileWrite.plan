{"variables": ["1. name: execute, type: Bool, initial: None, role: A trigger to start the file write process on a rising edge.", "2. name: fileName, type: String, initial: None, role: The file path and name for the file to be written, including the UserFiles directory.", "3. name: done, type: Bool, initial: False, role: Indicates if the file write process has been completed successfully.", "4. name: busy, type: Bool, initial: False, role: Indicates if the function block is currently processing a file write operation.", "5. name: error, type: Bool, initial: False, role: Indicates if an error has occurred during the file write operation.", "6. name: status, type: Word, initial: #STATUS_NO_CALL, role: Provides the status of the function block or error identification.", "7. name: dataLength, type: DInt, initial: 0, role: The length of the data written to the file.", "8. name: bufferByteArray, type: Array[*] of Byte, initial: None, role: The byte array buffer used for read/write operations from/to the file.", "9. name: data, type: Variant, initial: None, role: The data set to be written into the file.", "10. name: statInternal, type: Struct, initial: None, role: Internal structure to store and manage the execution state and diagnostics of the function block.", "11. name: instFileWrite, type: FileWriteC, initial: None, role: Instance of the FileWriteC instruction used for file operations.", "12. name: statMainState, type: DInt, initial: #FB_STATE_NO_PROCESSING, role: The main state of the state machine controlling the function block's execution.", "13. name: statParameterDataIsByteArray, type: Bool, initial: None, role: Indicates if the data parameter is a byte array.", "14. name: statAsynchronusMode, type: Bool, initial: None, role: Indicates if the file write operation should be performed asynchronously.", "15. name: statBufferSize, type: DInt, initial: None, role: The size of the bufferByteArray.", "16. name: statLengthData, type: DInt, initial: None, role: The length of the data to be written.", "17. name: statLengthFile, type: DInt, initial: 0, role: The length of the file after writing.", "18. name: tempExecute, type: Bool, initial: None, role: Temporary variable to store the current value of the execute input.", "19. name: tempExitStateLoop, type: Bool, initial: None, role: Temporary variable to control the loop in the state machine.", "20. name: tempResult, type: Word, initial: None, role: Temporary variable to store the result of operations.", "21. name: tempBufferPosition, type: DInt, initial: None, role: Temporary variable to store the buffer position.", "22. name: tempPathPrefix, type: String, initial: None, role: Temporary variable to store the path prefix.", "23. name: PATH_PREFIX, type: String, initial: 'UserFiles/', role: Constant string representing the path prefix for the UserFiles directory.", "24. name: FB_STATE_NO_PROCESSING, type: DInt, initial: 0, role: Constant representing the state of no processing in the state machine.", "25. name: FB_STATE_INIT, type: DInt, initial: 1, role: Constant representing the initial state in the state machine.", "26. name: FB_STATE_PARAMETER, type: DInt, initial: 2, role: Constant representing the state for parameter handling in the state machine.", "27. name: FB_STATE_FILE_WRITE, type: DInt, initial: 3, role: Constant representing the state for file writing in the state machine.", "28. name: STATUS_EXECUTION_FINISHED, type: Word, initial: 16#0000, role: Constant representing the status of successful execution.", "29. name: STATUS_NO_CALL, type: Word, initial: 16#7000, role: Constant representing the status of no function block call.", "30. name: STATUS_FIRST_CALL, type: Word, initial: 16#7001, role: Constant representing the status of the first call of the function block.", "31. name: STATUS_SUBSEQUENT_CALL, type: Word, initial: 16#7002, role: Constant representing the status of subsequent calls of the function block.", "32. name: ERR_UNDEFINED_STATE, type: Word, initial: 16#8600, role: Constant representing the error code for an undefined state in the state machine.", "33. name: ERR_BUFFER_LOWERBOUND, type: Word, initial: 16#8201, role: Constant representing the error code for a buffer lower boundary issue.", "34. name: ERR_BUFFER_ARRAY_TO_SMALL_TO_COPY, type: Word, initial: 16#8202, role: Constant representing the error code for a buffer array that is too small to copy data.", "35. name: ERR_FILE_PATH, type: Word, initial: 16#8401, role: Constant representing the error code for an invalid file path.", "36. name: ERR_MOVE_BLK_VARIANT, type: Word, initial: 16#8601, role: Constant representing the error code for an issue with the MOVE_BLK_VARIANT instruction.", "37. name: ERR_DATA_SERIALIZE, type: Word, initial: 16#8603, role: Constant representing the error code for an issue with the Serialize instruction.", "38. name: ERR_FILE_WRITE_INIT, type: Word, initial: 16#8604, role: Constant representing the error code for an issue initializing the file write operation.", "39. name: ERR_FILE_WRITE, type: Word, initial: 16#8605, role: Constant representing the error code for an issue during the file write operation."], "instructions": ["MOVE_BLK_VARIANT", "Serialize", "FileWriteC", "LOWER_BOUND", "UPPER_BOUND", "LEN", "INT_TO_WORD", "WORD_TO_INT", "UDINT_TO_DINT", "DINT_TO_UDINT", "DINT_TO_WORD", "Word", "%X15"], "planning": "Step1. Initialize internal diagnostics and state machine to prepare for execution.\nStep2. Check if the execute input has a rising edge and if the function block is not currently processing another job. If both conditions are met, initialize the function block for the first call.\nStep3. In the state machine, verify the file path, buffer boundaries, and parameter data types. If any checks fail, set the appropriate error status and exit the block.\nStep4. In the #FB_STATE_INIT state, initialize the file write instruction and handle any errors that occur during this process. If successful, transition to the #FB_STATE_PARAMETER state.\nStep5. In the #FB_STATE_PARAMETER state, copy the data to the buffer if it is a byte array or serialize it if it is not. Handle any errors that occur during this process. If successful, transition to the #FB_STATE_FILE_WRITE state.\nStep6. In the #FB_STATE_FILE_WRITE state, initiate the file write operation using the FileWriteC instruction. Handle any errors that occur during this process. If the file write is successful, set the status to indicate successful execution.\nStep7. In the OUTPUTS region, update the done, busy, error, and status outputs based on the execution status. If the function block is done or an error has occurred, reset the state machine to the #FB_STATE_NO_PROCESSING state.\nStep8. Return from the function block if there is nothing to do or if the diagnostics status is #STATUS_NO_CALL.", "name": "LGF_FileWrite"}