{"variables": ["1. name: initValue, type: DWord, initial: 16#00, role: The initial value used in the CRC calculation.", "2. name: mask, type: DWord, initial: 16#00, role: The generator polynomial (mask) for the CRC calculation.", "3. name: finalXorValue, type: DWord, initial: 16#00, role: The value used for the final XOR operation in CRC calculation.", "4. name: reflectInput, type: Bool, initial: FALSE, role: Determines whether the input byte should be mirrored before processing.", "5. name: reflectResult, type: Bool, initial: FALSE, role: Determines whether the resulting CRC should be mirrored before output.", "6. name: noOfElements, type: UInt, initial: 0, role: The number of elements to be used in the CRC calculation.", "7. name: error, type: Bool, initial: None, role: Error flag indicating if an error has occurred during the CRC calculation.", "8. name: status, type: Word, initial: None, role: Status code providing additional information about the calculation status.", "9. name: array, type: Array[*] of Byte, initial: None, role: The data stream for which the CRC value will be calculated.", "10. name: tempInput, type: Byte, initial: None, role: Temporary variable used to store the current input byte during processing.", "11. name: tempCRC, type: DWord, initial: None, role: Temporary variable used to store the intermediate CRC value during processing.", "12. name: tempInvCRC, type: DWord, initial: None, role: Temporary variable used to store the inverted CRC for mirroring the result.", "13. name: tempLowerLimit, type: DInt, initial: None, role: Lower limit index for the loop processing the array.", "14. name: tempUpperLimit, type: DInt, initial: None, role: Upper limit index for the loop processing the array.", "15. name: tempIndexArray, type: DInt, initial: None, role: Loop index for iterating through the array.", "16. name: tempIndexCRC, type: DInt, initial: None, role: Loop index for the bit manipulation within the CRC calculation."], "instructions": ["BYTE_TO_DWORD", "SHL", "XOR", "UPPER_BOUND", "LOWER_BOUND"], "planning": "Step1. Initialize the CRC value #tempCRC to the input parameter #initValue.\nStep2. Calculate the lower and upper bounds of the array to be processed.\nStep3. Check if the parameter #noOfElements is greater than zero and fits within the array bounds; if not, set the error flag and status code accordingly and exit the function.\nStep4. Iterate through the array elements using a FOR loop, processing each element according to the CRC algorithm.\nStep5. Within the array processing loop, check if #reflectInput is TRUE and if so, reverse the bit order of the current array element.\nStep6. Perform the CRC division by shifting the current element into the most significant byte of the CRC and XORing with the mask.\nStep7. For each bit in the CRC value, check the most significant bit and either shift with or without XORing, depending on its state.\nStep8. After processing all elements, if #reflectResult is TRUE, reverse the bit order of the final CRC value.\nStep9. XOR the final CRC value with the #finalXorValue parameter.\nStep10. Set the status code to indicate no error and clear the error flag.\nStep11. Return the final CRC value as the function's result.", "name": "LGF_CalcCRC32Advanced"}