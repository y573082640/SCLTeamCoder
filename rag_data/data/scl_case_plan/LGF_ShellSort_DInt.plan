{"variables": ["1. name: sortDirection, type: Bool, initial: None, role: Determines the sorting order of the array, ascending or descending.", "2. name: error, type: Bool, initial: None, role: Indicates whether an error occurred during the execution of the function block.", "3. name: status, type: Word, initial: None, role: Provides status information or error codes during the execution of the function block.", "4. name: array, type: Array[*] of DInt, initial: None, role: The array to be sorted.", "5. name: tempArray, type: Array[1..#MAX_ARRAY_ELEMENTS] of DInt, initial: None, role: Temporary storage for the array elements during sorting.", "6. name: tempLowerLimit, type: DInt, initial: None, role: The lower bound index of the input array.", "7. name: tempUpperLimit, type: DInt, initial: None, role: The upper bound index of the input array.", "8. name: tempNoOfElements, type: DInt, initial: None, role: The actual number of elements in the input array.", "9. name: tempGap, type: DInt, initial: None, role: The initial gap size for the shell sort algorithm.", "10. name: tempLoopIndex, type: DInt, initial: None, role: Temporary loop index used in FOR loops for array processing.", "11. name: tempExchangeIndex, type: DInt, initial: None, role: Index used to track the position of an element during the swap process in the sorting algorithm.", "12. name: tempExchangeVariable, type: DInt, initial: None, role: Temporary storage for an array element being exchanged during sorting.", "13. name: tempArrayOffset, type: DInt, initial: None, role: Offset used to adjust the local array index to the range of the incoming array.", "14. name: ARRAY_FIRST_DIMENSION, type: UInt, initial: 1, role: Represents the first dimension of the array.", "15. name: ARRAY_START_INDEX, type: UInt, initial: 1, role: The starting index for the array range.", "16. name: SINGLE_ARRAY_ELEMENT, type: DInt, initial: 1, role: Represents a single array element for comparison purposes.", "17. name: GAP_INIT, type: Int, initial: 1, role: Initial gap size for the shell sort algorithm.", "18. name: GAP_THRESHOLD, type: Int, initial: 1, role: Threshold gap size to stop the shell sort algorithm.", "19. name: GAP_RATIO, type: DInt, initial: 3, role: Ratio used to calculate the gap size in the shell sort algorithm.", "20. name: INCREMENT, type: Int, initial: 1, role: Increment value used in gap size calculations.", "21. name: ELEMENTS_COUNT_CORRECTION, type: DInt, initial: 1, role: Correction factor for the actual number of elements in the array.", "22. name: MAX_ARRAY_ELEMENTS, type: Int, initial: 1000, role: Maximum number of elements allowed in the array.", "23. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Status code indicating no error occurred.", "24. name: ERR_NO_ARRAY, type: Word, initial: 16#8200, role: Status code indicating the input is an empty array.", "25. name: ERR_TOO_MANY_ELEMENTS, type: Word, initial: 16#8201, role: Status code indicating too many elements in the array."], "instructions": ["LOWER_BOUND", "UPPER_BOUND", "IF", "ELSE", "RETURN", "FOR", "WHILE", "EXIT"], "planning": "Step1. Determine the lower and upper bounds of the input array.\nStep2. Calculate the actual number of elements in the array.\nStep3. Shift the array index to the range of 1 to MAX_ARRAY_ELEMENTS.\nStep4. Check for errors related to the array size and set the appropriate error status and return if necessary.\nStep5. Copy the elements of the input array to a local temporary array.\nStep6. Perform the shell sort algorithm on the temporary array.\nStep7. Copy the sorted elements back to the input array.\nStep8. Set the error status to indicate no error and set the status to STATUS_NO_ERROR.\nStep9. Set ENO to TRUE as no error handling is needed.", "name": "LGF_ShellSort_DInt"}