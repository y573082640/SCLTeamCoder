{"variables": ["1. name: error, type: Bool, initial: FALSE, role: An output variable that indicates if an error has occurred during the matrix transposition.", "2. name: status, type: Word, initial: STATUS_NO_ERROR, role: An output variable that provides a status code indicating the result of the matrix transposition operation.", "3. name: matrix, type: Array[*, *] of LReal, initial: None, role: An input/output variable representing the original matrix to be transposed.", "4. name: matrixTranspose, type: Array[*, *] of LReal, initial: None, role: An input/output variable representing the transposed matrix.", "5. name: tempMatrix1LowerBoundRows, type: DInt, initial: None, role: A temporary variable to store the lower bound of rows of the input matrix.", "6. name: tempMatrix1LowerBoundColumns, type: DInt, initial: None, role: A temporary variable to store the lower bound of columns of the input matrix.", "7. name: tempMatrix1UpperBoundRows, type: DInt, initial: None, role: A temporary variable to store the upper bound of rows of the input matrix.", "8. name: tempMatrix1UpperBoundColumns, type: DInt, initial: None, role: A temporary variable to store the upper bound of columns of the input matrix.", "9. name: tempResultMatrixLowerBoundRows, type: DInt, initial: None, role: A temporary variable to store the lower bound of rows of the result matrix.", "10. name: tempResultMatrixLowerBoundColumns, type: DInt, initial: None, role: A temporary variable to store the lower bound of columns of the result matrix.", "11. name: tempResultMatrixUpperBoundRows, type: DInt, initial: None, role: A temporary variable to store the upper bound of rows of the result matrix.", "12. name: tempResultMatrixUpperBoundColumns, type: DInt, initial: None, role: A temporary variable to store the upper bound of columns of the result matrix.", "13. name: tempCounterRow, type: DInt, initial: None, role: A temporary loop counter for iterating through rows of the matrices.", "14. name: tempCounterColumn, type: DInt, initial: None, role: A temporary loop counter for iterating through columns of the matrices.", "15. name: ROWS, type: UInt, initial: 1, role: A constant representing the dimension for rows in the matrix operations.", "16. name: COLUMNS, type: UInt, initial: 2, role: A constant representing the dimension for columns in the matrix operations.", "17. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: A constant representing the status code for no error.", "18. name: ERR_MATR1_LOWBOUND_ROWS_RESMATR_LOWBOUND_COLUMNS, type: Word, initial: 16#8200, role: A constant representing the status code for mismatched lower bounds between input rows and result columns.", "19. name: ERR_MATR1_LOWBOUND_COLUMNS_RESMATR_LOWBOUND_ROWS, type: Word, initial: 16#8201, role: A constant representing the status code for mismatched lower bounds between input columns and result rows.", "20. name: ERR_MATR1_UPPBOUND_ROWS_RESMATR_UPPBOUND_COLUMNS, type: Word, initial: 16#8202, role: A constant representing the status code for mismatched upper bounds between input rows and result columns.", "21. name: ERR_MATR1_UPPBOUND_COLUMNS_RESMATR_UPPBOUND_ROWS, type: Word, initial: 16#8203, role: A constant representing the status code for mismatched upper bounds between input columns and result rows."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "Step1. Determine the size of the input matrix and the transposed matrix by finding their lower and upper bounds for rows and columns.\nStep2. Validate the matrix size constraints. If the size constraints are not met, set the error flag to TRUE, set the appropriate status code, and exit the function.\nStep3. Calculate the transposed matrix by swapping rows and columns of the input matrix and assigning them to the corresponding columns and rows of the transposed matrix.\nStep4. Set the error flag to FALSE and the status code to STATUS_NO_ERROR to indicate successful completion.\nStep5. Set the ENO output to TRUE to indicate that the function has executed without errors.", "name": "LGF_MatrixTranspose"}