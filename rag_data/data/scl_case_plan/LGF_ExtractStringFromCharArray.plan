{"variables": ["1. name: textBefore, type: String, initial: None, role: The text in front of the characters which has to be extracted.", "2. name: textAfter, type: String, initial: None, role: The text behind the characters which has to be extracted.", "3. name: extractedString, type: String, initial: '', role: The extracted string from the array of characters.", "4. name: status, type: Word, initial: STATUS_NO_ERROR, role: Status of the function block indicating the result of the operation.", "5. name: searchIn, type: Variant, initial: None, role: The array of characters or bytes in which to search for the specified text.", "6. name: tempNumElements, type: UDInt, initial: None, role: The number of elements in the input array.", "7. name: tempPosInArray, type: DInt, initial: 0, role: The temporary position within the array during the search.", "8. name: tempLenTextBefore, type: Int, initial: None, role: The length of the text before to be used in search.", "9. name: tempPosTextBefore, type: DInt, initial: 0, role: The position of the text before within the temporary string.", "10. name: tempLenTextAfter, type: Int, initial: None, role: The length of the text after to be used in search.", "11. name: tempPosTextAfter, type: Int, initial: 0, role: The position of the text after within the temporary string.", "12. name: tempString, type: String, initial: '', role: Temporary string used to hold parts of the searchIn array during processing."], "instructions": ["Chars_TO_Strg", "TypeOfElements", "CountOfElements", "FIND", "LEFT", "UDINT_TO_UINT", "UINT_TO_INT", "MIN"], "planning": "# Step 1. Initialize temporary variables for positions and lengths, and set the initial status to no error.\n# Step 2. Validate input to check if searchIn is an array of type Char or Byte. If not, set the status to error and return.\n# Step 3. Get the number of elements in the array to be searched.\n# Step 4. Use a REPEAT loop to iterate through the array, converting characters to a string and searching for the text before.\n# Step 5. If text before is found, adjust the position and search for text after.\n# Step 6. If text after is found within the array, extract the string between text before and text after.\n# Step 7. If text after is not found, set the status to indicate that only the start of the string was found and extract the remaining string.\n# Step 8. If text before is not found in the current string segment, adjust the position to continue the search in the next segment.\n# Step 9. Repeat the process until the end of the array is reached or the text is found.", "name": "LGF_ExtractStringFromCharArray"}