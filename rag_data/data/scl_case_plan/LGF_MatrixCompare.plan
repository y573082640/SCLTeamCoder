{"variables": ["1. name: error, type: Bool, initial: FALSE, role: Indicates whether an error occurred during the comparison.", "2. name: status, type: Word, initial: STATUS_NO_ERROR, role: Provides a status code indicating the result of the comparison.", "3. name: matrix1, type: Array[*, *] of LReal, initial: None, role: The first matrix to be compared.", "4. name: matrix2, type: Array[*, *] of LReal, initial: None, role: The second matrix to be compared.", "5. name: tempMatrix1LowerBoundRows, type: DInt, initial: None, role: Stores the lower row bound of matrix1.", "6. name: tempMatrix1LowerBoundColumns, type: DInt, initial: None, role: Stores the lower column bound of matrix1.", "7. name: tempMatrix1UpperBoundRows, type: DInt, initial: None, role: Stores the upper row bound of matrix1.", "8. name: tempMatrix1UpperBoundColumns, type: DInt, initial: None, role: Stores the upper column bound of matrix1.", "9. name: tempMatrix2LowerBoundRows, type: DInt, initial: None, role: Stores the lower row bound of matrix2.", "10. name: tempMatrix2LowerBoundColumns, type: DInt, initial: None, role: Stores the lower column bound of matrix2.", "11. name: tempMatrix2UpperBoundRows, type: DInt, initial: None, role: Stores the upper row bound of matrix2.", "12. name: tempMatrix2UpperBoundColumns, type: DInt, initial: None, role: Stores the upper column bound of matrix2.", "13. name: tempCounterRows, type: DInt, initial: None, role: A loop counter for iterating over rows of the matrices.", "14. name: tempCounterColumns, type: DInt, initial: None, role: A loop counter for iterating over columns of the matrices.", "15. name: ROWS, type: UInt, initial: 1, role: Used as a dimension identifier for rows.", "16. name: COLUMNS, type: UInt, initial: 2, role: Used as a dimension identifier for columns.", "17. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Status code indicating no error.", "18. name: ERR_MATR1_LOWBOUND_ROWS_MATR2_LOWBOUND_ROWS, type: Word, initial: 16#8200, role: Status code indicating mismatch in row lower bounds.", "19. name: ERR_MATR1_LOWBOUND_COLUMNS_MATR2_LOWBOUND_COLUMNS, type: Word, initial: 16#8201, role: Status code indicating mismatch in column lower bounds.", "20. name: ERR_MATR1_UPPBOUND_ROWS_MATR2_UPPBOUND_ROWS, type: Word, initial: 16#8202, role: Status code indicating mismatch in row upper bounds.", "21. name: ERR_MATR1_UPPBOUND_COLUMNS_MATR2_UPPBOUND_COLUMNS, type: Word, initial: 16#8203, role: Status code indicating mismatch in column upper bounds."], "instructions": ["LOWER_BOUND", "UPPER_BOUND"], "planning": "Step1. Determine the lower and upper bounds of the rows and columns for both matrices.\nStep2. Check for errors in the lower bounds of the rows and columns. If a mismatch is found, set an error flag, return the appropriate status code, and exit the function.\nStep3. Check for errors in the upper bounds of the rows and columns. If a mismatch is found, set an error flag, return the appropriate status code, and exit the function.\nStep4. Iterate over each element of the first matrix. For each element, compare it with the corresponding element in the second matrix.\nStep5. If any pair of elements do not match, set the function's return value to false, clear the error flag, set the status to no error, and exit the function.\nStep6. If all elements match, set the function's return value to true, clear the error flag, set the status to no error, and set ENO to true.", "name": "LGF_MatrixCompare"}