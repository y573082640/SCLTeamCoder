{"variables": ["1. name: value, type: Real, initial: None, role: The value to be checked against the setpoint tolerance.", "2. name: setpoint, type: Real, initial: None, role: The reference setpoint value for tolerance checking.", "3. name: lowerMinimum, type: Real, initial: None, role: The lower limit or tolerance of the setpoint.", "4. name: upperMaximum, type: Real, initial: None, role: The upper limit or tolerance of the setpoint.", "5. name: reset, type: Bool, initial: None, role: A boolean input to reset the function block.", "6. name: configuration, type: LGF_typeIsValueInToleranceByTimeConfiguration, initial: None, role: Configuration parameters for the function block.", "7. name: overHighLimit, type: Bool, initial: False, role: Output indicating if the value is above the high limit.", "8. name: belowLowLimit, type: Bool, initial: False, role: Output indicating if the value is below the low limit.", "9. name: inLimits, type: Bool, initial: False, role: Output indicating if the value is within the set tolerance limits.", "10. name: setpointChange, type: Bool, initial: False, role: Output indicating if a setpoint change has been detected.", "11. name: error, type: Bool, initial: False, role: Output indicating if an error has occurred.", "12. name: status, type: Word, initial: 16#0000, role: Output providing the status of the function block.", "13. name: instMonitorUpper, type: IEC_TIMER, initial: None, role: Timer instance for monitoring upper limit violation.", "14. name: instMonitorLower, type: IEC_TIMER, initial: None, role: Timer instance for monitoring lower limit violation.", "15. name: instMonitorChange, type: IEC_TIMER, initial: None, role: Timer instance for monitoring setpoint change.", "16. name: statSetpointPrevious, type: Real, initial: None, role: Stores the previous value of the setpoint for change detection.", "17. name: statResetPrev, type: Bool, initial: None, role: Stores the previous state of the reset input.", "18. name: statSetpointChange, type: Bool, initial: False, role: Indicates whether a setpoint change has occurred.", "19. name: statWasWithinTolerance, type: Bool, initial: False, role: Indicates whether the value was previously within the tolerance.", "20. name: tempValueOverHighLimit, type: Bool, initial: None, role: Temporary variable to store the result of the high limit check.", "21. name: tempValueUnderLowLimit, type: Bool, initial: None, role: Temporary variable to store the result of the low limit check.", "22. name: ONE, type: Real, initial: 1.0, role: Constant value used for calculations.", "23. name: ONEHUNDRED_PERCENT, type: Real, initial: 100.0, role: Constant value used for percentage calculations.", "24. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing no error status.", "25. name: ERR_RANGE_LIMIT_VALUE_CALC, type: Word, initial: 16#8401, role: Constant representing error code for range limit value calculation.", "26. name: ERR_SETPOINT_ABOVE_HIGH_LIMIT, type: Word, initial: 16#8402, role: Constant representing error code for setpoint above high limit.", "27. name: ERR_SETPOINT_BELOW_LOW_LIMIT, type: Word, initial: 16#8403, role: Constant representing error code for setpoint below low limit."], "instructions": ["IEC_TIMER.TON"], "planning": "Step1. Initialize temporary variables and constants.\nStep2. Calculate the tolerance limits based on the configuration parameters.\nStep3. Detect if there is a change in the setpoint and handle the reset input.\nStep4. Check if the value is within the tolerance limits and set the corresponding flags.\nStep5. Start the monitoring timers for upper limit, lower limit, and setpoint change if the conditions are met.\nStep6. Update the output variables based on the timer states and the tolerance flags.\nStep7. Set the error and status outputs if any errors are detected.\nStep8. Set the ENO output to TRUE to indicate successful execution of the function block.", "name": "LGF_IsValueInToleranceByTime"}