{"variables": ["1. name: mode, type: Int, initial: None, role: Determines the conversion mode for temperature unit conversion.", "2. name: value, type: Real, initial: None, role: The temperature value to be converted.", "3. name: error, type: Bool, initial: None, role: Indicates if an error occurred during the execution of the FB.", "4. name: status, type: Word, initial: None, role: Provides the status of the FB execution.", "5. name: tempConversionResult, type: Real, initial: None, role: Stores the intermediate result of the temperature conversion.", "6. name: CELSIUS_TO_FAHRENHEIT, type: Int, initial: 1, role: Constant representing the mode for converting Celsius to Fahrenheit.", "7. name: CELSIUS_TO_FAHRENHEIT_GAIN, type: Real, initial: 1.8, role: Conversion factor from Celsius to Fahrenheit.", "8. name: CELSIUS_TO_FAHRENHEIT_OFFSET, type: Real, initial: 32.0, role: Offset added to Celsius value for conversion to Fahrenheit.", "9. name: FAHRENHEIT_TO_CELSIUS, type: Int, initial: 2, role: Constant representing the mode for converting Fahrenheit to Celsius.", "10. name: FAHRENHEIT_TO_CELSIUS_GAIN, type: Real, initial: 1.8, role: Conversion factor from Fahrenheit to Celsius.", "11. name: FAHRENHEIT_TO_CELSIUS_OFFSET, type: Real, initial: 32.0, role: Offset subtracted from Fahrenheit value for conversion to Celsius.", "12. name: CELSIUS_TO_KELVIN, type: Int, initial: 3, role: Constant representing the mode for converting Celsius to Kelvin.", "13. name: CELSIUS_TO_KELVIN_OFFSET, type: Real, initial: 273.15, role: Offset added to Celsius value for conversion to Kelvin.", "14. name: KELVIN_TO_CELSIUS, type: Int, initial: 4, role: Constant representing the mode for converting Kelvin to Celsius.", "15. name: KELVIN_TO_CELSIUS_OFFSET, type: Real, initial: 273.15, role: Offset subtracted from Kelvin value for conversion to Celsius.", "16. name: FAHRENHEIT_TO_KELVIN, type: Int, initial: 5, role: Constant representing the mode for converting Fahrenheit to Kelvin.", "17. name: FAHRENHEIT_TO_KELVIN_GAIN, type: Real, initial: 1.8, role: Conversion factor from Fahrenheit to Kelvin.", "18. name: FAHRENHEIT_TO_KELVIN_OFFSET_FAHRENHEIT, type: Real, initial: 273.15, role: Offset added to Fahrenheit value for conversion to Kelvin.", "19. name: KELVIN_TO_FAHRENHEIT, type: Int, initial: 6, role: Constant representing the mode for converting Kelvin to Fahrenheit.", "20. name: KELVIN_TO_FAHRENHEIT_GAIN, type: Real, initial: 1.8, role: Conversion factor from Kelvin to Fahrenheit.", "21. name: KELVIN_TO_FAHRENHEIT_OFFSET_KELVIN, type: Real, initial: 273.15, role: Offset subtracted from Kelvin value for conversion to Fahrenheit.", "22. name: RANKINE_TO_KELVIN, type: Int, initial: 7, role: Constant representing the mode for converting Rankine to Kelvin.", "23. name: RANKINE_TO_KELVIN_GAIN_NUMERATOR, type: Real, initial: 5.0, role: Numerator of the conversion factor from Rankine to Kelvin.", "24. name: RANKINE_TO_KELVIN_GAIN_DENOMINATOR, type: Real, initial: 9.0, role: Denominator of the conversion factor from Rankine to Kelvin.", "25. name: KELVIN_TO_RANKINE, type: Int, initial: 8, role: Constant representing the mode for converting Kelvin to Rankine.", "26. name: KELVIN_TO_RANKINE_FACTOR, type: Real, initial: 1.8, role: Conversion factor from Kelvin to Rankine.", "27. name: NO_ERROR, type: Word, initial: 16#0000, role: Constant representing no error status.", "28. name: ERR WRONG MODE, type: Word, initial: 16#8200, role: Constant representing the error code for wrong mode selection."], "instructions": ["CASE", "RETURN"], "planning": "Step 1. Define all the necessary constants for conversion modes and their respective conversion factors or offsets.\nStep 2. Define the input, output, and temporary variables required for the function.\nStep 3. Implement a CASE statement to handle different conversion modes based on the input 'mode'.\nStep 4. For each conversion mode, apply the appropriate formula to calculate the 'tempConversionResult'.\nStep 5. If an invalid mode is selected, set the 'error' flag to TRUE, set the 'status' to the error code for the wrong mode, and return from the function.\nStep 6. Assign the 'tempConversionResult' to the function's return value 'LGF_ConvertTemperature'.\nStep 7. Set the 'error' flag to FALSE and the 'status' to the no error code.\nStep 8. Set the ENO (Enable Output) to TRUE, as no error handling is needed for output.", "name": "LGF_ConvertTemperature"}