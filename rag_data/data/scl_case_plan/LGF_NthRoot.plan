{"variables": ["1. name: value, type: LReal, initial: None, role: The input value from which the root should be calculated.", "2. name: root, type: LReal, initial: None, role: The exponent of the root to be extracted from the input value.", "3. name: error, type: Bool, initial: None, role: Error flag indicating if an error occurred during the calculation.", "4. name: status, type: Word, initial: None, role: Status code providing additional information about the error if one occurred.", "5. name: ZERO, type: LReal, initial: 0.0, role: Constant representing zero value used for comparison.", "6. name: ONE, type: LReal, initial: 1.0, role: Constant representing one value used in the calculation.", "7. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: Constant representing the status code for no error.", "8. name: ERR_NEG_VAR, type: Word, initial: 16#8200, role: Constant representing the status code for a negative variable error."], "instructions": ["** // No explicit SCL instructions identified", "all operations are basic arithmetic and logical operations."], "planning": "# Step 1. Check if the input variable 'value' is negative.\n# Step 2. If 'value' is negative, set 'error' to true, set 'status' to 'ERR_NEG_VAR', and return zero as the result.\n# Step 3. If 'value' is not negative, calculate the n-th root using the exponentiation operator '**' with the expression 'value ** (ONE / root)'.\n# Step 4. Set 'error' to false indicating no error occurred.\n# Step 5. Set 'status' to 'STATUS_NO_ERROR' indicating successful execution.\n# Step 6. Set ENO to TRUE as a mechanism to indicate the function execution is complete (even though ENO is not used in this function).", "name": "LGF_NthRoot"}