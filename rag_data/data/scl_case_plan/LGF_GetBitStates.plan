{"variables": ["1. name: value, type: DWord, initial: None, role: The input value to be checked for changes and edges.", "2. name: hasChanged, type: Bool, initial: None, role: Indicates if the input value has changed compared to the previous cycle.", "3. name: hasRisingEdges, type: Bool, initial: None, role: Indicates if the input value has rising edges.", "4. name: risingBits, type: DWord, initial: None, role: Contains the bitstream with the rising edges.", "5. name: noOfRisingBits, type: USInt, initial: None, role: The number of rising edges in the input value.", "6. name: hasFallingEdges, type: Bool, initial: None, role: Indicates if the input value has falling edges.", "7. name: fallingBits, type: DWord, initial: None, role: Contains the bitstream with the falling edges.", "8. name: noOfFallingBits, type: USInt, initial: None, role: The number of falling edges in the input value.", "9. name: statPreviousValue, type: DWord, initial: None, role: Stores the value of the input from the previous cycle for comparison.", "10. name: tempRisingResult, type: DWord, initial: None, role: Temporary variable to store the result of rising edge detection.", "11. name: tempNoRisingBits, type: DWord, initial: None, role: Temporary variable to count the number of rising edges.", "12. name: tempFallingResult, type: DWord, initial: None, role: Temporary variable to store the result of falling edge detection.", "13. name: tempNoFallingBits, type: DWord, initial: None, role: Temporary variable to count the number of falling edges.", "14. name: ZERO_EDGES, type: DWord, initial: None, role: Constant used to compare if there are any edges."], "instructions": ["UDINT_TO_DWORD", "DWORD_TO_UDINT", "SHR", "AND", "NOT"], "planning": "Step1. The function initializes the temporary variables #tempRisingResult and #tempFallingResult by performing a bitwise AND with the negated previous value and the current value, respectively, to detect rising and falling edges.\n\nStep2. The previous value of the input #value is stored in #statPreviousValue for comparison in the next cycle.\n\nStep3. The temporary variable #tempNoRisingBits is assigned the value of #tempRisingResult to count the number of rising edges using a parallel bit-counting algorithm.\n\nStep4. The temporary variable #tempNoFallingBits is assigned the value of #tempFallingResult to count the number of falling edges using the same parallel bit-counting algorithm as for rising edges.\n\nStep5. The output variables #hasChanged, #hasRisingEdges, #risingBits, #noOfRisingBits, #hasFallingEdges, #fallingBits, and #noOfFallingBits are set based on the results of the edge detection and counting.\n\nStep6. The function sets the ENO output to FALSE, indicating that no error evaluation is necessary.", "name": "LGF_GetBitStates"}