{"variables": ["1. name: sortDirection, type: Bool, initial: None, role: Determines the sorting order, ascending (FALSE) or descending (TRUE).", "2. name: error, type: Bool, initial: None, role: Indicates whether an error occurred during the execution of the function block.", "3. name: status, type: Word, initial: None, role: Provides status information or error codes about the execution of the function block.", "4. name: array, type: Array[*] of UDInt, initial: None, role: The array to be sorted.", "5. name: tempArray, type: Array[1..#MAX_ARRAY_ELEMENTS] of UDInt, initial: None, role: A temporary array used for sorting operations.", "6. name: tempLowerLimit, type: DInt, initial: None, role: The lower index bound of the array to be sorted.", "7. name: tempUpperLimit, type: DInt, initial: None, role: The upper index bound of the array to be sorted.", "8. name: tempNoOfElements, type: DInt, initial: None, role: The number of elements in the array to be sorted.", "9. name: tempGap, type: DInt, initial: None, role: The initial gap size used in the Shell sort algorithm.", "10. name: tempLoopIndex, type: DInt, initial: None, role: A loop index used for iterating over the array elements.", "11. name: tempExchangeIndex, type: DInt, initial: None, role: The index used for exchanging elements during the sorting process.", "12. name: tempExchangeVariable, type: UDInt, initial: None, role: A temporary variable used to store an element during the exchange process.", "13. name: tempArrayOffset, type: DInt, initial: None, role: The offset used to adjust the array index for sorting.", "14. name: ARRAY_FIRST_DIMENSION, type: UInt, initial: 1, role: Represents the first dimension of the array.", "15. name: ARRAY_START_INDEX, type: UInt, initial: 1, role: The starting index of the array for indexing purposes.", "16. name: SINGLE_ARRAY_ELEMENT, type: DInt, initial: 1, role: Represents a single array element used in array size calculations.", "17. name: GAP_INIT, type: Int, initial: 1, role: The initial gap size for the Shell sort algorithm.", "18. name: GAP_THRESHOLD, type: Int, initial: 1, role: The threshold gap size to stop the Shell sort algorithm.", "19. name: GAP_RATIO, type: DInt, initial: 3, role: The ratio used to increment the gap size in the Shell sort algorithm.", "20. name: INCREMENT, type: Int, initial: 1, role: A constant used for incrementing the gap size.", "21. name: ELEMENTS_COUNT_CORRECTION, type: DInt, initial: 1, role: Corrects the element count calculation for arrays.", "22. name: MAX_ARRAY_ELEMENTS, type: Int, initial: 1000, role: The maximum number of elements the array can hold.", "23. name: STATUS_NO_ERROR, type: Word, initial: 16#0000, role: The status code for no error.", "24. name: ERR_NO_ARRAY, type: Word, initial: 16#8200, role: The error code for an empty array input.", "25. name: ERR_TOO_MANY_ELEMENTS, type: Word, initial: 16#8201, role: The error code for an array with too many elements."], "instructions": ["LOWER_BOUND", "UPPER_BOUND", "REPEAT", "UNTIL", "FOR", "IF", "WHILE", "EXIT"], "planning": "Step1. Determine the lower and upper bounds of the array to be sorted.\nStep2. Calculate the number of elements in the array and adjust the array index.\nStep3. Check if the array exceeds the maximum number of elements or is empty, and set the appropriate error codes if necessary.\nStep4. Copy the elements from the input array to a temporary array for sorting.\nStep5. Implement the Shell sort algorithm using nested loops to sort the array in either ascending or descending order based on the sortDirection input.\nStep6. After sorting, copy the sorted elements back to the input array.\nStep7. Set the error and status outputs to indicate a successful operation.", "name": "LGF_ShellSort_UDInt"}