{"variables": ["1. name: trigger, type: Bool, initial: None, role: Input used to toggle output signal on rising edge.", "2. name: set, type: Bool, initial: None, role: Input used to set output signal on rising edge.", "3. name: reset, type: Bool, initial: None, role: Input used to reset output signal on rising edge.", "4. name: out, type: Bool, initial: None, role: Output signal that reflects the state of the toggle flip-flop.", "5. name: statTriggerOld, type: Bool, initial: false, role: Stores the previous state of the trigger input for edge detection.", "6. name: statSetOld, type: Bool, initial: false, role: Stores the previous state of the set input for edge detection.", "7. name: statResetOld, type: Bool, initial: false, role: Stores the previous state of the reset input for edge detection.", "8. name: statOut, type: Bool, initial: false, role: Stores the current state of the output signal."], "instructions": ["// There are no explicit SCL instructions (function calls) used in the case code provided."], "planning": "# Step 1. Initialize internal variables statTriggerOld, statSetOld, statResetOld, and statOut to false.\n# Step 2. Check for a rising edge on the trigger input. If detected, toggle the statOut variable.\n# Step 3. Check for a rising edge on the set input. If detected, set the statOut variable to true.\n# Step 4. Check for a rising edge on the reset input. If detected, set the statOut variable to false.\n# Step 5. Assign the value of statOut to the output variable out.\n# Step 6. Set the ENO (Enable Output) to true as there is no error handling required.", "name": "LGF_PulseRelay"}