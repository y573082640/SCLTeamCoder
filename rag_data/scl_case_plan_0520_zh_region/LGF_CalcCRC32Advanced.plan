{"variables": [], "instructions": [], "planning": "\n- 概述\n这段代码是一个名为“LGF_CalcCRC32Advanced”的函数，它实现了CRC-32算法的的高级版本，支持输入/输出的反射和最终异或组合。\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：初始值、掩码、最终异或值、反射输入、反射结果、元素数量\n - 输出变量：错误、状态\n - 输入/输出变量：数组（字节类型）\n - 临时变量：临时输入、临时CRC、临时反CRC、临时下限、临时上限、临时数组索引、临时CRC索引\n - 常量：移位一位、移位三字节、数组第一维、CRC循环下限、CRC循环上限、状态无错误、错误元素数量\n- \n- 主逻辑部分\n  -- REGION Block info header\n     此区域包含函数的元信息，例如标题、功能描述、库/系列、作者、测试环境、工程环境、限制和要求。\n  -- REGION DESCRIPTION\n     此区域目前为空，但可以包含函数的简单描述。\n  -- REGION Initialization and input data processing\n     此区域初始化算法的初始值，并处理输入数据。首先，将临时CRC变量设置为初始值。然后，计算输入数组的尺寸，并检查元素数量参数是否大于零。如果是，则检查元素数量是否适合数组大小。如果不适合，则设置错误状态并返回。否则，设置数组的上限。\n  -- REGION CRC calculation\n     此区域执行CRC计算。首先，遍历数组的每个元素。如果反射输入为真，则反转输入字节的位序。然后，执行除法运算，使用异或函数处理数组中相应的DWord（将字节移到32位CRC的最高有效位）。接着，遍历CRC的每个位，检查最高位是否设置。如果是，则将CRC左移一位，并使用异或函数执行除法运算。否则，只将CRC左移一位。\n  -- REGION Outputs assignment\n     此区域将结果赋值给输出。如果反射结果为真，则反转CRC校验和的位序。然后，将CRC与最终异或值进行异或运算，并将结果存储在函数的返回值中。最后，设置状态为“无错误”，错误为假，ENO为真。\n\n\n", "name": "LGF_CalcCRC32Advanced"}