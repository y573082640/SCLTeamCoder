{"variables": [], "instructions": [], "planning": "\n- 概述\n这段代码是一个使用SCL编写的功能块，名为“LGF_IsValueInToleranceByTime”，用于检查给定的值是否在设定点的指定公差范围内。该功能块具有可配置的定时器，用于隐藏设定点变化、下限和上限违规。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：值、设定点、下限、上限、重置、配置\n - 输出变量：超出上限、低于下限、范围内、设定点变化、错误、状态\n - 内部变量：上限监控实例、下限监控实例、变化监控实例、上一个设定点、上一个重置、设定点变化、曾经在公差内\n - 临时变量：值超出上限、值低于下限\n - 常量：1、100%、无错误状态、范围限制值计算错误、设定点超出上限错误、设定点低于下限错误\n\n- \n- 主逻辑部分\n-- REGION Block info header\n   此区域包含功能块的元信息，简单描述。\n-- REGION DESCRIPTION\n   此区域目前为空，但可以包含功能块的简单描述。\n-- REGION Initialization and limits check\n   此区域初始化变量并检查限制。首先，根据配置计算限制。如果配置为绝对值，则直接比较值和上下限。如果配置为百分比，则计算设定点的百分比，并比较值和计算出的限制。然后，检测设定点是否变化，并在必要时重置“曾经在公差内”标志。接下来，检查是否禁用限制或是否重置，并在必要时重置标志。最后，如果值在范围内且之前未在公差内，则设置“曾经在公差内”标志。\n-- REGION Limits evaluation\n   此区域评估限制。首先，使用TON（定时器）功能块来监控上限是否被超过。如果值超出上限并且之前在公差内或变化监控定时器已过期，则启动上限监控定时器。类似地，使用TON功能块来监控下限是否被低于。如果值低于下限并且之前在公差内或变化监控定时器已过期，则启动下限监控定时器。最后，使用TON功能块来监控设定点是否变化。如果设定点变化并且之前未在公差内，则启动变化监控定时器。\n-- REGION Writing to outputs\n   此区域将内部变量的值写入输出变量。首先，检查值是否在范围内，并相应地设置“范围内”输出。然后，根据定时器的状态设置“超出上限”和“低于下限”输出。接下来，根据设定点变化和“曾经在公差内”标志设置“设定点变化”输出。最后，设置“错误”和“状态”输出，并启用ENO（没有错误）机制。\n\n\n", "name": "LGF_IsValueInToleranceByTime"}