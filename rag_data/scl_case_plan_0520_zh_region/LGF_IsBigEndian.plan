{"variables": [], "instructions": [], "planning": "\n- 概述\n这段代码是一个名为“LGF_IsBigEndian”的SCL函数，用于检测执行系统的字节序。字节序是指计算机在存储和传输多字节数据时字节排列的顺序。函数返回一个布尔值，表示系统是否为大端字节序。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 临时变量：tempSixteenBits，用于存储位模式。\n - 常量：BIT_PATTERN_ONE，一个Word类型的常量，其值为16#0001，表示最低位为1；MOVE_BIT_POS，一个UDInt类型的常量，其值为15，表示移动的位数。\n\n- 主逻辑部分\n-- REGION BLOCK INFO HEADER\n   此区域包含函数的元信息，如标题、功能、库、作者、测试环境等。\n-- REGION Info\n   此区域目前为空，但可以包含函数的附加信息。\n-- REGION Process\n   此区域包含检测字节序的逻辑。首先，使用SHL函数将BIT_PATTERN_ONE左移MOVE_BIT_POS位，将最高位设置为1，其余位设置为0。然后，检查左移后的结果的最低位是否为1，如果是，则表示系统为大端字节序，函数返回真；否则，返回假。ENO（Enable Output）被设置为真，表示函数执行成功。\n\n\n", "name": "LGF_IsBigEndian"}