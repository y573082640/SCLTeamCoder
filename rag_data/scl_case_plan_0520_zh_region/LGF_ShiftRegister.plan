{"variables": [], "instructions": [], "planning": "\n- 概述\n这段代码定义了一个名为“LGF_ShiftRegister”的功能块，它实现了一个移位寄存器的功能，可以用于任何数据类型（使用`variant`）。它允许将寄存器数组向左（索引`array[n]:=array[n+1]`）或向右（索引`array[n]:=array[n-1]`）移动。这个功能块可以作为一个环形缓冲区使用，适用于需要材料跟踪的场景，例如旋转分度转盘。它不使用ENO（Enable Next Output）机制，而是使用错误和状态输出进行错误处理。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：向左移位、向右移位、移位范围、清除、填充、初始项\n - 输出变量：错误、状态、子函数状态\n - 输入/输出变量：缓冲寄存器\n - 内部变量：状态边缘存储\n - 临时变量：临时边缘、临时内部错误、临时缓冲区大小、临时计数器\n - 常量：无内部错误、索引开始、一个元素、缓冲区大小校正、状态无错误、状态无当前作业、错误无数组、错误清除无初始项、错误填充无初始项、错误初始项类型错误、错误多个命令、错误移位范围、错误清除缓冲区、错误向左移位缓冲区、错误向左移位填充、错误向右移位缓冲区、错误向右移位填充\n\n- \n-- REGION Block execution control\n   此区域收集边缘信号，并存储用于边缘检测的值。如果没有任何触发输入处于活动状态，则设置错误输出为假，状态输出为“无当前作业”，并返回。如果同时激活了多个命令，则设置错误输出为真，状态输出为“多个命令”，并返回。\n\n-- REGION Validation of inputs\n   此区域验证输入的有效性。首先，检查缓冲寄存器是否为数组。如果不是数组，则设置错误输出为真，状态输出为“无数组”，并返回。然后，检查移位范围是否在有效范围内。如果移位范围大于或等于缓冲区大小，则设置错误输出为真，状态输出为“移位范围内”，并返回。最后，检查清除缓冲区时是否有初始项，以及填充时是否有初始项。如果数据类型不匹配，则设置错误输出为真，状态输出为“清除无初始项”或“填充无初始项”，并返回。\n\n-- REGION Clear Buffer\n   如果检测到清除缓冲区的边缘信号，则此区域将缓冲区初始化为初始值。通过循环将所有元素覆盖为初始项元素。如果发生局部错误，则设置错误输出为真，状态输出为“清除缓冲区”，并返回。\n\n-- REGION Shift register algorithm\n   此区域包含移位寄存器算法的实现。首先，检查是否检测到向左移位的边缘信号。如果是，则将整个数组元素从N向左移动到N-1。如果发生局部错误，则设置错误输出为真，状态输出为“向左移位缓冲区”，并返回。然后，检查是否激活了填充。如果是，则通过循环将所有元素覆盖为初始项元素。如果发生局部错误，则设置错误输出为真，状态输出为“向左移位填充”，并返回。同样的逻辑适用于向右移位。\n\n-- REGION Writing to outputs\n   此区域将输出变量设置为最终的值。错误输出设置为假，状态输出设置为“无错误”，子函数状态输出设置为“无错误”。由于不使用ENO机制，因此将ENO输出设置为真。\n\n\n", "name": "LGF_ShiftRegister"}