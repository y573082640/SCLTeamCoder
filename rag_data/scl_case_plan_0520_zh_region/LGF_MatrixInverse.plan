{"variables": [], "instructions": [], "planning": "\n- 概述\n这段代码是一个名为“LGF_MatrixInverse”的函数，它使用SCL编写，用于计算一个矩阵的逆矩阵。\n- 变量定义\n代码中定义了以下几类变量：\n  - 输出变量：错误、状态\n  - 输入/输出变量：矩阵、矩阵结果\n  - 临时变量：用于存储矩阵的边界、计数器、临时矩阵元素等\n  - 常量：精度、负数、零、一、行、列、无错误状态、非方形矩阵错误、算法不可能错误、矩阵1低边界行与结果矩阵低边界行错误、矩阵1低边界列与结果矩阵低边界列错误、矩阵1高边界行与结果矩阵高边界行错误、矩阵1高边界列与结果矩阵高边界列错误\n- \n- 主逻辑部分\n  -- REGION Block info header\n     此区域包含函数的元信息，如标题、功能、库、作者、测试环境等。\n  -- REGION Determine the size of the matrices\n     此区域确定输入矩阵和结果矩阵的大小。它使用LOWER_BOUND和UPPER_BOUND函数来获取矩阵的上下界。这些值存储在临时变量中，用于后续计算。\n  -- REGION Count the columns and rows of input matrix\n     此区域计算输入矩阵的行数和列数。它检查矩阵的上下界是否为零，并相应地计算行数和列数。行数存储在#tempRows中，列数存储在#tempColumns中。\n  -- REGION Error validation\n     此区域验证输入矩阵是否为方形矩阵，并且结果矩阵的大小是否与输入矩阵相同。首先，它检查行数和列数是否相等，如果不相等，则设置错误标志和状态为非方形矩阵错误，并返回。然后，它检查输入矩阵和结果矩阵的上下界是否相等，如果有任何不相等，则设置相应的错误标志和状态，并返回。\n  -- REGION Calculation of the inversed matrix\n     此区域计算输入矩阵的逆矩阵。首先，它将结果矩阵的对角线元素初始化为零。然后，它通过将输入矩阵的每个元素取反来创建输出矩阵。这是通过两个嵌套的循环来完成的，遍历输入矩阵的每个元素，并将它们取反后存储在结果矩阵中。\n     接下来，使用高斯-约当消元法来计算逆矩阵。这个过程包括以下步骤：\n     1. 外循环遍历矩阵的每一列，将该列作为主列。\n     2. 检查主列的对角线元素是否为零或接近零，如果是，则算法无法继续，设置错误标志和状态为算法不可能错误，并返回。\n     3. 计算主元素，即对角线元素的倒数，并将其存储回对角线位置。\n     4. 更新主列中的其他元素，使对角线元素以外的其他元素乘以主元素。\n     5. 转换计算，更新主行和主列以外的其他元素。这是通过两个嵌套的循环来完成的，遍历主行和主列以外的每个元素，并根据需要更新它们。\n     6. 更新主行中的其他元素，使对角线元素以外的其他元素乘以主元素。\n     在完成所有列的处理后，设置错误标志为假，状态为无错误，并返回。此时，结果矩阵包含输入矩阵的逆矩阵。\n\n\n", "name": "LGF_MatrixInverse"}