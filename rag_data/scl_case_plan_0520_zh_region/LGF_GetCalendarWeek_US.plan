{"variables": [], "instructions": [], "planning": "\n- 概述\n该函数名为“LGF_GetCalendarWeek_US”，用于计算美国和其他国家的日历周数。它基于一周从周日开始，包含1月1日的周总是第1周，一年有52或53周的规则。\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：日期\n - 输出变量：日历日、错误、状态\n - 临时变量：临时日期、当年1月1日是星期几、下一年1月1日是星期几、当年12月31日是星期几、前一年1月1日是星期几、前一年12月31日是星期几、临时天数校正、临时周数、临时天数、当年是否是闰年、前一年是否是闰年、当年年份、前一年年份、下一年年份、当年是否有53周、前一年是否有53周\n - 常量：星期日、星期一、星期二、星期三、星期四、星期五、星期六、第一天、最后一天、一月、十二月、一年、一天、两天、三天、四天、五天、七天、一周、第一周、第52周、第53周、第54周、闰年检查4、闰年检查100、闰年检查400、状态无错误、错误日期限制\n- \n- 主逻辑部分\n  -- REGION BLOCK INFO HEADER\n     此区域包含函数的元信息，如标题、功能描述、库/系列、作者、测试版本、工程环境、限制和要求。这些信息对于理解函数的用途和背景非常重要。\n  -- REGION DESCRIPTION\n     此区域目前为空，但可以包含函数的简单描述。这部分可以提供一些额外的信息，例如函数的输入和输出参数、函数的基本逻辑等。\n  -- REGION INITIALISATION\n     此区域初始化一些临时变量，将临时天数和临时周数设置为0。这是为了确保在计算周数之前，这些变量不会被错误地使用。\n  -- REGION COUNT DAYS\n     此区域计算自1月1日起至今年的天数，包括输入的日期。它调用另一个函数“LGF_GetCalendarDay”来获取天数，并检查是否有错误发生。如果有错误，则函数返回。这部分是计算周数的基础，因为周数是基于天数来计算的。\n  -- REGION COUNT WEEKS\n     此区域计算当前年份、前一年和下一年的年份，并检查当年和前一年是否是闰年。闰年的存在会影响2月份的天数，从而影响天数的计算。然后，它计算当年和下一年1月1日是星期几，以及当年和前一年12月31日是星期几。这些信息用于确定新的一周从哪一天开始，以及一年中是否有53周。接着，根据1月1日是星期几，对临时天数进行校正，并计算周数。之后，检查当年是否有53周，并根据这个检查对周数进行校正。这部分是函数的核心逻辑，它实现了计算周数的主要算法。\n  -- REGION OUTPUTS\n     此区域将临时天数写入日历日输出，将错误和状态设置为相应的值，并将临时周数写入函数的输出。最后，将ENO设置为真，表示没有错误发生。这是函数的输出部分，它将计算结果传递给调用者。\n\n\n", "name": "LGF_GetCalendarWeek_US"}