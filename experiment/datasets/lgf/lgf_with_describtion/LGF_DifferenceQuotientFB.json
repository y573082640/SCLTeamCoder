{
    "title": "Numeric Differentiation Function Block",
    "name": "LGF_DifferenceQuotientFB",
    "description": "## Short description ##\n\nThis function numerically differentiates a signal sampled equidistantly in time. For example, the \nvelocity can be calculated from a measured locus curve, or the acceleration can be calculated \nfrom the measured velocity. In order to minimize the effects of a scattering measurement signal, \nthis algorithm uses a compensating polynomial.\nThe function block calculates the differentiated values cyclically.\nThe function block reads-in a value with each positive edge on the insert been read in, the \nblock calculates a differentiated value and outputs it.\n\n## Functional description ##\n\nTo calculate the difference quotient of a scattering signal, a third-degree compensation \npolynomial is first placed through the measured values. This polynomial is then differentiated. \nWith this method, even a distorted input signal can be sensibly differentiated.\nThe difference quotient is calculated with the following formula:\n\nThe function (FC) can calculate ùëÅ ‚àí 4 differentiated and smoothed measured values from N \nmeasured values. The output array would be assigned with 0 in the index (0,1,N-1,N). However, \nthe following formalisms can be used to calculate substitute values:",
    "type": "FUNCTION_BLOCK",
    "input": [
        {
            "name": "enable",
            "type": "Bool",
            "description": "Activates the block."
        },
        {
            "name": "insert",
            "type": "Bool",
            "description": "Accepts the value at the input `value` at positive edge and outputs a `derivatedValue` if five values have been read in."
        },
        {
            "name": "value",
            "type": "LReal",
            "description": "Value that must be included in the differentiation."
        },
        {
            "name": "deltaT",
            "type": "LReal",
            "description": "Equidistant distance between two measured values. (e.g. 1s)"
        }
    ],
    "output": [
        {
            "name": "derivatedValue",
            "type": "LReal",
            "description": "The differentiated value."
        },
        {
            "name": "error",
            "type": "Bool",
            "description": "FALSE: No error, TRUE: An error occurred during the execution of the FB"
        },
        {
            "name": "status",
            "type": "Word",
            "description": "Status and error identification of the FB"
        }
    ],
    "in/out": [],
    "return_value": [],
    "status_codes": {
        "16#7000": "STATUS_NO_CALL: The block waits for activation through the parameter `enable`.",
        "16#7001": "STATUS_FIRST_CALL: First call of FB after enabling",
        "16#7002": "STATUS_SUBSEQUENT_CALL: Processing is active. Subsequent call of FB.",
        "16#7010": "STATUS_NOT_ENOUGH_VALUES: The block requires five (5) values to calculate a differentiated value.",
        "16#8200": "ERR_DELTA_T: Delta time `deltaT` must not be zero."
    },
    "user_defined_types": []
}