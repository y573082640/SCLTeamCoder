{"title": "Hyperbolic Arctangent Function (ATANH)", "description": "This function calculates the hyperbolic arctangent of a given real number input, X, using the formula ATANH(X) = 0.5 * LN((1 + X) / (1 - X)). The function returns a real number corresponding to the hyperbolic arctangent of the input value.", "type": "FUNCTION", "name": "ATANH", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the hyperbolic arctangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The hyperbolic arctangent of the input value X.", "fields": []}}
{"title": "Convert DATE and TOD to Structured Date Time (SDT)", "description": "This function converts a DATE and a Time-of-Day (TOD) into a structured date time format (SDT). It extracts the year, month, day, weekday, milliseconds, seconds, minutes, and hours from the given DATE and TOD inputs and packs them into the SDT structure.", "type": "FUNCTION", "name": "DT2_TO_SDT", "input": [{"name": "DI", "type": "DATE", "description": "Input variable of type DATE representing the date to convert."}, {"name": "TI", "type": "TOD", "description": "Input variable of type TOD representing the time of day to convert."}], "output": [{"name": "SDT", "type": "SDT", "description": "Output structure containing the converted date and time components.", "fields": [{"name": "YEAR", "type": "INT", "description": "The year extracted from the DATE."}, {"name": "MONTH", "type": "INT", "description": "The month extracted from the DATE."}, {"name": "DAY", "type": "INT", "description": "The day of the month extracted from the DATE."}, {"name": "WEEKDAY", "type": "INT", "description": "The weekday corresponding to the DATE (0 = Sunday, 1 = Monday, etc.)."}, {"name": "MS", "type": "INT", "description": "The milliseconds component extracted from the TOD."}, {"name": "SECOND", "type": "INT", "description": "The seconds component extracted from the TOD."}, {"name": "MINUTE", "type": "INT", "description": "The minutes component extracted from the TOD."}, {"name": "HOUR", "type": "INT", "description": "The hours component extracted from the TOD."}]}], "in/out": [], "return_value": {"type": "SDT", "description": "Returns the structured date time containing all the extracted date and time information.", "fields": [{"name": "YEAR", "type": "INT", "description": "The year of the structured date time."}, {"name": "MONTH", "type": "INT", "description": "The month of the structured date time."}, {"name": "DAY", "type": "INT", "description": "The day of the structured date time."}, {"name": "WEEKDAY", "type": "INT", "description": "The weekday of the structured date time."}, {"name": "MS", "type": "INT", "description": "The milliseconds of the structured date time."}, {"name": "SECOND", "type": "INT", "description": "The seconds of the structured date time."}, {"name": "MINUTE", "type": "INT", "description": "The minutes of the structured date time."}, {"name": "HOUR", "type": "INT", "description": "The hours of the structured date time."}]}}
{"title": "Convert Day to Time", "description": "This function converts a given number of days (as a real number) into a time representation, specifically returning the result in TIME format. The conversion is performed by multiplying the input days by the number of milliseconds in a day (86400000) and then converting the resultant value to TIME type.", "type": "FUNCTION", "name": "DAY_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input value representing a duration in days that needs to be converted into time."}], "output": [{"name": "TIME", "type": "TIME", "description": "The output value representing the equivalent time format after conversion from the input days."}], "in/out": [], "return_value": {"type": "TIME", "description": "The TIME value that represents the input duration in days converted to time.", "fields": []}}
{"title": "Calculate Day of Year", "description": "This function calculates the day of the year from a given date. It converts the input date into an unsigned integer format, computes the day of the year by performing division and modulus operations, and adjusts the value based on specific criteria.", "type": "FUNCTION", "name": "DAY_OF_YEAR", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date from which the day of the year needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The calculated day of the year as an integer value."}}
{"title": "Byte to Gray Code Conversion", "description": "This function converts an 8-bit byte input into its corresponding Gray code representation. The conversion is performed using the XOR operation between the input byte and the right-shifted version of itself.", "type": "FUNCTION", "name": "BYTE_TO_GRAY", "input": [{"name": "IN", "type": "BYTE", "description": "An 8-bit byte that needs to be converted to Gray code."}], "output": [{"name": "BYTE_TO_GRAY", "type": "BYTE", "description": "The resulting Gray code representation of the input byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The Gray code equivalent of the input byte.", "fields": []}}
{"title": "Delete Characters from String", "description": "This function takes an input string and removes specific characters defined in another string. The process continues until all occurrences of the specified characters are removed from the input string.", "type": "FUNCTION", "name": "DEL_CHARS", "input": [{"name": "IN", "type": "STRING", "description": "The input string from which characters will be deleted."}, {"name": "CX", "type": "STRING[80]", "description": "A string containing the characters to be deleted from the input string."}], "output": [{"name": "DEL_CHARS", "type": "STRING", "description": "The modified string after the specified characters have been deleted."}], "in/out": [], "return_value": {"type": "string", "description": "The resulting string after all specified characters have been removed.", "fields": []}}
{"title": "Click Counter Function Block", "description": "This function block is designed to count the number of falling edges of the input signal 'IN' according to a specified time interval 'TC'. It triggers the output 'Q' to be active for one cycle once the count reaches the value 'N'. The block must handle the rising edge and falling edge of the input correctly, maintaining the count across cycles.", "type": "FUNCTION_BLOCK", "name": "CLICK_CNT", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input signal that indicates when an event occurs."}, {"name": "N", "type": "INT", "description": "An integer that specifies the number of falling edges that should be counted before setting the output Q."}, {"name": "TC", "type": "TIME", "description": "A time parameter that defines the time interval for which the input signal is observed."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output that is activated for one cycle when the defined count of falling edges is reached."}], "in/out": [], "return_value": {}}
{"title": "Floor Function Conversion", "description": "This function takes a real number as input and converts it to a DINT (double integer) by flooring the real number. If the conversion leads to a higher value than the input, it decrements the resultant DINT by 1 to ensure it represents the largest integer less than or equal to the provided real number.", "type": "FUNCTION", "name": "FLOOR2", "input": [{"name": "X", "type": "REAL", "description": "A real number which will be converted to a DINT by flooring."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The floored integer value derived from the input real number.", "fields": []}}
{"title": "Coth Function Calculation", "description": "This function computes the hyperbolic cotangent of a given real number. It returns specific values based on the input range: for inputs greater than 20.0, it returns 1.0; for inputs less than -20.0, it returns -1.0; otherwise, it calculates the cotangent based on the formula 1.0 + 2.0 / (EXP(X * 2.0) - 1.0).", "type": "FUNCTION", "name": "COTH", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the hyperbolic cotangent will be calculated."}], "output": [{"name": "COTH", "type": "REAL", "description": "The calculated hyperbolic cotangent value based on the input X."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the computed hyperbolic cotangent value."}}
{"title": "Check if a Byte is a Valid Hex Character", "description": "This function takes a byte as input and checks if it corresponds to a valid hexadecimal character. Valid hexadecimal characters are 0-9, A-F, and a-f. The function should return TRUE if the input byte represents a valid hex character, and FALSE otherwise.", "type": "FUNCTION", "name": "ISC_HEX", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be checked if it is a valid hexadecimal character."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input byte is a valid hexadecimal character, FALSE otherwise."}}
{"title": "Calculate Day of Date", "description": "This function calculates the day of the date from a provided date input. The calculation is performed by converting the date to a DWORD format and then dividing by the number of seconds in a day (86400). The output is returned as a DINT, which allows for a larger range of date values.", "type": "FUNCTION", "name": "DAY_OF_DATE", "input": [{"name": "idate", "type": "DATE", "description": "The date for which the day of the date is to be calculated."}], "output": [{"name": "DAY_OF_DATE", "type": "DINT", "description": "The calculated day of the date as a DINT value, which accommodates a range of 49710 days."}], "in/out": [], "return_value": {"type": "DINT", "description": "The computed day of the date returned as a DINT value.", "fields": []}}
{"title": "FF_D2E Function Block", "description": "This function block implements a flip-flop mechanism that responds to input signals and controls its output based on clock and reset signals. When the reset signal is activated, the outputs are set to false. On the rising edge of the clock signal, the outputs are assigned the values of the input signals D0 and D1.", "type": "FUNCTION_BLOCK", "name": "FF_D2E", "input": [{"name": "D0", "type": "BOOL", "description": "Boolean input signal to determine the state of output Q0."}, {"name": "D1", "type": "BOOL", "description": "Boolean input signal to determine the state of output Q1."}, {"name": "CLK", "type": "BOOL", "description": "Clock input signal that triggers the state change on the flip-flop."}, {"name": "RST", "type": "BOOL", "description": "Reset input signal that sets the output values to false when activated."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal representing the state determined by input D0."}, {"name": "Q1", "type": "BOOL", "description": "Output signal representing the state determined by input D1."}], "in/out": [], "return_value": null}
{"title": "Delay Function Block", "description": "This function block implements a delay mechanism that holds a buffer of input values. It takes a real input value and delays its output based on a specified number of cycles. The buffer is reset under certain conditions.", "type": "FUNCTION_BLOCK", "name": "DELAY", "input": [{"name": "IN", "type": "REAL", "description": "The real number input value to be processed by the delay block."}, {"name": "N", "type": "INT", "description": "The number of cycles to delay the input. This value is limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the block. If true, the buffer will be reset."}], "output": [{"name": "OUT", "type": "REAL", "description": "The output value from the delay block, which is the delayed version of the input."}], "in/out": [], "return_value": null}
{"title": "Increment/Decrement Counter Function Block", "description": "This function block implements a counter that can be incremented or decremented based on the input signals. It uses two channels (CHa, CHb) to determine the counting direction and an optional reset signal (RST) to set the counter back to zero.", "type": "FUNCTION_BLOCK", "name": "INC_DEC", "input": [{"name": "CHa", "type": "BOOL", "description": "Input signal for channel A. Determines if an increment or decrement pulse is generated."}, {"name": "CHb", "type": "BOOL", "description": "Input signal for channel B. Determines if an increment or decrement pulse is generated."}, {"name": "RST", "type": "BOOL", "description": "Reset signal. When active, resets the counter to zero."}], "output": [{"name": "dir", "type": "BOOL", "description": "Output indicating the direction of counting. TRUE for increment, FALSE for decrement."}, {"name": "cnt", "type": "INT", "description": "Output showing the current value of the counter."}], "in/out": [], "return_value": null}
{"title": "Set R2 Parameters", "description": "This function is responsible for setting the parameters of the R2 entity. It takes a single real number input and initializes the first parameter RX to this value while setting the second parameter R1 to a constant value of 0.0.", "type": "FUNCTION", "name": "R2_SET", "input": [{"name": "X", "type": "REAL", "description": "Input parameter representing a real number value to set RX."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "Returns the modified R2 entity which includes RX set to the input value and R1 set to 0.0."}}
{"title": "Control Character String Checker", "description": "This function checks if a given string consists solely of control characters. It returns TRUE if the string is valid (greater than zero in length), and FALSE if any character in the string is not a control character.", "type": "FUNCTION", "name": "IS_CTRL", "input": [{"name": "STR", "type": "STRING", "description": "The input string to be checked for control characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The function returns TRUE if the string consists only of control characters, otherwise FALSE."}}
{"title": "Complementary Error Function Calculation", "description": "This function calculates the complementary error function (ERFC) based on the input value X. The function utilizes the standard error function (ERF) and returns the result as a real number.", "type": "FUNCTION", "name": "ERFC", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the complementary error function is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The value of the complementary error function computed from the input X."}}
{"title": "Filter Block", "description": "The FILTER_W function block is designed to implement a filtering algorithm that processes an input value (X) over a specified time interval (T). It initializes on the first call, maintains state across calls, and adjusts the output (Y) based on the input and time elapsed.", "type": "FUNCTION_BLOCK", "name": "FILTER_W", "input": [{"name": "X", "type": "WORD", "description": "Input value to be filtered."}, {"name": "T", "type": "TIME", "description": "Time interval for filtering."}], "output": [{"name": "Y", "type": "WORD", "description": "Filtered output value."}], "in/out": [], "return_value": null}
{"title": "Convert Local Time to UTC", "description": "This function converts a given local time to Coordinated Universal Time (UTC) based on the provided time zone offset and considers Daylight Saving Time (DST) if applicable.", "type": "FUNCTION", "name": "LTIME_TO_UTC", "input": [{"name": "LOCAL_TIME", "type": "DT", "description": "The local time to be converted to UTC."}, {"name": "DST", "type": "BOOL", "description": "A boolean flag indicating if Daylight Saving Time should be considered."}, {"name": "TIME_ZONE_OFFSET", "type": "INT", "description": "The offset of the local time from UTC in minutes."}], "output": [], "in/out": [], "return_value": {"type": "DT", "description": "The converted UTC time.", "fields": []}}
{"title": "Ramp Function Block", "description": "This function block implements a ramping behavior that adjusts an output value towards a target input value based on specified ramp-up and ramp-down rates, while tracking the busy state and direction of ramping.", "type": "FUNCTION_BLOCK", "name": "FT_RMP", "input": [{"name": "Rmp", "type": "BOOL", "description": "Control flag to enable or disable ramping behavior."}, {"name": "in", "type": "REAL", "description": "Target input value to which the output will ramp."}, {"name": "KR", "type": "REAL", "description": "Ramp-up rate; determines how quickly the output will increase towards the input value."}, {"name": "KF", "type": "REAL", "description": "Ramp-down rate; determines how quickly the output will decrease towards the input value."}], "output": [{"name": "out", "type": "REAL", "description": "Current output value being ramped, based on the input value."}, {"name": "busy", "type": "BOOL", "description": "Indicates whether the output is currently in the process of ramping."}, {"name": "UD", "type": "BOOL", "description": "Direction flag indicating whether the output is ramping up (TRUE) or down (FALSE)."}], "in/out": [], "return_value": null}
{"title": "String Cleaning Function", "description": "This function cleans a given input string by removing characters that are not found in a specified allowed character set. The function scans through each character of the input string and constructs a new string containing only the valid characters.", "type": "FUNCTION", "name": "CLEAN", "input": [{"name": "IN", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be cleaned."}, {"name": "CX", "type": "STRING[80]", "description": "A string containing the allowed characters. Only characters found in this string will remain in the output."}], "output": [{"name": "CLEAN", "type": "STRING", "description": "The cleaned string, containing only allowed characters."}], "in/out": [], "return_value": {"type": "string", "description": "The final cleaned version of the input string.", "fields": []}}
{"title": "Complex Division Function", "description": "This function performs division of two complex numbers X and Y. The result is a complex number returned by the function, where each component of the complex number is calculated based on the real and imaginary parts of the input complex numbers.", "type": "FUNCTION", "name": "CDIV", "input": [{"name": "X", "type": "complex", "description": "The first complex number to be divided, represented by its real and imaginary components."}, {"name": "Y", "type": "complex", "description": "The second complex number, which is the divisor in the division operation."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The result of the division of complex number X by complex number Y.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the result of the complex division."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the result of the complex division."}]}}
{"title": "Scheduler Function Block", "description": "This function block acts as a scheduler that utilizes input events and counts to control output signals. The block evaluates certain conditions based on inputs and current cycle count to determine the state of the outputs.", "type": "FUNCTION_BLOCK", "name": "SCHEDULER_2", "input": [{"name": "E0", "type": "BOOL", "description": "Event input signal 0 that affects output Q0."}, {"name": "E1", "type": "BOOL", "description": "Event input signal 1 that affects output Q1."}, {"name": "E2", "type": "BOOL", "description": "Event input signal 2 that affects output Q2."}, {"name": "E3", "type": "BOOL", "description": "Event input signal 3 that affects output Q3."}, {"name": "C0", "type": "UINT", "description": "Cycle count threshold for input E0."}, {"name": "C1", "type": "UINT", "description": "Cycle count threshold for input E1."}, {"name": "C2", "type": "UINT", "description": "Cycle count threshold for input E2."}, {"name": "C3", "type": "UINT", "description": "Cycle count threshold for input E3."}, {"name": "O0", "type": "UINT", "description": "Offset value for input signal E0."}, {"name": "O1", "type": "UINT", "description": "Offset value for input signal E1."}, {"name": "O2", "type": "UINT", "description": "Offset value for input signal E2."}, {"name": "O3", "type": "UINT", "description": "Offset value for input signal E3."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal 0 indicating if the condition for E0 is met."}, {"name": "Q1", "type": "BOOL", "description": "Output signal 1 indicating if the condition for E1 is met."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2 indicating if the condition for E2 is met."}, {"name": "Q3", "type": "BOOL", "description": "Output signal 3 indicating if the condition for E3 is met."}], "in/out": [], "return_value": null}
{"title": "Check Real Number", "description": "This function checks the IEEE754 representation of a real number and returns a corresponding byte value indicating the status of the number: normalized, denormalized, positive infinity, negative infinity, or NaN.", "type": "FUNCTION", "name": "CHK_REAL", "input": [{"name": "X", "type": "REAL", "description": "The real number to be checked."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns a byte indicating the status of the real number according to IEEE754 standards.", "fields": []}}
{"title": "Complex Exponential Function", "description": "This function calculates the complex exponential of a given complex number. The exponential of a complex number is computed using its real and imaginary parts, where the result is a complex number with real and imaginary components derived from the exponential and trigonometric functions.", "type": "FUNCTION", "name": "CEXP", "input": [{"name": "X", "type": "COMPLEX", "description": "The input complex number for which the exponential is to be calculated."}], "output": [{"name": "CEXP", "type": "complex", "description": "The resulting complex number after computing the exponential of the input."}], "in/out": [], "return_value": {"type": "complex", "description": "Returns the computed complex exponential value.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the computed complex exponential."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the computed complex exponential."}]}}
{"title": "Complex Subtraction Function", "description": "This function performs subtraction between two complex numbers X and Y, returning the result as a complex number. The real part of the result is obtained by subtracting the real parts of X and Y, and the imaginary part is obtained by subtracting the imaginary parts of X and Y.", "type": "FUNCTION", "name": "CSUB", "input": [{"name": "X", "type": "COMPLEX", "description": "The first complex number from which the second complex number will be subtracted."}, {"name": "Y", "type": "COMPLEX", "description": "The second complex number which will be subtracted from the first complex number."}], "output": [], "in/out": [], "return_value": {"type": "COMPLEX", "description": "The complex result obtained by subtracting Y from X.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the result."}]}}
{"title": "Real-Time Clock Management Function Block", "description": "This function block, RTC_MS, is responsible for managing the real-time clock by updating the clock value based on the given parameters and maintaining a count of milliseconds since the last update. The block initializes the clock when the SET input is true or after a power-up, and it increments the clock based on the elapsed time measured in milliseconds.", "type": "FUNCTION_BLOCK", "name": "RTC_MS", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean flag to initiate the clock setting process."}, {"name": "SDT", "type": "DT", "description": "The current date and time to set the clock to."}, {"name": "SMS", "type": "INT", "description": "The initial count of milliseconds to set."}], "output": [{"name": "XDT", "type": "DT", "description": "The updated date and time after processing."}, {"name": "XMS", "type": "INT", "description": "The updated count of milliseconds since the last clock update."}], "in/out": [], "return_value": null}
{"title": "Dead Zone Function Block", "description": "This function block applies a dead zone to the input signal. If the absolute value of the input 'X' exceeds the threshold 'L', the output 'Y' is set to 'X'. If 'Y' is positive, 'Y' is set to 'L'; otherwise, 'Y' is set to '-L'.", "type": "FUNCTION_BLOCK", "name": "DEAD_ZONE2", "input": [{"name": "X", "type": "REAL", "description": "The input value that is processed by the dead zone logic."}, {"name": "L", "type": "REAL", "description": "The dead zone threshold value. If the absolute value of 'X' is less than or equal to 'L', 'Y' will be set to either 'L' or '-L'."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value after applying the dead zone logic based on the input 'X' and threshold 'L'."}], "in/out": [], "return_value": {}}
{"title": "Status to ESR Data Converter", "description": "This function converts a status byte into an ESR data structure based on the provided inputs. The function classifies the status into types and populates the ESR data with the corresponding parameters.", "type": "FUNCTION", "name": "STATUS_TO_ESR", "input": [{"name": "status", "type": "BYTE", "description": "A byte representing the status value which determines the type of ESR data."}, {"name": "adress", "type": "STRING[10]", "description": "A string of up to 10 characters representing the address associated with the ESR data."}, {"name": "DT_in", "type": "DT", "description": "A date and time input that represents the timestamp to be stored in the ESR data."}, {"name": "TS", "type": "TIME", "description": "A time input that indicates the time to be included in the ESR data."}], "output": [{"name": "esr_data", "type": "Struct", "description": "The output ESR data structure filled based on the input parameters and logic applied within the function.", "fields": [{"name": "typ", "type": "INT", "description": "The type classification of the ESR data, determined by the status value."}, {"name": "adress", "type": "STRING[10]", "description": "The address associated with the ESR data."}, {"name": "DS", "type": "DT", "description": "The date and time input retained in the ESR data."}, {"name": "TS", "type": "TIME", "description": "The time input retained in the ESR data."}, {"name": "data", "type": "ARRAY[0..10] OF BYTE", "description": "An array storing the status input at index 0."}]}], "in/out": [], "return_value": {"type": "Struct", "description": "This function does not return a value directly, but modifies the output variable 'esr_data' instead.", "fields": []}}
{"title": "String to DateTime Conversion", "description": "This function converts a formatted string representation of date and time into a DateTime (DT) type. It extracts year, month, day, hour, minute, and second from the input string based on the provided format.", "type": "FUNCTION", "name": "FSTRING_TO_DT", "input": [{"name": "SDT", "type": "STRING[60]", "description": "Input variable for the source data text which contains the date and time as a string."}, {"name": "FMT", "type": "STRING[60]", "description": "Input variable for the format that specifies how to interpret the source data text."}], "output": [{"name": "FSTRING_TO_DT", "type": "DT", "description": "The resulting DateTime value extracted from the provided string based on the specified format."}], "in/out": [], "return_value": {"type": "DT", "description": "The return value is the DateTime constructed from the parsed string.", "fields": []}}
{"title": "Sun Position Calculation", "description": "This function block calculates the position of the sun given the geographic coordinates (latitude and longitude) and the current UTC time. The output includes the solar zenith angle (B), the solar altitude angle (H), and the hour angle (HR).", "type": "FUNCTION_BLOCK", "name": "SUN_POS", "input": [{"name": "latitude", "type": "REAL", "description": "Latitude of the geographical position."}, {"name": "longitude", "type": "REAL", "description": "Longitude of the geographical position."}, {"name": "utc", "type": "DT", "description": "World time in UTC."}], "output": [{"name": "B", "type": "REAL", "description": "Solar zenith angle in degrees."}, {"name": "H", "type": "REAL", "description": "Solar altitude angle in degrees."}, {"name": "HR", "type": "REAL", "description": "Hour angle in degrees."}], "in/out": [], "return_value": null}
{"title": "Minimum and Maximum Value Calculation", "description": "This function block calculates the minimum and maximum values from a stream of input data. It resets the calculated values when requested and initializes them based on the first input received.", "type": "FUNCTION_BLOCK", "name": "FT_MIN_MAX", "input": [{"name": "in", "type": "REAL", "description": "The input value for which the minimum or maximum is to be calculated."}, {"name": "rst", "type": "BOOL", "description": "A reset flag that, when true, resets the minimum and maximum values."}], "output": [{"name": "mx", "type": "REAL", "description": "The current maximum value calculated."}, {"name": "mn", "type": "REAL", "description": "The current minimum value calculated."}], "in/out": [], "return_value": null}
{"title": "Determine Month of a Given Date", "description": "This function calculates the month of the year based on the provided date. It considers whether the year is a leap year to accurately determine the month from the day of the year represented by the input date.", "type": "FUNCTION", "name": "MONTH_OF_DATE", "input": [{"name": "IDATE", "type": "DATE", "description": "The date for which the month needs to be determined."}], "output": [{"name": "MONTH_OF_DATE", "type": "INT", "description": "The month of the year corresponding to the given date, as an integer value."}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the calculated month of the year based on the input date."}}
{"title": "Factorial Calculation Function", "description": "This function calculates the factorial of a given integer X. If X is between 0 and 12 inclusive, it retrieves the factorial from a predefined array. If X is outside this range, it returns -1. The function handles edge cases such as negative numbers and ensures proper performance.", "type": "FUNCTION", "name": "FACT", "input": [{"name": "X", "type": "INT", "description": "The integer input for which the factorial is to be calculated."}], "output": [{"name": "FACT", "type": "DINT", "description": "Returns the factorial of the input integer X, or -1 if the input is out of valid range."}], "in/out": [], "return_value": {"type": "DINT", "description": "The factorial of the integer X or -1 if X is out of the acceptable range."}}
{"title": "Find Number in String", "description": "This function searches for the first occurrence of a numeric character (0-9) or a decimal point (.) in a given string, starting from a specified position. If a numeric character is found, it returns the index of that character; if no such character is found, it returns 0.", "type": "FUNCTION", "name": "FIND_NUM", "input": [{"name": "str", "type": "STRING", "description": "The string to be searched for numeric characters.", "fields": []}, {"name": "pos", "type": "INT", "description": "The starting position from which to begin the search for numeric characters.", "fields": []}], "output": [{"name": "FIND_NUM", "type": "INT", "description": "The index of the first numeric character found in the string; returns 0 if no numeric character is found.", "fields": []}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the index of the first numeric character or 0 if none is found.", "fields": []}}
{"title": "Counting Block", "description": "The COUNT_BR block is designed to implement a counting mechanism that can be controlled through various input parameters including set, increment, decrement, and reset functionalities. It keeps track of a count value that can be modified based on the provided input signals and configurable step and maximum values.", "type": "FUNCTION_BLOCK", "name": "COUNT_BR", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean input that, when true, sets the count to the input value."}, {"name": "IN", "type": "BYTE", "description": "A byte input representing the value to reset to when SET is activated."}, {"name": "UP", "type": "BOOL", "description": "A boolean input indicating an increment request for the count."}, {"name": "DN", "type": "BOOL", "description": "A boolean input indicating a decrement request for the count."}, {"name": "STEP", "type": "BYTE", "description": "A byte parameter that defines the step size for increments and decrements. Defaults to 1.", "fields": []}, {"name": "MX", "type": "BYTE", "description": "A byte parameter that sets the maximum limit for the count. Defaults to 255.", "fields": []}, {"name": "RST", "type": "BOOL", "description": "A boolean input that, when true, resets the count to zero."}], "output": [{"name": "CNT", "type": "BYTE", "description": "The current count value after processing the inputs."}], "in/out": [], "return_value": {}}
{"title": "16-Element Stack Function Block", "description": "This function block implements a stack data structure with a fixed capacity of 16 elements. It supports reading from and writing to the stack, along with reset functionality. The stack operates in a first-in-last-out (FILO) manner, and the block provides status indicators for the emptiness and fullness of the stack.", "type": "FUNCTION_BLOCK", "name": "STACK_16", "input": [{"name": "Din", "type": "DWORD", "description": "The data input to be written to the stack."}, {"name": "E", "type": "BOOL", "description": "Enable input, which must be TRUE for read or write operations to occur. Defaults to TRUE."}, {"name": "RD", "type": "BOOL", "description": "Read signal, which when TRUE and stack is not empty, triggers the reading of the top element from the stack."}, {"name": "WD", "type": "BOOL", "description": "Write signal, which when TRUE and stack is not full, triggers the writing of the input data to the stack."}, {"name": "RST", "type": "BOOL", "description": "Reset signal, when TRUE resets the stack to its initial state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data output that provides the most recently read value from the stack."}, {"name": "EMPTY", "type": "BOOL", "description": "Indicates if the stack is empty. TRUE if the stack is empty."}, {"name": "FULL", "type": "BOOL", "description": "Indicates if the stack is full. TRUE if the stack is full."}], "in/out": [], "return_value": null}
{"title": "Check if a 3D Vector is Null", "description": "This function checks whether the input 3D vector is a null vector (i.e., all its components are zero). It returns a boolean value indicating the result of this check.", "type": "FUNCTION", "name": "V3_NUL", "input": [{"name": "A", "type": "Vector_3", "description": "A 3D vector whose components will be checked to determine if it is a null vector."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the vector A is a null vector (all components are zero); otherwise, returns FALSE."}}
{"title": "Check Even Number", "description": "This function checks whether a given integer input is an even number. It returns TRUE if the number is even, and FALSE if it is odd.", "type": "FUNCTION", "name": "EVEN", "input": [{"name": "in", "type": "DINT", "description": "Input variable that represents the integer to be checked for evenness."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The boolean result indicating if the input number is even (TRUE) or odd (FALSE)."}}
{"title": "Driver Control Function Block", "description": "This function block, DRIVER_4, handles the control of multiple driver instances based on input signals. It toggles modes, manages timeouts, and establishes output states for four outputs (Q0 to Q3) based on the respective inputs and reset signals.", "type": "FUNCTION_BLOCK", "name": "DRIVER_4", "input": [{"name": "Toggle_Mode", "type": "BOOL", "description": "A boolean value indicating the mode of operation to toggle."}, {"name": "Timeout", "type": "TIME", "description": "A time duration which sets the timeout for the drivers."}, {"name": "SET", "type": "BOOL", "description": "A boolean signal to set the driver functionality."}, {"name": "IN0", "type": "BOOL", "description": "Input signal for the first driver instance."}, {"name": "IN1", "type": "BOOL", "description": "Input signal for the second driver instance."}, {"name": "IN2", "type": "BOOL", "description": "Input signal for the third driver instance."}, {"name": "IN3", "type": "BOOL", "description": "Input signal for the fourth driver instance."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to clear the driver states."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output state of the first driver instance."}, {"name": "Q1", "type": "BOOL", "description": "Output state of the second driver instance."}, {"name": "Q2", "type": "BOOL", "description": "Output state of the third driver instance."}, {"name": "Q3", "type": "BOOL", "description": "Output state of the fourth driver instance."}], "in/out": [], "return_value": null}
{"title": "Shift Right Operation", "description": "This function performs a logical right shift operation on a given DWORD input. The function takes an input value and a shift amount, and it shifts the input to the right by the specified number of bits, filling the leftmost bits with zeros. The operation utilizes a temporary constant for internal calculations.", "type": "FUNCTION", "name": "SHR1", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value to be shifted."}, {"name": "N", "type": "INT", "description": "The number of bits to shift the input value to the right."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The result of the logical right shift operation on the input value.", "fields": []}}
{"title": "Array Absolute Value Calculation", "description": "This function iterates through an array of real numbers and replaces each element with its absolute value. The input is a pointer to the array and its size. The function should return TRUE upon successful execution.", "type": "FUNCTION", "name": "_ARRAY_ABS", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to the array of real numbers whose absolute values need to be calculated."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the absolute values were successfully calculated."}}
{"title": "Holiday Calculation", "description": "This FUNCTION_BLOCK calculates whether a given date is a holiday and provides the name of the holiday in the specified language. The block takes into consideration fixed date holidays, holidays based on Easter, and weekends based on user-defined parameters.", "type": "FUNCTION_BLOCK", "name": "HOLIDAY", "input": [{"name": "DATE_IN", "type": "DATE", "description": "The date to check for a holiday."}, {"name": "LANGU", "type": "INT", "description": "The language code to determine the holiday name."}, {"name": "FRIDAY", "type": "BOOL", "description": "Indicates whether Friday should be considered as a weekend."}, {"name": "SATURDAY", "type": "BOOL", "description": "Indicates whether Saturday should be considered as a weekend."}, {"name": "SUNDAY", "type": "BOOL", "description": "Indicates whether Sunday should be considered as a weekend."}], "output": [{"name": "Y", "type": "BOOL", "description": "Indicates whether the date is a holiday."}, {"name": "NAME", "type": "STRING[30]", "description": "The name of the holiday, if any, corresponding to the given date."}], "in/out": [{"name": "HOLIDAYS", "type": "ARRAY[0..29] OF HOLIDAY_DATA", "description": "An array containing holiday data to be checked against the input date."}], "return_value": {"type": null, "description": null}}
{"title": "Conversion from SDT to DT", "description": "This function takes an input of type SDT (Structured Date Time) and converts it into a DT (Date Time) format. The conversion utilizes specific fields from the SDT structure such as year, month, day, hour, minute, and second to generate the corresponding DT value.", "type": "FUNCTION", "name": "SDT_TO_DT", "input": [{"name": "DTI", "type": "SDT", "description": "Input parameter of type SDT that holds the structured date time information."}], "output": [], "in/out": [], "return_value": {"type": "DT", "description": "The resulting date time value in DT format after conversion from the SDT input.", "fields": []}}
{"title": "Extract Bit from DWORD", "description": "This function determines whether the specific bit in a DWORD variable is set. Given a DWORD input and a specified bit position, the function will return TRUE if the bit is set and FALSE otherwise.", "type": "FUNCTION", "name": "BIT_OF_DWORD", "input": [{"name": "in", "type": "DWORD", "description": "The DWORD input value from which the bit is extracted."}, {"name": "N", "type": "INT", "description": "The position of the bit to check in the DWORD input."}], "output": [{"name": "BIT_OF_DWORD", "type": "BOOL", "description": "A boolean value indicating if the specified bit is set in the input DWORD."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the specified bit is set, otherwise FALSE."}}
{"title": "8-channel Digital Output Controller", "description": "This FUNCTION_BLOCK is designed to control 8 digital output channels based on a 3-bit input address and a data signal. The block takes a data input (D) and three address inputs (A0, A1, A2) which together determine which of the eight outputs (Q0 to Q7) will receive the value of D.", "type": "FUNCTION_BLOCK", "name": "DEC_8", "input": [{"name": "D", "type": "BOOL", "description": "The input data signal that will be assigned to one of the output channels based on the address."}, {"name": "A0", "type": "BOOL", "description": "The least significant bit of the address that specifies which channel to control."}, {"name": "A1", "type": "BOOL", "description": "The middle bit of the address that specifies which channel to control."}, {"name": "A2", "type": "BOOL", "description": "The most significant bit of the address that specifies which channel to control."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output channel 0, which receives the value of D if the address is 0."}, {"name": "Q1", "type": "BOOL", "description": "Output channel 1, which receives the value of D if the address is 1."}, {"name": "Q2", "type": "BOOL", "description": "Output channel 2, which receives the value of D if the address is 2."}, {"name": "Q3", "type": "BOOL", "description": "Output channel 3, which receives the value of D if the address is 3."}, {"name": "Q4", "type": "BOOL", "description": "Output channel 4, which receives the value of D if the address is 4."}, {"name": "Q5", "type": "BOOL", "description": "Output channel 5, which receives the value of D if the address is 5."}, {"name": "Q6", "type": "BOOL", "description": "Output channel 6, which receives the value of D if the address is 6."}, {"name": "Q7", "type": "BOOL", "description": "Output channel 7, which receives the value of D if the address is 7."}], "in/out": [], "return_value": {}}
{"title": "Convert Structured Date Time to Date", "description": "This function converts a structured date time (SDT) into a standard date format. The input consists of a structured data type containing year, month, and day. The function returns the corresponding date.", "type": "FUNCTION", "name": "SDT_TO_DATE", "input": [{"name": "DTI", "type": "SDT", "description": "The structured date time input that contains the year, month, and day."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The resulting date generated from the structured date time.", "fields": []}}
{"title": "Ramp Control Block", "description": "This function block controls a ramping output based on the direction and timing parameters. It takes into account the input direction, enable signal, and a timing reference to update the ramp output accordingly.", "type": "FUNCTION_BLOCK", "name": "_RMP_B", "input": [{"name": "DIR", "type": "BOOL", "description": "Indicates the direction of the ramp. 'true' means ramping up."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the ramp control. Defaults to TRUE."}, {"name": "TR", "type": "TIME", "description": "Timing reference to control the ramping duration."}], "output": [{"name": "RMP", "type": "BYTE", "description": "Output value representing the current state of the ramp."}], "in/out": [], "return_value": null}
{"title": "Check Parity", "description": "This function computes the parity of a given DWORD input. It processes the bits of the input by checking their values and combines the results to determine if the overall parity is even or odd, adjusting the outcome based on the input parameter 'p'.", "type": "FUNCTION", "name": "CHECK_PARITY", "input": [{"name": "in", "type": "DWORD", "description": "A DWORD input whose parity is to be checked."}, {"name": "p", "type": "BOOL", "description": "A boolean parameter that is used to adjust the final parity result."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The computed parity result, where TRUE indicates odd parity and FALSE indicates even parity."}}
{"title": "Band Operation Function", "description": "This function performs a band operation on two BYTE inputs, X and B. It returns a BYTE result based on the comparison of these inputs. If X is less than B, the result is 0. If X exceeds the maximum allowable value after subtracting B from 255, the result is capped at 255. Otherwise, the function returns X.", "type": "FUNCTION", "name": "BAND_B", "input": [{"name": "X", "type": "BYTE", "description": "The first input value for the band operation."}, {"name": "B", "type": "BYTE", "description": "The second input value for the band operation."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The result of the band operation based on the input values.", "fields": []}}
{"title": "Minute Extraction from DateTime", "description": "This function is designed to extract the minute component from a DateTime input. It takes a DateTime value and computes the minute by converting it to DWORD format, applying a modulo operation to isolate the seconds, and then dividing by 60 to get the minute.", "type": "FUNCTION", "name": "MINUTE_OF_DT", "input": [{"name": "XDT", "type": "DT", "description": "The DateTime value from which the minute is to be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The extracted minute value from the given DateTime.", "fields": []}}
{"title": "Calculate Temperature from Resistance", "description": "This function calculates the temperature in degrees Celsius based on the resistance input. It uses the resistance value and a reference resistance to determine the temperature either directly via a quadratic formula or through successive approximation if the quadratic equation does not yield a valid result.", "type": "FUNCTION", "name": "TEMP_PT", "input": [{"name": "Res", "type": "REAL", "description": "The resistance value to be used for temperature calculation."}, {"name": "R0", "type": "REAL", "description": "The reference resistance value used for comparison."}], "output": [{"name": "TEMP_PT", "type": "REAL", "description": "The calculated temperature in degrees Celsius based on the input resistance."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the computed temperature value."}}
{"title": "Calculate Year-End Date from Year Integer", "description": "This function takes an integer year as input and calculates the corresponding year-end date. The calculation is based on a specific formula that involves converting the year into a DWORD and manipulating it to derive the date representation.", "type": "FUNCTION", "name": "YEAR_END", "input": [{"name": "y", "type": "INT", "description": "The input variable representing the year as an integer."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated year-end date corresponding to the input year."}}
{"title": "Calibration Block", "description": "This function block is responsible for calibrating input values based on specific conditions and scaling factors. It calculates an output value based on the calibration operations decided by the input control signals and the offsets and scales defined.", "type": "FUNCTION_BLOCK", "name": "CALIBRATE", "input": [{"name": "X", "type": "REAL", "description": "Input value that will be calibrated."}, {"name": "CO", "type": "BOOL", "description": "Control signal to adjust the offset."}, {"name": "CS", "type": "BOOL", "description": "Control signal to adjust the scale."}, {"name": "Y_Offset", "type": "REAL", "description": "Constant value for offset adjustment."}, {"name": "Y_Scale", "type": "REAL", "description": "Constant value for scale adjustment."}], "output": [{"name": "Y", "type": "REAL", "description": "Calibrated output value based on the input and calibration parameters."}], "in/out": [], "return_value": {}}
{"title": "Clock N Function Block", "description": "This function block generates a clock signal based on a specified period defined by the input parameter N. The output Q provides a boolean representation of the clock state, transitioning based on the specified time interval.", "type": "FUNCTION_BLOCK", "name": "CLK_N", "input": [{"name": "N", "type": "INT", "description": "An integer that specifies the number of milliseconds for the clock period."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output that represents the current state of the clock."}], "in/out": [], "return_value": {}}
{"title": "Manual Control Function Block", "description": "This function block enables manual control of outputs based on input boolean signals and operational states, including the control of four discrete outputs and a status indicator. The function block transitions between manual and automatic modes, managing state changes on inputs and controlling the output based on the position index.", "type": "FUNCTION_BLOCK", "name": "MANUAL_4", "input": [{"name": "I0", "type": "BOOL", "description": "Input boolean signal 0."}, {"name": "I1", "type": "BOOL", "description": "Input boolean signal 1."}, {"name": "I2", "type": "BOOL", "description": "Input boolean signal 2."}, {"name": "I3", "type": "BOOL", "description": "Input boolean signal 3."}, {"name": "MAN", "type": "BOOL", "description": "Manual control signal; when true, switches to manual mode."}, {"name": "STP", "type": "BOOL", "description": "Stop signal; when true, triggers state change."}, {"name": "M0", "type": "BOOL", "description": "Manual mode output 0."}, {"name": "M1", "type": "BOOL", "description": "Manual mode output 1."}, {"name": "M2", "type": "BOOL", "description": "Manual mode output 2."}, {"name": "M3", "type": "BOOL", "description": "Manual mode output 3."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output boolean signal 0."}, {"name": "Q1", "type": "BOOL", "description": "Output boolean signal 1."}, {"name": "Q2", "type": "BOOL", "description": "Output boolean signal 2."}, {"name": "Q3", "type": "BOOL", "description": "Output boolean signal 3."}, {"name": "STATUS", "type": "BYTE", "description": "Status indicator reflecting current operation mode and state."}], "in/out": [], "return_value": {}}
{"title": "Calculate Argument of Complex Number", "description": "This function computes the argument (angle) of a complex number represented in polar form using the ATAN2 function, which takes into account the signs of both real and imaginary parts to determine the correct quadrant of the angle.", "type": "FUNCTION", "name": "CARG", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the argument needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated argument (angle in radians) of the complex number X.", "fields": []}}
{"title": "Calculate Day of Month", "description": "This function calculates the day of the month based on a given date by determining the day of the year and accounting for leap years. It adjusts the day of the month based on predefined offsets for each month.", "type": "FUNCTION", "name": "DAY_OF_MONTH", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the day of the month is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The calculated day of the month based on the input date, adjusted for leap years and month offsets."}}
{"title": "Generator for Ramp Modulated Pulse (RMP)", "description": "The GEN_RMP function block generates a ramp-modulated pulse output based on specified time and amplitude parameters. It calculates the output in real-time, adjusting the output based on the input settings for pulse time, amplitude, offset, and duty cycle.", "type": "FUNCTION_BLOCK", "name": "GEN_RMP", "input": [{"name": "PT", "type": "TIME", "description": "Pulse time duration for the generation of the ramp-modulated pulse."}, {"name": "AM", "type": "REAL", "description": "Amplitude of the ramp signal."}, {"name": "OS", "type": "REAL", "description": "Offset added to the ramp signal."}, {"name": "DL", "type": "REAL", "description": "Duty cycle of the pulse signal, represented as a fraction between 0 and 1."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean flag indicating if the current output is less than the previous output."}, {"name": "OUT", "type": "REAL", "description": "Calculated output value of the ramp signal."}], "in/out": [], "return_value": {}}
{"title": "Ceil2 Function", "description": "The Ceil2 function takes a real number as input and computes its ceiling value as an integer. The function converts the real number to an integer and checks if the conversion resulted in a value less than the original input, in which case it increments the resultant integer by one to ensure it correctly represents the ceiling.", "type": "FUNCTION", "name": "CEIL2", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the ceiling needs to be computed."}], "output": [{"name": "CEIL2", "type": "DINT", "description": "The computed ceiling value of the input real number, represented as an integer."}], "in/out": [], "return_value": {"type": "DINT", "description": "Returns the ceiling of the input real number as an integer."}}
{"title": "Character Name Generation", "description": "This function generates a character name string based on the input BYTE value. If the input is not zero, it constructs a search string by converting the BYTE to a string, appending special characters, and searching through predefined character names to retrieve the appropriate name. If the input is zero, the output is an empty string.", "type": "FUNCTION", "name": "CHARNAME", "input": [{"name": "C", "type": "BYTE", "description": "A BYTE value used to determine the character name."}], "output": [{"name": "CHARNAME", "type": "string", "description": "The resulting character name string constructed from the input BYTE."}], "in/out": [], "return_value": {"type": "string", "description": "The character name generated from the BYTE input."}}
{"title": "CYCLE_4 Function Block", "description": "This function block implements a cycling state machine that transitions through states based on timer inputs. It utilizes external boolean and integer inputs to control the state changes and the cycling behavior, along with internal variables to manage timing and state transitions.", "type": "FUNCTION_BLOCK", "name": "CYCLE_4", "input": [{"name": "E", "type": "BOOL", "description": "Enable flag that allows the state machine to operate."}, {"name": "T0", "type": "TIME", "description": "Duration for waiting in state 0."}, {"name": "T1", "type": "TIME", "description": "Duration for waiting in state 1."}, {"name": "T2", "type": "TIME", "description": "Duration for waiting in state 2."}, {"name": "T3", "type": "TIME", "description": "Duration for waiting in state 3."}, {"name": "S0", "type": "BOOL", "description": "Control signal to reset the state machine to state 0."}, {"name": "SX", "type": "INT", "description": "Input for directly controlling the state when greater than 0."}, {"name": "SL", "type": "BOOL", "description": "Status flag to indicate that the state should be forced based on SX."}], "output": [{"name": "STATE", "type": "INT", "description": "Current state of the state machine."}], "in/out": [], "return_value": null}
{"title": "Calculate Greatest Common Divisor (GCD)", "description": "This function calculates the greatest common divisor (GCD) of two integers A and B. The function handles cases where either A or B is zero and performs bit manipulation to compute the GCD efficiently.", "type": "FUNCTION", "name": "GCD", "input": [{"name": "A", "type": "DINT", "description": "The first integer for which the GCD is to be calculated."}, {"name": "B", "type": "DINT", "description": "The second integer for which the GCD is to be calculated."}], "output": [{"name": "GCD", "type": "INT", "description": "The greatest common divisor of A and B."}], "in/out": [], "return_value": {"type": "INT", "description": "The calculated GCD value that is returned by the function."}}
{"title": "Complex Hyperbolic Cotangent Function", "description": "This function calculates the complex hyperbolic cotangent of a given complex number. The input is a complex number X, and the output is a complex number representing the result.", "type": "FUNCTION", "name": "CTANH", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the hyperbolic cotangent is to be calculated."}], "output": [{"name": "CTANH", "type": "complex", "description": "The complex hyperbolic cotangent of the input complex number X.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex hyperbolic cotangent."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex hyperbolic cotangent."}]}], "in/out": [], "return_value": {"type": "complex", "description": "Returns the result of the complex hyperbolic cotangent as a complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Buffer Clear Function", "description": "This function clears a specified buffer in memory by setting the bytes to zero. It uses efficient 32-bit accesses to enhance performance. The function takes a pointer to a BYTE and the size of the buffer as inputs.", "type": "FUNCTION", "name": "_BUFFER_CLEAR", "input": [{"name": "PT", "type": "POINTER TO BYTE", "description": "A pointer indicating the start of the buffer to be cleared."}, {"name": "SIZE", "type": "UINT", "description": "The size of the buffer in bytes that needs to be cleared."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the buffer was successfully cleared.", "fields": []}}
{"title": "Find Control Character in String", "description": "This function identifies the position of the first control character (ASCII values less than 32 or equal to 127) in a given string starting from a specified position. If no control character is found, it returns 0.", "type": "FUNCTION", "name": "FIND_CTRL", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The string in which to search for control characters."}, {"name": "pos", "type": "INT", "description": "The position in the string from which to start the search."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the first control character found in the string. Returns 0 if no control character is found."}}
{"title": "Vector Dot Product Calculation", "description": "This function calculates the dot product of two 3-dimensional vectors, A and B. The result is a scalar value representing the sum of the products of their corresponding components.", "type": "FUNCTION", "name": "V3_DPRO", "input": [{"name": "A", "type": "Vector_3", "description": "The first 3-dimensional vector used in the dot product calculation."}, {"name": "B", "type": "Vector_3", "description": "The second 3-dimensional vector used in the dot product calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting dot product of vectors A and B."}}
{"title": "4-channel Driver Function Block", "description": "This function block implements a 4-channel driver that counts the input edges and controls outputs based on the count. It has a reset feature and uses a timeout mechanism to manage output states.", "type": "FUNCTION_BLOCK", "name": "DRIVER_4C", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal indicating a trigger event."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the counter."}, {"name": "Timeout", "type": "TIME", "description": "Timeout duration for automatic reset of the output when active."}, {"name": "SX", "type": "ARRAY[1..7] OF BYTE", "description": "An array of byte values used to generate output signals, initialized with specific values."}], "output": [{"name": "SN", "type": "INT", "description": "Current count of the input edges."}, {"name": "Q0", "type": "BOOL", "description": "Output signal corresponding to the first channel."}, {"name": "Q1", "type": "BOOL", "description": "Output signal corresponding to the second channel."}, {"name": "Q2", "type": "BOOL", "description": "Output signal corresponding to the third channel."}, {"name": "Q3", "type": "BOOL", "description": "Output signal corresponding to the fourth channel."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Sequential Control Block for Multiple Inputs", "description": "This function block implements a sequential control logic that processes multiple boolean inputs in a specific order with wait and delay times. The block starts the sequence when the 'start' input is activated and can be reset with the 'rst' input. It provides outputs to indicate the status of each step in the sequence as well as overall status information.", "type": "FUNCTION_BLOCK", "name": "SEQUENCE_4", "input": [{"name": "in0", "type": "BOOL", "description": "Boolean input control for step 0."}, {"name": "in1", "type": "BOOL", "description": "Boolean input control for step 1."}, {"name": "in2", "type": "BOOL", "description": "Boolean input control for step 2."}, {"name": "in3", "type": "BOOL", "description": "Boolean input control for step 3."}, {"name": "start", "type": "BOOL", "description": "Start signal to initiate the sequence."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to reset the sequence and outputs."}, {"name": "wait0", "type": "TIME", "description": "Wait time for step 0."}, {"name": "delay0", "type": "TIME", "description": "Delay time after step 0."}, {"name": "wait1", "type": "TIME", "description": "Wait time for step 1."}, {"name": "delay1", "type": "TIME", "description": "Delay time after step 1."}, {"name": "wait2", "type": "TIME", "description": "Wait time for step 2."}, {"name": "delay2", "type": "TIME", "description": "Delay time after step 2."}, {"name": "wait3", "type": "TIME", "description": "Wait time for step 3."}, {"name": "delay3", "type": "TIME", "description": "Delay time after step 3."}, {"name": "stop_on_error", "type": "BOOL", "description": "Flag to stop the sequence on the first error detected."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for step 0."}, {"name": "Q1", "type": "BOOL", "description": "Output for step 1."}, {"name": "Q2", "type": "BOOL", "description": "Output for step 2."}, {"name": "Q3", "type": "BOOL", "description": "Output for step 3."}, {"name": "QX", "type": "BOOL", "description": "Combined output status indicating active steps."}, {"name": "run", "type": "BOOL", "description": "Indicates whether the sequence is currently running."}, {"name": "step", "type": "INT", "description": "Current step in the sequence, initialized to -1 indicating no active step."}, {"name": "status", "type": "BYTE", "description": "Status of the sequence execution."}], "in/out": [], "return_value": null}
{"title": "Scale B8 Function", "description": "This function scales eight BYTE input values using specified minimum and maximum values, a scaling factor K, and an offset O, producing a REAL output value. The function calculates a weighted sum based on the input values and their defined ranges, applies normalization, and then scales and offsets the result.", "type": "FUNCTION", "name": "SCALE_B8", "input": [{"name": "in1", "type": "BYTE", "description": "First input value to be scaled."}, {"name": "in2", "type": "BYTE", "description": "Second input value to be scaled."}, {"name": "in3", "type": "BYTE", "description": "Third input value to be scaled."}, {"name": "in4", "type": "BYTE", "description": "Fourth input value to be scaled."}, {"name": "in5", "type": "BYTE", "description": "Fifth input value to be scaled."}, {"name": "in6", "type": "BYTE", "description": "Sixth input value to be scaled."}, {"name": "in7", "type": "BYTE", "description": "Seventh input value to be scaled."}, {"name": "in8", "type": "BYTE", "description": "Eighth input value to be scaled."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the normalized sum."}, {"name": "O", "type": "REAL", "description": "Offset added to the scaled result."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input. Defaults to 1000.0.", "fields": []}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input. Defaults to 1000.0.", "fields": []}, {"name": "in3_min", "type": "REAL", "description": "Minimum value for the third input."}, {"name": "in3_max", "type": "REAL", "description": "Maximum value for the third input. Defaults to 1000.0.", "fields": []}, {"name": "in4_min", "type": "REAL", "description": "Minimum value for the fourth input."}, {"name": "in4_max", "type": "REAL", "description": "Maximum value for the fourth input. Defaults to 1000.0.", "fields": []}, {"name": "in5_min", "type": "REAL", "description": "Minimum value for the fifth input."}, {"name": "in5_max", "type": "REAL", "description": "Maximum value for the fifth input. Defaults to 1000.0.", "fields": []}, {"name": "in6_min", "type": "REAL", "description": "Minimum value for the sixth input."}, {"name": "in6_max", "type": "REAL", "description": "Maximum value for the sixth input. Defaults to 1000.0.", "fields": []}, {"name": "in7_min", "type": "REAL", "description": "Minimum value for the seventh input."}, {"name": "in7_max", "type": "REAL", "description": "Maximum value for the seventh input. Defaults to 1000.0.", "fields": []}, {"name": "in8_min", "type": "REAL", "description": "Minimum value for the eighth input."}, {"name": "in8_max", "type": "REAL", "description": "Maximum value for the eighth input. Defaults to 1000.0.", "fields": []}], "output": [{"name": "SCALE_B8", "type": "REAL", "description": "The scaled output value resulting from the scaling operation."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting scaled value after applying the function's calculations."}}
{"title": "Check if Array is Sorted", "description": "This function checks whether a given array of REAL numbers is sorted in ascending order. The function takes a pointer to the array and its size as inputs and returns a boolean value indicating whether the array is sorted.", "type": "FUNCTION", "name": "IS_SORTED", "input": [{"name": "pt", "type": "pointer to ARRAY[0..32000] of REAL", "description": "A pointer to an array containing REAL numbers."}, {"name": "size", "type": "UINT", "description": "The size of the array, specifying the number of elements in the pointer array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the array is sorted in ascending order, otherwise returns FALSE."}}
{"title": "Count Set Bits in a DWORD", "description": "This function takes a DWORD input and counts the number of set bits (1s) in its binary representation. It iteratively checks each bit by using a bitwise shift operation until all bits have been processed.", "type": "FUNCTION", "name": "BIT_COUNT", "input": [{"name": "IN", "type": "DWORD", "description": "A DWORD value for which the set bits are to be counted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The total count of set bits (1s) in the input DWORD.", "fields": []}}
{"title": "Byte to Bits Conversion", "description": "This function block converts a single BYTE input into eight separate BOOL outputs. Each BOOL output represents one bit of the input BYTE.", "type": "FUNCTION_BLOCK", "name": "BYTE_TO_BITS", "input": [{"name": "IN", "type": "BYTE", "description": "A single BYTE input that will be converted to individual bits."}], "output": [{"name": "B0", "type": "BOOL", "description": "Output representing the least significant bit (bit 0) of the input BYTE."}, {"name": "B1", "type": "BOOL", "description": "Output representing the second least significant bit (bit 1) of the input BYTE."}, {"name": "B2", "type": "BOOL", "description": "Output representing the third least significant bit (bit 2) of the input BYTE."}, {"name": "B3", "type": "BOOL", "description": "Output representing the fourth least significant bit (bit 3) of the input BYTE."}, {"name": "B4", "type": "BOOL", "description": "Output representing the fifth least significant bit (bit 4) of the input BYTE."}, {"name": "B5", "type": "BOOL", "description": "Output representing the sixth least significant bit (bit 5) of the input BYTE."}, {"name": "B6", "type": "BOOL", "description": "Output representing the seventh least significant bit (bit 6) of the input BYTE."}, {"name": "B7", "type": "BOOL", "description": "Output representing the most significant bit (bit 7) of the input BYTE."}], "in/out": [], "return_value": null}
{"title": "Error Function Calculation", "description": "This function computes the error function (ERF) for a given real number input. The implementation includes a mathematical transformation to derive the ERF value using the input variable X.", "type": "FUNCTION", "name": "ERF", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the error function is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated value of the error function for the input X."}}
{"title": "Timer Counting using System Timer", "description": "This function block retrieves the current system timer value and calculates the elapsed time since the last read. It initializes a timer count (TC) to zero on the first execution and updates it with the difference between the current timer and the last recorded timer value on subsequent executions.", "type": "FUNCTION_BLOCK", "name": "TC_US", "input": [], "output": [{"name": "TC", "type": "DWORD", "description": "The elapsed time in microseconds since the last update."}], "in/out": [], "return_value": null}
{"title": "Offset Calculation Function", "description": "This function calculates an offset value based on the input parameters. The function will return a value based on an initial input 'X', and will apply additional offsets if the corresponding boolean parameters are true. If the 'D' parameter is true, the function will return a default value instead of the calculated value.", "type": "FUNCTION", "name": "OFFSET", "input": [{"name": "X", "type": "REAL", "description": "The initial value to which offsets may be applied."}, {"name": "O1", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_1' to the result."}, {"name": "O2", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_2' to the result."}, {"name": "O3", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_3' to the result."}, {"name": "O4", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_4' to the result."}, {"name": "D", "type": "BOOL", "description": "A boolean flag that, if true, will cause the function to return the 'default' value instead of the calculated offset value."}, {"name": "Offset_1", "type": "REAL", "description": "The offset value to add if 'O1' is true."}, {"name": "Offset_2", "type": "REAL", "description": "The offset value to add if 'O2' is true."}, {"name": "Offset_3", "type": "REAL", "description": "The offset value to add if 'O3' is true."}, {"name": "Offset_4", "type": "REAL", "description": "The offset value to add if 'O4' is true."}, {"name": "default", "type": "REAL", "description": "The default value that will be returned if 'D' is true."}], "output": [{"name": "OFFSET", "type": "REAL", "description": "The resulting offset value after applying the initial value and any additional offsets, or the default value if 'D' is true."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the final offset value calculated based on the specified conditions."}}
{"title": "Array Average Calculation", "description": "This function calculates the average of an array of REAL values, given a pointer to the array and its size. The average is computed by iterating through the provided array elements up to a certain point and dividing the total sum by the count of elements.", "type": "FUNCTION", "name": "ARRAY_AVG", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of REAL numbers for which the average is to be calculated."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array indicated by the pointer."}], "output": [{"name": "ARRAY_AVG", "type": "REAL", "description": "The computed average of the REAL numbers in the array."}], "in/out": [], "return_value": {"type": "REAL", "description": "The average value of the elements in the array.", "fields": []}}
{"title": "PID Controller with Derivative Action", "description": "This FUNCTION_BLOCK implements a PID (Proportional-Integral-Derivative) controller with an additional derivative action. The block calculates the controller output based on input parameters and applies limits to ensure output stays within specified bounds. The reset functionality allows for reinitialization of the controller state.", "type": "FUNCTION_BLOCK", "name": "FT_PIDWL", "input": [{"name": "IN", "type": "REAL", "description": "The input value to the PID controller."}, {"name": "KP", "type": "REAL", "description": "The proportional gain, default value is 1.0."}, {"name": "TN", "type": "REAL", "description": "The time constant for the integral term, default value is 1.0."}, {"name": "TV", "type": "REAL", "description": "The time constant for the derivative term, default value is 1.0."}, {"name": "LIM_L", "type": "REAL", "description": "Lower limit for the output, default value is -1E+38."}, {"name": "LIM_H", "type": "REAL", "description": "Upper limit for the output, default value is 1E+38."}, {"name": "RST", "type": "BOOL", "description": "Boolean flag to reset the controller state."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the PID controller after processing."}, {"name": "LIM", "type": "BOOL", "description": "Indicates whether the output has been limited."}], "in/out": [], "return_value": null}
{"title": "Moving Average Filter", "description": "This function block implements a moving average filter that computes the average of the last N values. It initializes a buffer to store these values and updates the average based on the incoming data X. The output Y represents the current value of the moving average.", "type": "FUNCTION_BLOCK", "name": "FILTER_MAV_DW", "input": [{"name": "X", "type": "DWORD", "description": "The input data value to be filtered."}, {"name": "N", "type": "UINT", "description": "The number of samples to consider for the moving average. It is limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "A reset signal that, when TRUE, reinitializes the buffer and the output."}], "output": [{"name": "Y", "type": "DWORD", "description": "The output value representing the current moving average."}], "in/out": [], "return_value": null}
{"title": "Calculate RES_NI for temperature and resistance", "description": "This function calculates the resistance (RES_NI) based on the input temperature (T) and reference resistance (R0) using a polynomial function. The coefficients A, B, and C are predefined constants that are used in the calculation.", "type": "FUNCTION", "name": "RES_NI", "input": [{"name": "T", "type": "REAL", "description": "The input temperature in degrees Celsius at which the resistance is calculated."}, {"name": "R0", "type": "REAL", "description": "The reference resistance at 0°C."}], "output": [{"name": "RES_NI", "type": "REAL", "description": "The calculated resistance value based on the input temperature and reference resistance."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated resistance value (RES_NI) returned from the function."}}
{"title": "Control Set Parameters for PID and PI Controllers", "description": "This function block calculates the parameters KP, TN, TV, KI, and KD for PID and PI controllers based on the input values for KS, TU, TG, and the control flags PI and PID. It ensures that the parameters are computed correctly, accounting for the conditions specified.", "type": "FUNCTION_BLOCK", "name": "CONTROL_SET2", "input": [{"name": "KS", "type": "REAL", "description": "Gain factor for the system."}, {"name": "TU", "type": "REAL", "description": "Time constant for the system."}, {"name": "TG", "type": "REAL", "description": "Transport delay time."}, {"name": "PI", "type": "BOOL", "description": "Flag to indicate if PI control is to be used."}, {"name": "PID", "type": "BOOL", "description": "Flag to indicate if PID control is to be used."}, {"name": "P_K", "type": "REAL", "description": "Proportional gain for the PI controller, default is 1.0."}, {"name": "PI_K", "type": "REAL", "description": "Proportional gain for the PID controller, default is 0.9."}, {"name": "PI_TN", "type": "REAL", "description": "Integral time for the PI controller, default is 3.33."}, {"name": "PID_K", "type": "REAL", "description": "Proportional gain for the PI controller, default is 1.2."}, {"name": "PID_TN", "type": "REAL", "description": "Integral time for the PID controller, default is 2.0."}, {"name": "PID_TV", "type": "REAL", "description": "Derivative time for the PID controller, default is 0.5."}], "output": [{"name": "KP", "type": "REAL", "description": "Calculated proportional gain."}, {"name": "TN", "type": "REAL", "description": "Calculated integral time."}, {"name": "TV", "type": "REAL", "description": "Calculated derivative time."}, {"name": "KI", "type": "REAL", "description": "Calculated integral gain."}, {"name": "KD", "type": "REAL", "description": "Calculated derivative gain."}], "in/out": [], "return_value": null}
{"title": "32-Element Stack Function Block", "description": "This function block implements a 32-element stack with asynchronous reset capabilities, allowing simultaneous read and write operations. The block manages internal states to determine if the stack is empty or full and provides output based on read or write operations.", "type": "FUNCTION_BLOCK", "name": "STACK_32", "input": [{"name": "Din", "type": "DWORD", "description": "The data value to be written to the stack."}, {"name": "E", "type": "BOOL", "description": "Enable signal that allows the operation of the stack. If FALSE, the stack does not process read/write requests."}, {"name": "RD", "type": "BOOL", "description": "Read request signal. When TRUE, an element will be read from the stack if it is not empty."}, {"name": "WD", "type": "BOOL", "description": "Write request signal. When TRUE, the value of Din will be written to the stack if it is not full."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset signal. When TRUE, it resets the stack to its initial state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data value that has been read from the stack when RD is TRUE."}, {"name": "EMPTY", "type": "BOOL", "description": "Indicates whether the stack is empty. TRUE if it is empty, FALSE otherwise."}, {"name": "FULL", "type": "BOOL", "description": "Indicates whether the stack is full. TRUE if it is full, FALSE otherwise."}], "in/out": [], "return_value": null}
{"title": "Year of Date Calculation", "description": "This function calculates the year of a given date based on the input provided. The input date (IDATE) is converted to a DWORD format, adjusted, and then calculated to determine the corresponding year starting from 1970.", "type": "FUNCTION", "name": "YEAR_OF_DATE", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date from which the year is to be extracted."}], "output": [{"name": "year", "type": "INT", "description": "The calculated year derived from the input date."}], "in/out": [], "return_value": {"type": "INT", "description": "The function returns the year as an integer.", "fields": []}}
{"title": "Hyperbolic Complex Inverse Sine Function", "description": "This function calculates the hyperbolic inverse sine of a complex number using its real and imaginary parts. The function processes the input complex number and returns another complex number representing the result.", "type": "FUNCTION", "name": "CASINH", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the hyperbolic inverse sine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The hyperbolic inverse sine of the input complex number.", "fields": [{"name": "re", "type": "real", "description": "The real part of the hyperbolic inverse sine result."}, {"name": "im", "type": "real", "description": "The imaginary part of the hyperbolic inverse sine result."}]}}
{"title": "String to Buffer Conversion", "description": "This function converts a substring of a given string into a byte buffer, starting from a specified position and adhering to the maximum size constraints of the buffer. The function returns the position following the last byte written to the buffer.", "type": "FUNCTION", "name": "_STRING_TO_BUFFER", "input": [{"name": "STR", "type": "STRING[STRING_LENGTH]", "description": "The input string to be converted to a byte buffer."}, {"name": "POS", "type": "INT", "description": "The starting position in the byte buffer to begin writing the bytes."}, {"name": "PT", "type": "POINTER TO ARRAY[0..32767] OF BYTE", "description": "A pointer to the byte array where the converted bytes are stored."}, {"name": "SIZE", "type": "UINT", "description": "The size of the buffer, which defines the maximum number of bytes that can be written."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position in the byte buffer after the last byte written from the input string."}}
{"title": "Calculate Harmonic Average of an Array", "description": "This function calculates the harmonic average of a given array of real numbers. It takes as input a pointer to the array and its size. The function iterates through the array elements, summing the reciprocals of the non-zero elements. If a zero element is encountered, the function immediately returns a harmonic average of zero. Otherwise, it divides the total count of valid elements by the sum of their reciprocals to produce the final harmonic average.", "type": "FUNCTION", "name": "ARRAY_HAV", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "Pointer to the array of real numbers for which the harmonic average is to be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating the number of elements to consider for the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The harmonic average of the array elements.", "fields": []}}
{"title": "Convert MS to BFT", "description": "This function converts a value from MS (Meteo Standard) to BFT (Beaufort scale) using a specific mathematical transformation. The transformation involves applying an exponential function to the input MS value, scaled by a constant factor, and then converting the result to an integer.", "type": "FUNCTION", "name": "MS_TO_BFT", "input": [{"name": "MS", "type": "REAL", "description": "The input value in Meteo Standard (MS) that needs to be converted to Beaufort scale."}], "output": [{"name": "BFT", "type": "INT", "description": "The resulting integer value in the Beaufort scale corresponding to the input MS value."}], "in/out": [], "return_value": {"type": "INT", "description": "The integer result of the conversion from MS to BFT.", "fields": []}}
{"title": "Reflect Function", "description": "This function calculates a reflection of a given DWORD value by shifting its bits and combines it with the original value using bitwise operations.", "type": "FUNCTION", "name": "REFLECT", "input": [{"name": "D", "type": "DWORD", "description": "The DWORD value to be reflected."}, {"name": "L", "type": "INT", "description": "The length defining how many bits to reflect from the DWORD value."}], "output": [{"name": "REFLECT", "type": "DWORD", "description": "The resulting DWORD value after the reflection operation."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value from the reflection process."}}
{"title": "Get Hour from TIME_OF_DAY", "description": "This function calculates the hour from a given input of type TIME_OF_DAY by converting it to DWORD format and then deriving the hour value in INT format.", "type": "FUNCTION", "name": "HOUR", "input": [{"name": "itod", "type": "TIME_OF_DAY", "description": "The input variable representing the time of day from which the hour will be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The hour value extracted from the input TIME_OF_DAY, represented as an integer."}}
{"title": "DCF77 Time Receiver Function Block", "description": "This function block processes DCF77 time signals and updates the real-time clock (RTC) with data obtained from the DCF77 signal. It handles signal reception, time decoding, and generates output signals indicating the current date and time. The block manages synchronization, daylight saving time adjustments, and error conditions that may arise from invalid signals.", "type": "FUNCTION_BLOCK", "name": "DCF77", "input": [{"name": "REC", "type": "BOOL", "description": "Reception signal indicating whether a DCF77 signal is currently being received."}, {"name": "SET", "type": "BOOL", "description": "Trigger signal to set the RTC with the received time information."}, {"name": "SDT", "type": "DT", "description": "Initial date and time to set the RTC on first power up."}, {"name": "DSI", "type": "BOOL", "description": "Daylight Saving Time indication to control DST adjustments."}, {"name": "SYNC_TIMEOUT", "type": "TIME", "description": "Timeout duration to determine the validity of the synchronization signal.", "fields": []}, {"name": "TIME_OFFSET", "type": "INT", "description": "Offset for time zone adjustments relative to UTC.", "fields": []}, {"name": "DST_EN", "type": "BOOL", "description": "Enable signal for daylight saving time adjustments.", "fields": []}], "output": [{"name": "TP", "type": "BOOL", "description": "Trigger output that indicates whether the time processing is active."}, {"name": "DS", "type": "BOOL", "description": "Output signal indicating whether daylight saving time is currently active."}, {"name": "WDAY", "type": "INT", "description": "Output representing the day of the week as an integer."}, {"name": "ERROR", "type": "BOOL", "description": "Error flag indicating if an error occurred during the decoding process."}, {"name": "RTC", "type": "DT", "description": "Real-time clock output that reflects the current date and time based on the DCF77 signal."}, {"name": "RTC1", "type": "DT", "description": "Secondary RTC output, adjusted based on time zone and daylight saving time settings."}, {"name": "MSEC", "type": "INT", "description": "Milliseconds elapsed since the last synchronization."}, {"name": "SYNC", "type": "BOOL", "description": "Signal indicating successful synchronization with the DCF77 signal."}], "in/out": [], "return_value": {}}
{"title": "Convert Month Integer to String Representation", "description": "The function should convert a given month integer (1-12) into its corresponding string representation based on the specified language settings. It also needs to handle language selection and ensure that the month integer provided is within the valid range. This function should help in localizing month names according to different languages.", "type": "FUNCTION", "name": "MONTH_TO_STRING", "input": [{"name": "MTH", "type": "INT", "description": "The month integer to convert, should be between 1 and 12."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language setting for the month name. A value less than or equal to 0 indicates the default language."}, {"name": "LX", "type": "INT", "description": "An integer indicating the format of the month name. 0 for the default length, 3 for a three-letter abbreviation."}], "output": [{"name": "MONTH_TO_STRING", "type": "string", "description": "The string representation of the month in the specified language and format."}], "in/out": [], "return_value": {"type": "string", "description": "The output month name as a string.", "fields": []}}
{"title": "Calculate the Hypotenuse", "description": "This function computes the length of the hypotenuse of a right triangle given the lengths of the two other sides, X and Y, using the Pythagorean theorem. The result is calculated as the square root of the sum of the squares of the input sides.", "type": "FUNCTION", "name": "HYPOT", "input": [{"name": "X", "type": "REAL", "description": "The length of one side of the right triangle."}, {"name": "Y", "type": "REAL", "description": "The length of the other side of the right triangle."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated length of the hypotenuse."}}
{"title": "Time Calculation Function Block", "description": "This function block calculates the elapsed time in seconds from the system timer and updates the output variable TC accordingly. The first invocation initializes the block and sets TC to zero, while subsequent calls calculate the time difference from the last recorded timer value.", "type": "FUNCTION_BLOCK", "name": "TC_S", "input": [], "output": [{"name": "TC", "type": "REAL", "description": "The elapsed time in seconds since the last invocation of the block."}], "in/out": [], "return_value": null}
{"title": "Scale Function Implementation", "description": "This function, SCALE_B4, scales four input bytes (in1, in2, in3, in4) based on the provided minimum and maximum values for each input, a scaling factor K, and an offset O. The final output is a real number that results from the scaling calculation.", "type": "FUNCTION", "name": "SCALE_B4", "input": [{"name": "in1", "type": "BYTE", "description": "First input value to be scaled."}, {"name": "in2", "type": "BYTE", "description": "Second input value to be scaled."}, {"name": "in3", "type": "BYTE", "description": "Third input value to be scaled."}, {"name": "in4", "type": "BYTE", "description": "Fourth input value to be scaled."}, {"name": "K", "type": "REAL", "description": "Scaling factor to adjust the output."}, {"name": "O", "type": "REAL", "description": "Offset value added to the final result."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input. Defaults to 1000.0."}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input. Defaults to 1000.0."}, {"name": "in3_min", "type": "REAL", "description": "Minimum value for the third input."}, {"name": "in3_max", "type": "REAL", "description": "Maximum value for the third input. Defaults to 1000.0."}, {"name": "in4_min", "type": "REAL", "description": "Minimum value for the fourth input."}, {"name": "in4_max", "type": "REAL", "description": "Maximum value for the fourth input. Defaults to 1000.0."}], "output": [{"name": "SCALE_B4", "type": "REAL", "description": "The scaled output value based on the provided inputs, minimums, maximums, scaling factor, and offset."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final scaled and offset output value.", "fields": []}}
{"title": "Convert Meters per Second to Kilometers per Hour", "description": "This function converts a velocity given in meters per second (ms) to kilometers per hour (km/h). The conversion is achieved by multiplying the input value by 3.6.", "type": "FUNCTION", "name": "MS_TO_KMH", "input": [{"name": "ms", "type": "REAL", "description": "The velocity in meters per second."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted velocity in kilometers per hour."}}
{"title": "Convert Degrees to Direction", "description": "This function converts a given degree value to a corresponding cardinal direction based on additional input parameters. It considers a shift operation for performance and adapts the calculation depending on the value of 'N'. The output string represents the direction (e.g., North, East) derived from the degree input.", "type": "FUNCTION", "name": "DEG_TO_DIR", "input": [{"name": "DEG", "type": "INT", "description": "The degree input to be converted to a direction."}, {"name": "N", "type": "INT", "description": "An additional input variable that influences the calculation of the direction."}, {"name": "L", "type": "INT", "description": "Length input that determines the language used for direction output."}], "output": [{"name": "DEG_TO_DIR", "type": "string", "description": "The resulting string that represents the direction based on the degree input."}], "in/out": [], "return_value": {"type": "string", "description": "Returns the direction corresponding to the given degree input."}}
{"title": "Vector Parallelism Check", "description": "This function checks if two 3-dimensional vectors A and B are parallel by determining if the cross product between them is a zero vector.", "type": "FUNCTION", "name": "V3_PAR", "input": [{"name": "A", "type": "Vector_3", "description": "The first 3-dimensional vector to check for parallelism."}, {"name": "B", "type": "Vector_3", "description": "The second 3-dimensional vector to check for parallelism."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the vectors A and B are parallel, otherwise returns FALSE."}}
{"title": "Calculate the Arctangent of Two Variables", "description": "This function computes the arctangent (angle) given two parameters Y and X, which correspond to the coordinates on a Cartesian plane. The function applies different mathematical rules based on the values of X and Y to determine the correct angle in radians.", "type": "FUNCTION", "name": "ATAN2", "input": [{"name": "Y", "type": "REAL", "description": "The Y-coordinate used to calculate the arctangent."}, {"name": "X", "type": "REAL", "description": "The X-coordinate used to calculate the arctangent."}], "output": [{"name": "ATAN2", "type": "REAL", "description": "The resulting angle in radians based on the input coordinates Y and X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians computed from the given Y and X coordinates."}}
{"title": "Offset Calculation Function", "description": "This function computes an offset value based on several boolean inputs that determine which offset to apply to the input value X. If the boolean input D is true, the function returns a default offset value; otherwise, it starts with X and adds the appropriate offset based on O1, O2, O3, or O4 flags.", "type": "FUNCTION", "name": "OFFSET2", "input": [{"name": "X", "type": "REAL", "description": "The primary input value that may receive an offset."}, {"name": "O1", "type": "BOOL", "description": "Flag indicating whether to add Offset_1."}, {"name": "O2", "type": "BOOL", "description": "Flag indicating whether to add Offset_2."}, {"name": "O3", "type": "BOOL", "description": "Flag indicating whether to add Offset_3."}, {"name": "O4", "type": "BOOL", "description": "Flag indicating whether to add Offset_4."}, {"name": "D", "type": "BOOL", "description": "Flag that determines if the default value should be returned instead of the adjusted X."}, {"name": "Offset_1", "type": "REAL", "description": "Value to be added if O1 is true."}, {"name": "Offset_2", "type": "REAL", "description": "Value to be added if O2 is true."}, {"name": "Offset_3", "type": "REAL", "description": "Value to be added if O3 is true."}, {"name": "Offset_4", "type": "REAL", "description": "Value to be added if O4 is true."}, {"name": "default", "type": "REAL", "description": "The default value returned if D is true."}], "output": [{"name": "OFFSET2", "type": "REAL", "description": "The calculated offset value which is either the adjusted X or the default value."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the final computed offset value.", "fields": []}}
{"title": "Scale Input Values with Constants", "description": "This function calculates a weighted sum of up to eight boolean inputs, scaled by a constant factor and offset, within specified minimum and maximum constraints for each input. The resulting value is returned as a real number.", "type": "FUNCTION", "name": "SCALE_X8", "input": [{"name": "in1", "type": "BOOL", "description": "The first boolean input that determines whether the first minimum or maximum value is considered."}, {"name": "in2", "type": "BOOL", "description": "The second boolean input that determines whether the second minimum or maximum value is considered."}, {"name": "in3", "type": "BOOL", "description": "The third boolean input that determines whether the third minimum or maximum value is considered."}, {"name": "in4", "type": "BOOL", "description": "The fourth boolean input that determines whether the fourth minimum or maximum value is considered."}, {"name": "in5", "type": "BOOL", "description": "The fifth boolean input that determines whether the fifth minimum or maximum value is considered."}, {"name": "in6", "type": "BOOL", "description": "The sixth boolean input that determines whether the sixth minimum or maximum value is considered."}, {"name": "in7", "type": "BOOL", "description": "The seventh boolean input that determines whether the seventh minimum or maximum value is considered."}, {"name": "in8", "type": "BOOL", "description": "The eighth boolean input that determines whether the eighth minimum or maximum value is considered."}, {"name": "K", "type": "REAL", "description": "The scaling factor to be applied to the sum of the selected minimum and maximum values."}, {"name": "O", "type": "REAL", "description": "The offset to be added to the scaled sum."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input, default is 1000.0."}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input, default is 1000.0."}, {"name": "in3_min", "type": "REAL", "description": "Minimum value for the third input."}, {"name": "in3_max", "type": "REAL", "description": "Maximum value for the third input, default is 1000.0."}, {"name": "in4_min", "type": "REAL", "description": "Minimum value for the fourth input."}, {"name": "in4_max", "type": "REAL", "description": "Maximum value for the fourth input, default is 1000.0."}, {"name": "in5_min", "type": "REAL", "description": "Minimum value for the fifth input."}, {"name": "in5_max", "type": "REAL", "description": "Maximum value for the fifth input, default is 1000.0."}, {"name": "in6_min", "type": "REAL", "description": "Minimum value for the sixth input."}, {"name": "in6_max", "type": "REAL", "description": "Maximum value for the sixth input, default is 1000.0."}, {"name": "in7_min", "type": "REAL", "description": "Minimum value for the seventh input."}, {"name": "in7_max", "type": "REAL", "description": "Maximum value for the seventh input, default is 1000.0."}, {"name": "in8_min", "type": "REAL", "description": "Minimum value for the eighth input."}, {"name": "in8_max", "type": "REAL", "description": "Maximum value for the eighth input, default is 1000.0."}], "output": [{"name": "SCALE_X8", "type": "REAL", "description": "The calculated scaled and offset sum of the selected input values."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the scaling operation based on the input parameters."}}
{"title": "J-K Flip-Flop Function Block", "description": "This function block implements a J-K flip-flop, which is a type of digital memory circuit. The flip-flop has inputs for setting, resetting, clocking, and the J and K conditions. When reset or set signals are activated, the output Q is determined accordingly. On the clock edge, Q changes based on the values of J and K.", "type": "FUNCTION_BLOCK", "name": "FF_JKE", "input": [{"name": "SET", "type": "BOOL", "description": "Input to set the flip-flop to high."}, {"name": "J", "type": "BOOL", "description": "Input that determines the next state of Q when activated."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal that synchronizes state changes."}, {"name": "K", "type": "BOOL", "description": "Input that determines the next state of Q when activated."}, {"name": "RST", "type": "BOOL", "description": "Input to reset the flip-flop to low."}], "output": [{"name": "Q", "type": "BOOL", "description": "Current state of the flip-flop output."}], "in/out": [], "return_value": null}
{"title": "8-Bit Storage Function Block", "description": "This function block enables the storage of up to 8 boolean values based on external inputs. It initializes and controls the storage of these values based on set, reset, and clear conditions.", "type": "FUNCTION_BLOCK", "name": "STORE_8", "input": [{"name": "Set", "type": "BOOL", "description": "A signal to enable setting the storage values."}, {"name": "D0", "type": "BOOL", "description": "Input for the first bit in the storage."}, {"name": "D1", "type": "BOOL", "description": "Input for the second bit in the storage."}, {"name": "D2", "type": "BOOL", "description": "Input for the third bit in the storage."}, {"name": "D3", "type": "BOOL", "description": "Input for the fourth bit in the storage."}, {"name": "D4", "type": "BOOL", "description": "Input for the fifth bit in the storage."}, {"name": "D5", "type": "BOOL", "description": "Input for the sixth bit in the storage."}, {"name": "D6", "type": "BOOL", "description": "Input for the seventh bit in the storage."}, {"name": "D7", "type": "BOOL", "description": "Input for the eighth bit in the storage."}, {"name": "Clr", "type": "BOOL", "description": "A signal to clear the stored values."}, {"name": "Rst", "type": "BOOL", "description": "A signal to reset the storage values."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for the first stored bit."}, {"name": "Q1", "type": "BOOL", "description": "Output for the second stored bit."}, {"name": "Q2", "type": "BOOL", "description": "Output for the third stored bit."}, {"name": "Q3", "type": "BOOL", "description": "Output for the fourth stored bit."}, {"name": "Q4", "type": "BOOL", "description": "Output for the fifth stored bit."}, {"name": "Q5", "type": "BOOL", "description": "Output for the sixth stored bit."}, {"name": "Q6", "type": "BOOL", "description": "Output for the seventh stored bit."}, {"name": "Q7", "type": "BOOL", "description": "Output for the eighth stored bit."}], "in/out": [], "return_value": null}
{"title": "Calendar Calculation Function Block", "description": "This function block is designed to calculate local time and calendar-related data based on UTC input. It updates the local date, time of day, sunset, sunrise, and other related events depending on the provided holiday data and location information.", "type": "FUNCTION_BLOCK", "name": "CALENDAR_CALC", "input": [{"name": "SPE", "type": "BOOL", "description": "A boolean flag that enables the calculation of the sun's position every 25 seconds if set to TRUE."}, {"name": "H", "type": "REAL", "description": "Twilight offset parameter for sunrise/sunset calculations, defaults to -0.8333."}], "output": [{"name": "XCAL", "type": "CALENDAR", "description": "The calendar data structure that contains local date, time, holidays, and sun information."}, {"name": "HOLIDAYS", "type": "ARRAY[0..29] OF HOLIDAY_DATA", "description": "An array of holiday data to be used for local holiday calculations."}], "in/out": [], "return_value": null}
{"title": "Real-Time Clock Function Block (RTC_2)", "description": "This function block RTC_2 is responsible for managing the real-time clock, adjusting for daylight savings time, and calculating the local time based on a provided offset in minutes. It takes various input parameters related to time settings and outputs the adjusted local time along with other status indicators.", "type": "FUNCTION_BLOCK", "name": "RTC_2", "input": [{"name": "SET", "type": "BOOL", "description": "Boolean value to set the RTC."}, {"name": "SDT", "type": "DT", "description": "Start date and time for the RTC."}, {"name": "SMS", "type": "INT", "description": "Milliseconds to set for the RTC."}, {"name": "DEN", "type": "BOOL", "description": "Boolean value indicating if daylight savings time adjustment is needed."}, {"name": "OFS", "type": "INT", "description": "Offset in minutes to adjust the local time."}], "output": [{"name": "UDT", "type": "DT", "description": "Updated date and time from the RTC."}, {"name": "LOCAL_DT", "type": "DT", "description": "Calculated local date and time after applying offset."}, {"name": "DSO", "type": "BOOL", "description": "Boolean value indicating if daylight savings time is in effect."}, {"name": "XMS", "type": "INT", "description": "Milliseconds value derived from the RTC."}], "in/out": [], "return_value": {}}
{"title": "Check Uppercase String", "description": "This function determines whether all characters in a given string are uppercase. It uses a pointer to traverse each character in the string and checks if each character is uppercase. If any character is not uppercase, the function returns FALSE. If the string is empty, it returns FALSE as well.", "type": "FUNCTION", "name": "IS_UPPER", "input": [{"name": "str", "type": "STRING", "description": "The input string to be checked for uppercase characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "True if all characters in the string are uppercase, false otherwise."}}
{"title": "Decimal to DWORD Conversion Function", "description": "This function converts a decimal string representation into a DWORD (Double Word) numeric format. The function reads each character of the input string, validates if it represents a decimal digit, and accumulates its value to produce the final DWORD result.", "type": "FUNCTION", "name": "DEC_TO_DWORD", "input": [{"name": "DEC", "type": "STRING[20]", "description": "A string of up to 20 characters representing a decimal number."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value obtained from the decimal string conversion."}}
{"title": "Multi Input Selector Function", "description": "This function, MULTI_IN, processes multiple input values (in_1, in_2, in_3) based on a specified mode, returning a real number. The function determines which inputs to consider based on their comparison to defined minimum and maximum values, and applies specific arithmetic operations based on the selection mode. It also allows for a default value in circumstances where inputs do not meet the criteria.", "type": "FUNCTION", "name": "MULTI_IN", "input": [{"name": "in_1", "type": "REAL", "description": "The first input value."}, {"name": "in_2", "type": "REAL", "description": "The second input value."}, {"name": "in_3", "type": "REAL", "description": "The third input value."}, {"name": "default", "type": "REAL", "description": "The default value used when no inputs meet the criteria."}, {"name": "in_min", "type": "REAL", "description": "The minimum threshold value for validation of inputs."}, {"name": "in_max", "type": "REAL", "description": "The maximum threshold value for validation of inputs."}, {"name": "mode", "type": "BYTE", "description": "The mode which determines the operational behavior of the function."}], "output": [{"name": "MULTI_IN", "type": "REAL", "description": "The computed result based on the selected inputs and mode."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting value after processing inputs according to the selected mode."}}
{"title": "Manual Control Function Block", "description": "This function block implements a manual control mechanism that takes various input signals to control the output state and status. It handles input signals for manual control, set, reset, and immediate input status, providing appropriate outputs based on the state of these signals.", "type": "FUNCTION_BLOCK", "name": "MANUAL_1", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal that determines the output state when manual control is not active."}, {"name": "MAN", "type": "BOOL", "description": "Manual control signal to enable manual operation."}, {"name": "M_I", "type": "BOOL", "description": "Immediate input signal that defines the output state when manual control is inactive."}, {"name": "SET", "type": "BOOL", "description": "Set signal to transition the output state to TRUE."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to transition the output state to FALSE."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal representing the current state controlled by the function block."}, {"name": "STATUS", "type": "BYTE", "description": "Status code indicating the current state of the function block."}], "in/out": [], "return_value": null}
{"title": "List Length Calculation", "description": "This function calculates the number of elements in a list defined by a separator character. The input list comes as a string, and the function counts how many times the separator appears in it, returning the total count as the length of the list.", "type": "FUNCTION", "name": "LIST_LEN", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator byte used to mark the boundaries between elements in the list."}], "output": [{"name": "LIST_LEN", "type": "INT", "description": "The total number of elements in the list as determined by counting the occurrences of the separator."}], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The string representation of the list where elements are separated by the specified separator."}], "return_value": {"type": "INT", "description": "The return value indicates the count of elements in the list based on the separator provided."}}
{"title": "Integration Function Block", "description": "This function block performs numerical integration based on the input value and a factor. It updates the output based on a simple trapezoidal rule integration method and incorporates system time.", "type": "FUNCTION_BLOCK", "name": "INTEGRATE", "input": [{"name": "E", "type": "BOOL", "description": "Enable flag to execute the integration calculation. Default is TRUE."}, {"name": "X", "type": "REAL", "description": "The current value to be integrated."}, {"name": "K", "type": "REAL", "description": "Scaling factor for the integration calculation. Default value is 1.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The resulting integrated value."}], "in/out": [], "return_value": null}
{"title": "FT_PT2 Function Block", "description": "The FT_PT2 function block performs a specific mathematical integration operation based on the input parameters. It initializes its internal state, calculates values based on a given time duration, and returns the computed output. The function block can handle parameters for input value, time, damping, and a constant gain factor.", "type": "FUNCTION_BLOCK", "name": "FT_PT2", "input": [{"name": "in", "type": "REAL", "description": "The input signal value to be processed by the function block."}, {"name": "T", "type": "TIME", "description": "The time duration for the integration process."}, {"name": "D", "type": "REAL", "description": "The damping factor used in the integration calculation."}, {"name": "K", "type": "REAL", "description": "The gain constant for scaling the input, with a default value of 1.0."}], "output": [{"name": "out", "type": "REAL", "description": "The output result after processing the input through the function block."}], "in/out": [], "return_value": null}
{"title": "Random Number Generation", "description": "This function generates a random number based on a given input 'X' and a precision defined by 'N'. If 'X' is zero, the function returns zero. Otherwise, it scales 'X' by a calculated factor 'M' to produce a more refined output.", "type": "FUNCTION", "name": "RND", "input": [{"name": "X", "type": "REAL", "description": "The input value for which a random number is to be generated."}, {"name": "N", "type": "INT", "description": "The precision level that determines how finely the random number is generated."}], "output": [{"name": "RND", "type": "REAL", "description": "The randomly generated number based on input 'X' and precision 'N'."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the random number generation, which can be zero or a scaled version of 'X'."}}
{"title": "GEN_RDT Function Block", "description": "The GEN_RDT function block is designed to manage a timing control mechanism, generating a cyclic output based on specified minimum and maximum time intervals. It utilizes a TON timer for timing generation and a TOF timer for output control. The block enables timed outputs and includes parameters for configuring timing durations.", "type": "FUNCTION_BLOCK", "name": "GEN_RDT", "input": [{"name": "Enable", "type": "BOOL", "description": "A boolean to enable or disable the function block operation."}, {"name": "Min_Time_ms", "type": "TIME", "description": "The minimum time interval (Taktzeit) for the output generation."}, {"name": "Max_Time_ms", "type": "TIME", "description": "The maximum time interval (Taktzeit) for the output generation."}, {"name": "TP_Q", "type": "TIME", "description": "The duration for which the output should remain in the TRUE state."}], "output": [{"name": "xQ", "type": "BOOL", "description": "A boolean output that indicates the state of the output based on the timing conditions."}], "in/out": [], "return_value": null}
{"title": "Conversion of Individual Boolean Values to a Single Byte", "description": "This function takes eight individual boolean inputs (B0 to B7) and converts them into a single byte value. The boolean inputs represent bits in the byte, with B0 being the least significant bit (LSB) and B7 being the most significant bit (MSB). The function combines these boolean values into a byte by shifting and logical OR operations.", "type": "FUNCTION", "name": "BYTE_OF_BIT", "input": [{"name": "B0", "type": "BOOL", "description": "The least significant bit of the byte."}, {"name": "B1", "type": "BOOL", "description": "The second least significant bit of the byte."}, {"name": "B2", "type": "BOOL", "description": "The third least significant bit of the byte."}, {"name": "B3", "type": "BOOL", "description": "The fourth bit of the byte."}, {"name": "B4", "type": "BOOL", "description": "The fifth bit of the byte."}, {"name": "B5", "type": "BOOL", "description": "The sixth bit of the byte."}, {"name": "B6", "type": "BOOL", "description": "The seventh bit of the byte."}, {"name": "B7", "type": "BOOL", "description": "The most significant bit of the byte."}], "output": [{"name": "Byte_of_bit", "type": "BYTE", "description": "The resulting byte composed of the input boolean values."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The final byte representation of the boolean inputs.", "fields": []}}
{"title": "Control Set 1 Configuration", "description": "This FUNCTION_BLOCK is designed to configure control parameters for PI and PID controllers based on the given gains and time constants. It calculates proportional, integral, and derivative gains based on the user-defined input parameters and the selected control mode.", "type": "FUNCTION_BLOCK", "name": "CONTROL_SET1", "input": [{"name": "Kt", "type": "REAL", "description": "The gain factor that affects the control outputs."}, {"name": "Tt", "type": "REAL", "description": "The time constant used for calculating integral and derivative parameters."}, {"name": "PI", "type": "BOOL", "description": "Boolean flag to indicate if a PI controller is used."}, {"name": "PID", "type": "BOOL", "description": "Boolean flag to indicate if a PID controller is used."}, {"name": "P_K", "type": "REAL", "description": "Proportional gain for the basic control (default = 0.5)."}, {"name": "PI_K", "type": "REAL", "description": "Proportional gain for the PI controller (default = 0.45)."}, {"name": "PI_TN", "type": "REAL", "description": "Time constant for the integral part of the PI controller (default = 0.83)."}, {"name": "PID_K", "type": "REAL", "description": "Proportional gain for the PID controller (default = 0.6)."}, {"name": "PID_TN", "type": "REAL", "description": "Time constant for the integral part of the PID controller (default = 0.5)."}, {"name": "PID_TV", "type": "REAL", "description": "Time constant for the derivative part of the PID controller (default = 0.125)."}], "output": [{"name": "KP", "type": "REAL", "description": "Calculated proportional gain based on the selected controller."}, {"name": "TN", "type": "REAL", "description": "Calculated time constant for the integral component."}, {"name": "TV", "type": "REAL", "description": "Calculated time constant for the derivative component."}, {"name": "KI", "type": "REAL", "description": "Calculated integral gain based on KP and TN."}, {"name": "KD", "type": "REAL", "description": "Calculated derivative gain based on KP and TV."}], "in/out": [], "return_value": null}
{"title": "FILL Function", "description": "This function generates a string based on a given byte value and an integer limit. It converts the byte into a string representation and appends it to the output string repeatedly based on the provided limit.", "type": "FUNCTION", "name": "FILL", "input": [{"name": "C", "type": "BYTE", "description": "A byte value to be converted to a string."}, {"name": "L", "type": "INT", "description": "An integer specifying how many times the character should be appended, limited to a maximum of 80 characters."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The resulting concatenated string after processing the input byte and limit."}}
{"title": "Calculate Array Trend", "description": "This function computes the trend of a given array of real numbers by evaluating the sum of its elements based on the specified size. It calculates the sum of the first half of the array and conditionally adjusts the sum based on whether the size is even or odd before returning the average trend value.", "type": "FUNCTION", "name": "ARRAY_TREND", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to the array of real numbers whose trend needs to be calculated."}, {"name": "size", "type": "UINT", "description": "The total number of elements in the array."}], "output": [{"name": "ARRAY_TREND", "type": "REAL", "description": "The calculated trend value of the array, which is the average based on the input size."}], "in/out": [], "return_value": {"type": "REAL", "description": "Average trend of the array values.", "fields": []}}
{"title": "Cauchy Function Calculation", "description": "This function computes the value of the Cauchy distribution for given parameters. It takes in three real numbers: X, T, and U, and returns the computed Cauchy value as a real number.", "type": "FUNCTION", "name": "CAUCHY", "input": [{"name": "X", "type": "REAL", "description": "The first parameter of the Cauchy function."}, {"name": "T", "type": "REAL", "description": "The second parameter, which alters the position of the distribution."}, {"name": "U", "type": "REAL", "description": "The scale parameter for the Cauchy distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value of the Cauchy function based on the provided input parameters."}}
{"title": "Add Item to List", "description": "This function adds an item to a list by first converting a separation character to a string and then concatenating it with the input string. The function checks if adding the new string will exceed the defined maximum length of the list. If it does, it returns false; otherwise, it appends the item to the list and returns true.", "type": "FUNCTION", "name": "LIST_ADD", "input": [{"name": "SEP", "type": "BYTE", "description": "The separation character that will be converted to a string and prefixed to the input string."}, {"name": "INS", "type": "STRING(LIST_LENGTH)", "description": "The input string that is to be added to the list."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The list to which the input string will be added. It is modified in place."}], "return_value": {"type": "BOOL", "description": "A boolean value indicating the success of the addition operation to the list.", "fields": []}}
{"title": "Check Uppercase Character", "description": "This function checks whether the provided byte value corresponds to an uppercase ASCII character. If the system is configured to recognize extended ASCII characters, it also allows for certain values that fall outside the standard ASCII range.", "type": "FUNCTION", "name": "ISC_UPPER", "input": [{"name": "IN", "type": "BYTE", "description": "The byte value to be checked for uppercase character status."}], "output": [{"name": "ISC_UPPER", "type": "BOOL", "description": "Returns TRUE if the input byte corresponds to an uppercase ASCII character; otherwise, FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The result indicating whether the input byte is an uppercase letter, based on ASCII definitions.", "fields": []}}
{"title": "TP_1 Timer Function Block", "description": "This function block implements a timer circuit. It triggers an output Q to TRUE for a specified duration (PT) when the input IN is TRUE, and it resets Q to FALSE when RST is activated or the duration has elapsed. The state of the input IN is also stored to prevent retriggering during the timing period.", "type": "FUNCTION_BLOCK", "name": "TP_1", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input that starts the timing operation when set to TRUE."}, {"name": "PT", "type": "TIME", "description": "Duration for which the output Q remains TRUE after IN is activated."}, {"name": "RST", "type": "BOOL", "description": "Boolean input that resets the output Q to FALSE when set to TRUE."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean output that indicates the status of the timer; TRUE when timing is active, otherwise FALSE."}], "in/out": [], "return_value": null}
{"title": "Vector 3 Reversal Function", "description": "This function takes a 3D vector as input and returns a new vector that is the negation of the input vector. Each component of the vector is changed to its opposite sign.", "type": "FUNCTION", "name": "V3_REV", "input": [{"name": "A", "type": "Vector_3", "description": "The input vector whose components are to be reversed."}], "output": [], "in/out": [], "return_value": {"type": "vector_3", "description": "The output vector which is the negation of the input vector A.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the output vector, which is the negative of the X component of input vector A."}, {"name": "Y", "type": "REAL", "description": "The Y component of the output vector, which is the negative of the Y component of input vector A."}, {"name": "Z", "type": "REAL", "description": "The Z component of the output vector, which is the negative of the Z component of input vector A."}]}}
{"title": "Calculate Area of Triangle", "description": "This function calculates the area of a triangle based on two methods: either using the lengths of all three sides or using one side and the included angle. If the angle A is 0, the area is calculated using Heron's formula. Otherwise, it uses the formula with side lengths S1 and S2 and the included angle A.", "type": "FUNCTION", "name": "TRIANGLE_A", "input": [{"name": "S1", "type": "REAL", "description": "Length of the first side of the triangle."}, {"name": "A", "type": "REAL", "description": "Included angle in degrees. If A is 0, Heron's formula is used."}, {"name": "S2", "type": "REAL", "description": "Length of the second side of the triangle."}, {"name": "S3", "type": "REAL", "description": "Length of the third side of the triangle."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated area of the triangle.", "fields": []}}
{"title": "Boolean Logic Function Block", "description": "This function block takes two boolean inputs, D and A, and produces two boolean outputs, Q0 and Q1. The output Q0 is the result of a logical AND operation between input D and the negation of input A, while Q1 is the result of a logical AND operation between input D and input A.", "type": "FUNCTION_BLOCK", "name": "DEC_2", "input": [{"name": "D", "type": "BOOL", "description": "Boolean input that influences both outputs."}, {"name": "A", "type": "BOOL", "description": "Boolean input that determines the value of Q1 along with D."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Boolean output representing the result of D AND NOT A."}, {"name": "Q1", "type": "BOOL", "description": "Boolean output representing the result of D AND A."}], "in/out": [], "return_value": null}
{"title": "Buffer Uppercase Conversion", "description": "This function takes a pointer to an array of bytes and converts each byte to its uppercase equivalent. It iterates through the array up to a specified size and modifies the elements in place.", "type": "FUNCTION", "name": "_BUFFER_UPPERCASE", "input": [{"name": "PT", "type": "POINTER TO ARRAY [0..32000] OF BYTE", "description": "A pointer to an array of bytes that will be converted to uppercase."}, {"name": "SIZE", "type": "INT", "description": "The number of bytes in the array to be converted."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the uppercase conversion was successful.", "fields": []}}
{"title": "Complex Logarithm Calculation", "description": "This function computes the complex logarithm of a given complex number. It takes a complex number as input and returns its logarithmic representation in terms of its real and imaginary parts.", "type": "FUNCTION", "name": "CLOG", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number represented by its real and imaginary parts."}], "output": [], "in/out": [], "return_value": {"type": "COMPLEX", "description": "The complex logarithm of the input number, represented in its real and imaginary parts.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex logarithm."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex logarithm."}]}}
{"title": "Gaussian Function", "description": "This function calculates the value of the Gaussian (normal distribution) function based on the input parameters X, U, and SI. It computes the exponential component and normalizes it using the standard deviation.", "type": "FUNCTION", "name": "GAUSS", "input": [{"name": "X", "type": "REAL", "description": "The value at which to evaluate the Gaussian function."}, {"name": "U", "type": "REAL", "description": "The mean (average) of the distribution."}, {"name": "SI", "type": "REAL", "description": "The standard deviation of the distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value of the Gaussian function at the specified point X."}}
{"title": "Scale a Value", "description": "This function scales a given value X from an input range defined by I_LO and I_HI to an output range defined by O_LO and O_HI. The function accounts for cases where the input range is zero (I_LO = I_HI) by returning O_LO. If the input value X is outside the defined input range, it is limited to the nearest boundary using the LIMIT function.", "type": "FUNCTION", "name": "SCALE_R", "input": [{"name": "X", "type": "REAL", "description": "The value to be scaled."}, {"name": "I_LO", "type": "REAL", "description": "The lower bound of the input range."}, {"name": "I_HI", "type": "REAL", "description": "The upper bound of the input range."}, {"name": "O_LO", "type": "REAL", "description": "The lower bound of the output range."}, {"name": "O_HI", "type": "REAL", "description": "The upper bound of the output range."}], "output": [{"name": "SCALE_R", "type": "REAL", "description": "The scaled output value corresponding to the input value X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final scaled value based on the input parameters.", "fields": []}}
{"title": "Difference Check Function", "description": "This function checks if the absolute difference between two real number inputs exceeds a specified threshold. It returns a boolean value indicating the result of the comparison.", "type": "FUNCTION", "name": "DIFFER", "input": [{"name": "in1", "type": "REAL", "description": "The first real number input for the difference calculation."}, {"name": "in2", "type": "REAL", "description": "The second real number input for the difference calculation."}, {"name": "X", "type": "REAL", "description": "The threshold value. The function checks if the absolute difference exceeds this value."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the absolute difference between in1 and in2 is greater than X; otherwise, returns FALSE."}}
{"title": "2-to-1 Multiplexer Function", "description": "This function implements a 2-to-1 multiplexer. It takes two data inputs and a single selection input to output one of the two data inputs based on the selection input's value.", "type": "FUNCTION", "name": "MUX_2", "input": [{"name": "D0", "type": "BOOL", "description": "The first data input to the multiplexer."}, {"name": "D1", "type": "BOOL", "description": "The second data input to the multiplexer."}, {"name": "A0", "type": "BOOL", "description": "The selection input that determines which data input to output."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The output of the multiplexer, which is either D0 or D1 based on the value of A0."}}
{"title": "Linear Function Calculation", "description": "This function calculates the linear equation value based on the input parameters, representing a mathematical function of the form y = Ax + B.", "type": "FUNCTION", "name": "F_LIN", "input": [{"name": "X", "type": "REAL", "description": "The independent variable for the linear equation."}, {"name": "A", "type": "REAL", "description": "The coefficient representing the slope of the linear function."}, {"name": "B", "type": "REAL", "description": "The constant term that represents the y-intercept of the linear function."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the linear function calculation, which is the value of A * X + B."}}
{"title": "Square Wave Generator", "description": "This function block generates a square wave signal based on the specified input time period. The output toggles between TRUE and FALSE based on the elapsed time, producing a square wave signal at half the frequency determined by the input time.", "type": "FUNCTION_BLOCK", "name": "GEN_SQ", "input": [{"name": "PT", "type": "TIME", "description": "The period of the square wave signal, defining the time interval for toggling the output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal that represents the state of the square wave, toggling between TRUE and FALSE."}], "in/out": [], "return_value": null}
{"title": "Override Calculation Function", "description": "This function calculates an override value based on the input parameters. The override value is determined by comparing three input values and their corresponding enable flags. If a flag is enabled, the associated value is considered for the override. The function returns the highest absolute value among the inputs that have their enable flags set to true.", "type": "FUNCTION", "name": "OVERRIDE", "input": [{"name": "X1", "type": "REAL", "description": "The first input value used in the override calculation."}, {"name": "X2", "type": "REAL", "description": "The second input value used in the override calculation."}, {"name": "X3", "type": "REAL", "description": "The third input value used in the override calculation."}, {"name": "E1", "type": "BOOL", "description": "Enable flag for the first input value."}, {"name": "E2", "type": "BOOL", "description": "Enable flag for the second input value."}, {"name": "E3", "type": "BOOL", "description": "Enable flag for the third input value."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated override value based on the input parameters."}}
{"title": "PIN Code Verification", "description": "This function block verifies a PIN code entered by the user. It checks the entered byte against the expected PIN stored as a string and confirms if the correct sequence is entered, outputting a boolean result indicating success.", "type": "FUNCTION_BLOCK", "name": "PIN_CODE", "input": [{"name": "CB", "type": "BYTE", "description": "The byte value representing the current code input by the user."}, {"name": "E", "type": "BOOL", "description": "A boolean flag indicating whether the input verification should be processed."}, {"name": "PIN", "type": "STRING[8]", "description": "The PIN code string that the user needs to match, up to 8 characters long."}], "output": [{"name": "TP", "type": "BOOL", "description": "A boolean output indicating whether the proper PIN code has been detected (TRUE) or not (FALSE)."}], "in/out": [], "return_value": null}
{"title": "Check Date Period", "description": "This function determines whether a specified date (dx) falls within a given period defined by two other dates (d1 and d2). It takes into consideration the nuances of leap years and the transition across a new year.", "type": "FUNCTION", "name": "PERIOD", "input": [{"name": "d1", "type": "DATE", "description": "The start date of the period."}, {"name": "dx", "type": "DATE", "description": "The date to check if it falls within the period."}, {"name": "d2", "type": "DATE", "description": "The end date of the period."}], "output": [{"name": "PERIOD", "type": "BOOL", "description": "A boolean value indicating if the date dx is within the period defined by d1 and d2."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The result of whether dx is within the period between d1 and d2.", "fields": []}}
{"title": "Parsing Input Data and Generating Output Parameters", "description": "This FUNCTION_BLOCK named 'PARSET2' processes various input parameters related to a set of real numbers and time. It initializes a parameter set and adjusts its internal state based on the input conditions defined by thresholds (L1, L2, L3) to produce multiple output parameters (P1, P2, P3, P4). The goal is to correctly calculate and assign values to the output parameters based on these conditions.", "type": "FUNCTION_BLOCK", "name": "PARSET2", "input": [{"name": "X", "type": "REAL", "description": "Input variable representing a real number."}, {"name": "X01", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X02", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X03", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X04", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X11", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X12", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X13", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X14", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X21", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X22", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X23", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X24", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X31", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X32", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X33", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X34", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "L1", "type": "REAL", "description": "Threshold value for condition checking."}, {"name": "L2", "type": "REAL", "description": "Threshold value for condition checking."}, {"name": "L3", "type": "REAL", "description": "Threshold value for condition checking."}, {"name": "TC", "type": "TIME", "description": "Time parameter used for initialization of parameter set."}], "output": [{"name": "P1", "type": "REAL", "description": "Output variable representing the first calculated parameter."}, {"name": "P2", "type": "REAL", "description": "Output variable representing the second calculated parameter."}, {"name": "P3", "type": "REAL", "description": "Output variable representing the third calculated parameter."}, {"name": "P4", "type": "REAL", "description": "Output variable representing the fourth calculated parameter."}], "in/out": [], "return_value": null}
{"title": "Pulse Generator Function Block", "description": "This function block generates a pulse signal based on time parameters and an enable input. When enabled, it alternates the output based on the specified pulse time (PTL) and hold time (PTH). The function block should reset the output to false when the enable input (ENQ) is not true.", "type": "FUNCTION_BLOCK", "name": "GEN_PULSE", "input": [{"name": "ENQ", "type": "BOOL", "description": "Enable input for the pulse generator, should be set to TRUE to generate pulses."}, {"name": "PTH", "type": "TIME", "description": "Time duration for which the output should be held in the 'high' state."}, {"name": "PTL", "type": "TIME", "description": "Time duration for which the output should be in the 'low' state before switching back to 'high'."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output pulse signal, toggles between TRUE and FALSE based on the elapsed time."}], "in/out": [], "return_value": null}
{"title": "Celsius to Kelvin Conversion", "description": "This function converts a temperature value from Celsius to Kelvin. The input is the temperature in Celsius, and the function subtracts the physical temperature constant T0 to compute the result in Kelvin.", "type": "FUNCTION", "name": "C_TO_K", "input": [{"name": "Celsius", "type": "REAL", "description": "The temperature in degrees Celsius that needs to be converted to Kelvin."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in Kelvin, calculated by adjusting the Celsius input.", "fields": []}}
{"title": "Calculate Array Variance", "description": "This function calculates the variance of a given array of real numbers. It first computes the arithmetic average of the array elements and then uses that average to compute the variance.", "type": "FUNCTION", "name": "ARRAY_VAR", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to an array of real numbers whose variance will be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating the number of elements present within the array."}], "output": [{"name": "ARRAY_VAR", "type": "REAL", "description": "The calculated variance of the real numbers in the array."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the computed variance of the array of real numbers."}}
{"title": "Pulse Width Modulation Generator", "description": "This function block generates a pulse width modulation (PWM) signal based on specified high and low timing values. It allows for selection between two sets of timing values and provides outputs for the status of the PWM and the elapsed timing for high and low states.", "type": "FUNCTION_BLOCK", "name": "GEN_PW2", "input": [{"name": "ENQ", "type": "BOOL", "description": "Enable signal to start the timing operation."}, {"name": "TH1", "type": "TIME", "description": "Time duration for the high state in the first timing configuration."}, {"name": "TL1", "type": "TIME", "description": "Time duration for the low state in the first timing configuration."}, {"name": "TH2", "type": "TIME", "description": "Time duration for the high state in the second timing configuration."}, {"name": "TL2", "type": "TIME", "description": "Time duration for the low state in the second timing configuration."}, {"name": "TS", "type": "BOOL", "description": "Selects between the first or second timing configuration."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating the state of the PWM (TRUE for high, FALSE for low)."}, {"name": "TH", "type": "TIME", "description": "Elapsed time in the high state since the last transition."}, {"name": "TL", "type": "TIME", "description": "Elapsed time in the low state since the last transition."}], "in/out": [], "return_value": {}}
{"title": "Hysteresis Function Block", "description": "This function block implements a hysteresis control mechanism with two output boolean states (Q1 and Q2) based on input values and defined thresholds. The block performs checks against two threshold values, val1 and val2, adjusted by a hysteresis margin to determine and set the states of the outputs.", "type": "FUNCTION_BLOCK", "name": "HYST_3", "input": [{"name": "in", "type": "REAL", "description": "The input value which is compared against the threshold values."}, {"name": "hyst", "type": "REAL", "description": "The hysteresis value that defines the margin for threshold comparison."}, {"name": "val1", "type": "REAL", "description": "The first threshold value used in determining the output Q1."}, {"name": "val2", "type": "REAL", "description": "The second threshold value used in determining the output Q2."}], "output": [{"name": "Q1", "type": "BOOL", "description": "Output boolean value indicating the state of the first control based on comparisons with val1."}, {"name": "Q2", "type": "BOOL", "description": "Output boolean value indicating the state of the second control based on comparisons with val2."}], "in/out": [], "return_value": {}}
{"title": "Calculate Parity", "description": "This function calculates the parity of a given DWORD input. It determines whether the number of set bits (1s) in the binary representation of the input is even or odd, returning TRUE for odd parity and FALSE for even parity.", "type": "FUNCTION", "name": "PARITY", "input": [{"name": "in", "type": "DWORD", "description": "The DWORD input value for which the parity is to be calculated."}], "output": [{"name": "PARITY", "type": "BOOL", "description": "The result indicating the parity of the input value, TRUE if the number of set bits is odd, otherwise FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns the parity result of the input value.", "fields": []}}
{"title": "Time Conversion and Correction Function", "description": "This function calculates the time in a DWORD format while accommodating a time range of -24 days to +24 days. It ensures that the timer wraps around correctly and does not reset to 0 during overflow. A debug mode is included to modify the timer's value based on specific conditions.", "type": "FUNCTION", "name": "T_PLC_MS", "input": [{"name": "debug", "type": "BOOL", "description": "Flag to enable debug mode for detailed processing."}, {"name": "N", "type": "INT", "description": "Shift value used for adjusting the timer."}, {"name": "offset", "type": "DWORD", "description": "Additive offset to adjust the timer value."}], "output": [{"name": "T_PLC_MS", "type": "DWORD", "description": "Resulting timer value in DWORD format after conversion and correction."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Final timer value in DWORD format."}}
{"title": "Convert Process Time to Frequency", "description": "This function converts a given process time in TIME format to a frequency in REAL format by calculating the reciprocal multiplier of the time value.", "type": "FUNCTION", "name": "PT_TO_F", "input": [{"name": "PT", "type": "TIME", "description": "The input process time that needs to be converted to frequency."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The frequency value calculated from the process time.", "fields": []}}
{"title": "Matrix Function Block", "description": "This function block processes boolean input signals to generate a corresponding code based on the changes detected in input lines. It manages the state of the outputs based on the comparison of current input states and previous states, handling a release condition to reset the code when necessary.", "type": "FUNCTION_BLOCK", "name": "MATRIX", "input": [{"name": "x1", "type": "BOOL", "description": "First input boolean signal."}, {"name": "x2", "type": "BOOL", "description": "Second input boolean signal."}, {"name": "x3", "type": "BOOL", "description": "Third input boolean signal."}, {"name": "x4", "type": "BOOL", "description": "Fourth input boolean signal."}, {"name": "x5", "type": "BOOL", "description": "Fifth input boolean signal."}, {"name": "Release", "type": "BOOL", "description": "A constant input signal indicating whether to release the generated code."}], "output": [{"name": "code", "type": "BYTE", "description": "The generated code based on the input changes."}, {"name": "TP", "type": "BOOL", "description": "A flag indicating whether a change has been detected."}, {"name": "y1", "type": "BOOL", "description": "Output signal derived from the processed code (default TRUE)."}, {"name": "y2", "type": "BOOL", "description": "Second output signal derived from the processed code."}, {"name": "y3", "type": "BOOL", "description": "Third output signal derived from the processed code."}, {"name": "y4", "type": "BOOL", "description": "Fourth output signal derived from the processed code."}], "in/out": [], "return_value": null}
{"title": "Array Spread Calculation", "description": "This function calculates the spread of values in an array of REAL numbers by determining the difference between the maximum and minimum values. The input to the function includes a pointer to the array and the size of the array, and the function returns the spread as a REAL number.", "type": "FUNCTION", "name": "ARRAY_SPR", "input": [{"name": "pt", "type": "^ARRAY [0..32000] OF REAL", "description": "Pointer to the array of REAL numbers."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The difference between the maximum and minimum values in the array.", "fields": []}}
{"title": "First-Order Transfer Function Implementation", "description": "This function block implements a first-order transfer function characterized by time constant T and scaling factor K. It processes an input signal and outputs a signal that is the result of applying the transfer function to the input.", "type": "FUNCTION_BLOCK", "name": "FT_IMP", "input": [{"name": "in", "type": "REAL", "description": "The input signal to the transfer function."}, {"name": "T", "type": "TIME", "description": "The time constant of the transfer function."}, {"name": "K", "type": "REAL", "description": "The scaling factor applied to the output, default is 1.0."}], "output": [{"name": "out", "type": "REAL", "description": "The output signal after applying the transfer function."}], "in/out": [], "return_value": null}
{"title": "Character Code Retrieval", "description": "This function retrieves the character code of a given string input. If the input string has a length of one, it returns the code directly. For longer strings, it constructs a search string to find the corresponding character code from a predefined character names set.", "type": "FUNCTION", "name": "CHARCODE", "input": [{"name": "STR", "type": "STRING[10]", "description": "A string input with a maximum length of 10 characters whose character code needs to be retrieved."}], "output": [{"name": "CHARCODE", "type": "BYTE", "description": "The character code of the input string returned as a byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns the character code of the input string as a byte."}}
{"title": "Range Checking Function", "description": "This function checks if a given input value falls within a specified range defined by low and high bounds. It returns a boolean value indicating whether the input is within the range or not.", "type": "FUNCTION", "name": "WINDOW2", "input": [{"name": "LOW", "type": "REAL", "description": "The lower bound of the range."}, {"name": "IN", "type": "REAL", "description": "The input value to be checked against the range."}, {"name": "HIGH", "type": "REAL", "description": "The upper bound of the range."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input value is within the specified range (inclusive), otherwise returns FALSE."}}
{"title": "Check if String is Numeric", "description": "This function checks whether the input string consists solely of numeric characters. It iterates through each character of the input string and verifies if it is a number. If any character is found to be non-numeric, the function returns false. If all characters are numeric and the string length is greater than zero, it returns true.", "type": "FUNCTION", "name": "IS_NUM", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "Input variable of type STRING with specified length which needs to be checked for numeric characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the input string consists only of numeric characters and has a length greater than zero; otherwise, returns false."}}
{"title": "Calculate Work Week from Date", "description": "This function calculates the work week number corresponding to the given input date. It takes into consideration the ISO8601 standard for week numbering, accounting for leap years and the first weekday of the year.", "type": "FUNCTION", "name": "WORK_WEEK", "input": [{"name": "idate", "type": "DATE", "description": "The input date from which the work week number is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The work week number for the given date according to ISO8601 standards."}}
{"title": "8-Stage Shift Register with Control Inputs", "description": "This function block implements an 8-stage shift register operation with the capability to set/reset its states based on control inputs. It supports data input from two different sources, allowing the user to either shift data through the register or load new values upon a rising edge of the clock signal.", "type": "FUNCTION_BLOCK", "name": "SHR_8UDE", "input": [{"name": "SET", "type": "BOOL", "description": "Input to set the state of the shift register."}, {"name": "D0", "type": "BOOL", "description": "Input data for the first stage of the shift register."}, {"name": "D7", "type": "BOOL", "description": "Input data for the last stage of the shift register."}, {"name": "CLK", "type": "BOOL", "description": "Clock input signal that triggers the shifting of the register."}, {"name": "DN", "type": "BOOL", "description": "Control input to determine the direction of data shifting."}, {"name": "RST", "type": "BOOL", "description": "Input to reset all registers to a known state."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Current output state of the first stage of the shift register."}, {"name": "Q1", "type": "BOOL", "description": "Current output state of the second stage of the shift register."}, {"name": "Q2", "type": "BOOL", "description": "Current output state of the third stage of the shift register."}, {"name": "Q3", "type": "BOOL", "description": "Current output state of the fourth stage of the shift register."}, {"name": "Q4", "type": "BOOL", "description": "Current output state of the fifth stage of the shift register."}, {"name": "Q5", "type": "BOOL", "description": "Current output state of the sixth stage of the shift register."}, {"name": "Q6", "type": "BOOL", "description": "Current output state of the seventh stage of the shift register."}, {"name": "Q7", "type": "BOOL", "description": "Current output state of the eighth stage of the shift register."}], "in/out": [], "return_value": null}
{"title": "Check If Byte Is Numeric", "description": "This function checks if the input byte is a numeric character by verifying if it falls within the ASCII range for numeric characters (48 to 57). The function returns true if the input is a numeric character and false otherwise.", "type": "FUNCTION", "name": "ISC_NUM", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be checked."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the input byte is within the ASCII range for numeric characters, otherwise returns false."}}
{"title": "Convert DWORD to String with Length Limitation", "description": "This function takes a DWORD input and converts it to a string, ensuring that the output string does not exceed a specified maximum length (N). It restricts the output to a maximum of 20 characters.", "type": "FUNCTION", "name": "DWORD_TO_STRF", "input": [{"name": "IN", "type": "DWORD", "description": "The DWORD value to be converted to a string."}, {"name": "N", "type": "INT", "description": "The maximum length of the resulting string, which should be limited to a maximum of 20."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The resulting string representation of the DWORD input, limited to the specified length N.", "fields": []}}
{"title": "Date Addition Function", "description": "This function adds a specified number of days, weeks, months, and years to a given date and returns the resulting date. It correctly handles month and year transitions.", "type": "FUNCTION", "name": "DATE_ADD", "input": [{"name": "IDATE", "type": "DATE", "description": "The initial date to which the adjustments will be made."}, {"name": "D", "type": "INT", "description": "The number of days to add to the initial date."}, {"name": "W", "type": "INT", "description": "The number of weeks to add to the initial date."}, {"name": "M", "type": "INT", "description": "The number of months to add to the initial date."}, {"name": "Y", "type": "INT", "description": "The number of years to add to the initial date."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The resulting date after the specified additions."}}
{"title": "Check if Input is Alphabetic", "description": "This function checks if the provided input byte represents an alphabet character. It considers both standard ASCII and extended ASCII characters depending on the setup configuration. Based on the provided byte, it determines if it falls within the ranges for uppercase and lowercase alphabetic characters.", "type": "FUNCTION", "name": "ISC_ALPHA", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be checked to see if it represents an alphabet character."}], "output": [{"name": "ISC_ALPHA", "type": "BOOL", "description": "Returns true if the input byte is an alphabet character, otherwise returns false."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The boolean result indicating if the input is an alphabetic character."}}
{"title": "PWM Control Function Block", "description": "This function block, CTRL_PWM, is designed to control Pulse Width Modulation (PWM) signals based on the provided inputs. It calculates the PWM duty cycle using either a control input or a manual input depending on the manual override status.", "type": "FUNCTION_BLOCK", "name": "CTRL_PWM", "input": [{"name": "CI", "type": "REAL", "description": "The control input value used for PWM calculation."}, {"name": "MAN_IN", "type": "REAL", "description": "The manual input value that can override the control input when MANUAL is true."}, {"name": "MANUAL", "type": "BOOL", "description": "A boolean flag indicating whether to use MAN_IN (true) or CI (false) for the PWM calculation."}, {"name": "F", "type": "REAL", "description": "The frequency used for PWM signal generation."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output status indicating whether the PWM signal is active."}], "in/out": [], "return_value": null}
{"title": "List Cleaning Function", "description": "This function cleans a provided list by removing consecutive separators and ensuring that the list is properly terminated. The cleaning ensures that there are no empty elements at the end of the list and handles the removal of redundant separator characters.", "type": "FUNCTION", "name": "LIST_CLEAN", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator character used to determine element boundaries in the list."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING[LIST_LENGTH]", "description": "The list of strings that will be cleaned. The function modifies this list in-place."}], "return_value": {"type": "BOOL", "description": "Indicates the success of the cleaning operation. The function returns TRUE upon successful completion."}}
{"title": "Ticker Function Block", "description": "The TICKER function block generates a ticker display from a given text at specified time intervals. It takes in a character count and a time delay and outputs a portion of text based on these inputs, updating incrementally as time progresses.", "type": "FUNCTION_BLOCK", "name": "TICKER", "input": [{"name": "N", "type": "INT", "description": "The starting index of the ticker text to display."}, {"name": "PT", "type": "TIME", "description": "The time period for which the delay is set before the next ticker update."}], "output": [{"name": "Display", "type": "STRING[STRING_LENGTH]", "description": "The portion of text to be displayed in the ticker."}], "in/out": [{"name": "Text", "type": "STRING[STRING_LENGTH]", "description": "The full text that is processed to create the ticker display."}], "return_value": null}
{"title": "Array Addition Function", "description": "This function adds a specified value to each element of a given array. The function takes a pointer to an array of real numbers, the size of the array, and the value to be added. It updates the array in place and returns a boolean value indicating successful execution.", "type": "FUNCTION", "name": "_ARRAY_ADD", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of real numbers that will be modified."}, {"name": "size", "type": "UINT", "description": "The size of the array to determine how many elements will be processed."}, {"name": "X", "type": "REAL", "description": "The real number value to be added to each element of the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating the success of the operation.", "fields": []}}
{"title": "Control Input Function", "description": "This function calculates the process error by determining the difference between the set point and actual value while accounting for noise through a dead zone mechanism.", "type": "FUNCTION", "name": "CTRL_IN", "input": [{"name": "SET_POINT", "type": "REAL", "description": "The desired target value that the system aims to achieve."}, {"name": "ACTUAL", "type": "REAL", "description": "The current value of the system that is being evaluated."}, {"name": "NOISE", "type": "REAL", "description": "The acceptable range of fluctuation around the set point which will be considered as 'noise'."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated process error after applying the dead zone function.", "fields": []}}
{"title": "Parameter Set Function Block", "description": "This function block is designed to facilitate the initialization and management of a set of parameters based on input signals. It selects a set of parameters to be ramped up to their target values over a specified timeframe, allowing smooth transitions between different configurations.", "type": "FUNCTION_BLOCK", "name": "PARSET", "input": [{"name": "A0", "type": "BOOL", "description": "Boolean input to select the first set of parameters."}, {"name": "A1", "type": "BOOL", "description": "Boolean input to select the second set of parameters."}, {"name": "X01", "type": "REAL", "description": "The first parameter of set 0."}, {"name": "X02", "type": "REAL", "description": "The second parameter of set 0."}, {"name": "X03", "type": "REAL", "description": "The third parameter of set 0."}, {"name": "X04", "type": "REAL", "description": "The fourth parameter of set 0."}, {"name": "X11", "type": "REAL", "description": "The first parameter of set 1."}, {"name": "X12", "type": "REAL", "description": "The second parameter of set 1."}, {"name": "X13", "type": "REAL", "description": "The third parameter of set 1."}, {"name": "X14", "type": "REAL", "description": "The fourth parameter of set 1."}, {"name": "X21", "type": "REAL", "description": "The first parameter of set 2."}, {"name": "X22", "type": "REAL", "description": "The second parameter of set 2."}, {"name": "X23", "type": "REAL", "description": "The third parameter of set 2."}, {"name": "X24", "type": "REAL", "description": "The fourth parameter of set 2."}, {"name": "X31", "type": "REAL", "description": "The first parameter of set 3."}, {"name": "X32", "type": "REAL", "description": "The second parameter of set 3."}, {"name": "X33", "type": "REAL", "description": "The third parameter of set 3."}, {"name": "X34", "type": "REAL", "description": "The fourth parameter of set 3."}, {"name": "TC", "type": "TIME", "description": "Time duration for the ramping process."}], "output": [{"name": "P1", "type": "REAL", "description": "Output parameter corresponding to the first selected set value."}, {"name": "P2", "type": "REAL", "description": "Output parameter corresponding to the second selected set value."}, {"name": "P3", "type": "REAL", "description": "Output parameter corresponding to the third selected set value."}, {"name": "P4", "type": "REAL", "description": "Output parameter corresponding to the fourth selected set value."}], "in/out": [], "return_value": {}}
{"title": "Comparison Function", "description": "This function, CMP, compares two real numbers X and Y with a precision determined by an integer N. It calculates the absolute difference between X and Y and checks if it is less than a computed threshold. The threshold is based on the logarithmic value of the absolute value of X adjusted by the integer N.", "type": "FUNCTION", "name": "CMP", "input": [{"name": "X", "type": "REAL", "description": "The first real number to be compared."}, {"name": "Y", "type": "REAL", "description": "The second real number to be compared."}, {"name": "N", "type": "INT", "description": "An integer that determines the precision for the comparison."}], "output": [{"name": "CMP", "type": "BOOL", "description": "The result of the comparison; TRUE if the absolute difference between X and Y is less than the computed threshold, FALSE otherwise."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The Boolean result indicating if X and Y are considered equal within the defined precision.", "fields": []}}
{"title": "Calculate Temperature Adjustment", "description": "This function computes a temperature adjustment based on input resistance and temperature values. The function uses a mathematical formula to derive the adjusted temperature. It has been enhanced over multiple revisions to accommodate varying target temperatures (TS) and to ensure stability against errors from square root calculations involving negative results.", "type": "FUNCTION", "name": "TEMP_SI", "input": [{"name": "Res", "type": "REAL", "description": "The resistance value input for the temperature calculation."}, {"name": "RS", "type": "REAL", "description": "The reference resistance used in the formula."}, {"name": "TS", "type": "REAL", "description": "The target temperature that influences the adjustment calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed adjusted temperature based on the inputs provided."}}
{"title": "Timing Measurement Function Block (M_TX)", "description": "This function block measures timing intervals based on input signals and produces various timing outputs. It takes an input signal that can change state and computes the time between rising and falling edges, as well as provides information about duty cycle and frequency. The function block can be reset with an external reset signal and limits the maximum timing duration.", "type": "FUNCTION_BLOCK", "name": "M_TX", "input": [{"name": "in", "type": "BOOL", "description": "The input signal to be monitored for edges (rising and falling)."}, {"name": "tmax", "type": "TIME", "description": "The maximum allowed timing duration; after this duration, the block will reset the measurements.", "fields": []}, {"name": "rst", "type": "BOOL", "description": "Reset signal to initialize the measurement outputs."}], "output": [{"name": "TH", "type": "TIME", "description": "The duration of the high state (rising edge) in time."}, {"name": "TL", "type": "TIME", "description": "The duration of the low state (falling edge) in time."}, {"name": "DC", "type": "REAL", "description": "The duty cycle computed as the ratio of the high time to the total period."}, {"name": "F", "type": "REAL", "description": "The frequency calculated based on the high and low durations."}, {"name": "ET", "type": "TIME", "description": "Elapsed time since the last rising edge."}], "in/out": [], "return_value": null}
{"title": "Convert Octal String to DWORD", "description": "This function converts an octal string representation into a DWORD (double word) integer value. The input is a string of octal digits, and the output is the corresponding DWORD value.", "type": "FUNCTION", "name": "OCT_TO_DWORD", "input": [{"name": "OCT", "type": "STRING[20]", "description": "A string of octal digits that needs to be converted to a DWORD."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The converted DWORD value representing the octal input string.", "fields": []}}
{"title": "Time-based Value Storage and Retrieval", "description": "This FUNCTION_BLOCK implements a time-based mechanism for storing and retrieving real input values over a specified period. It accepts a real input value and a time duration, stores a maximum of 64 values, and provides the most recent stored value based on the elapsed time.", "type": "FUNCTION_BLOCK", "name": "FT_TN64", "input": [{"name": "in", "type": "REAL", "description": "The real input value to be stored."}, {"name": "T", "type": "TIME", "description": "The duration that determines how frequently the input values are stored."}], "output": [{"name": "out", "type": "REAL", "description": "The most recent stored input value."}, {"name": "trig", "type": "BOOL", "description": "Boolean trigger indicating that a new value has been stored."}], "in/out": [], "return_value": null}
{"title": "Count Character in String", "description": "This function counts the occurrences of a specified character within a string of a defined length. It takes a string input and a character, then iterates through the string to tally how many times the character appears.", "type": "FUNCTION", "name": "COUNT_CHAR", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "Input variable of type STRING with the specified length."}, {"name": "chr", "type": "BYTE", "description": "Input variable of type BYTE representing the character to count."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "Returns the count of occurrences of the specified character in the string."}}
{"title": "Complex Arc Cosine Function", "description": "This function computes the complex arc cosine of a given complex number and returns the result as a complex number. The output complex number consists of its real and imaginary parts, calculated based on the input complex number.", "type": "FUNCTION", "name": "CACOS", "input": [{"name": "X", "type": "COMPLEX", "description": "The input complex number for which the arc cosine is to be calculated."}], "output": [{"name": "CACOS", "type": "COMPLEX", "description": "The arc cosine of the input complex number, represented as a complex number."}], "in/out": [], "return_value": {"type": "COMPLEX", "description": "The computed arc cosine value of the input complex number as a complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the calculated arc cosine."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the calculated arc cosine."}]}}
{"title": "Calculate Resistance at Non-Temperature Coefficient (NTC)", "description": "This function calculates the resistance based on the temperature (T), a reference resistance (RN), and a constant (B) for the NTC thermistor. The calculation is performed using the exponential function to account for the temperature dependence of the resistance.", "type": "FUNCTION", "name": "RES_NTC", "input": [{"name": "T", "type": "REAL", "description": "The temperature in degrees Celsius."}, {"name": "RN", "type": "REAL", "description": "The reference resistance at a specified temperature."}, {"name": "B", "type": "REAL", "description": "The material characteristic constant for the NTC thermistor."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated resistance value based on the provided inputs."}}
{"title": "Decimal to Byte Conversion", "description": "This function converts a decimal number given as a string to its corresponding byte value. The input string can be up to 10 characters long and represents a non-negative integer. The function iteratively reads each character of the string, validates it, and converts it to a byte representation.", "type": "FUNCTION", "name": "DEC_TO_BYTE", "input": [{"name": "DEC", "type": "STRING(10)", "description": "A string representation of a decimal number to be converted to byte."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The byte representation of the input decimal string.", "fields": []}}
{"title": "3D Vector Addition", "description": "This function performs the addition of two 3-dimensional vectors. Given two input vectors A and B, the function computes the resultant vector by adding the corresponding components (X, Y, Z) of the input vectors.", "type": "FUNCTION", "name": "V3_ADD", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector for the addition operation.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the vector A."}, {"name": "Y", "type": "REAL", "description": "The Y component of the vector A."}, {"name": "Z", "type": "REAL", "description": "The Z component of the vector A."}]}, {"name": "B", "type": "Vector_3", "description": "The second input vector for the addition operation.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the vector B."}, {"name": "Y", "type": "REAL", "description": "The Y component of the vector B."}, {"name": "Z", "type": "REAL", "description": "The Z component of the vector B."}]}], "output": [{"name": "V3_ADD", "type": "Vector_3", "description": "The resultant vector from the addition of vectors A and B.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the resultant vector."}, {"name": "Y", "type": "REAL", "description": "The Y component of the resultant vector."}, {"name": "Z", "type": "REAL", "description": "The Z component of the resultant vector."}]}], "in/out": [], "return_value": {"type": "void", "description": "The function does not return a value, but modifies the output parameter V3_ADD."}}
{"title": "List Next Function Block", "description": "This function block processes a list represented as a string, extracting elements until a specified separator is encountered or the end of the list is reached. It resets the position based on the reset input and outputs the parsed values along with a flag indicating whether the list was empty or fully processed.", "type": "FUNCTION_BLOCK", "name": "LIST_NEXT", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator byte used to delimit items in the list."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the position in the list to the beginning."}], "output": [{"name": "LEL", "type": "STRING(LIST_LENGTH)", "description": "The output string containing the next list element extracted from the input list."}, {"name": "NUL", "type": "BOOL", "description": "A boolean flag indicating whether the list is empty or fully processed."}], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The input string representing the entire list to be processed."}], "return_value": null}
{"title": "Extracting a Byte from a DWORD", "description": "This function takes a DWORD input and a BYTE index to extract a specific byte from the DWORD. The BYTE value is determined by shifting the DWORD and converting it to BYTE format. The function is designed for efficient performance improvements across revisions.", "type": "FUNCTION", "name": "BYTE_OF_DWORD", "input": [{"name": "in", "type": "DWORD", "description": "The DWORD value from which a byte will be extracted."}, {"name": "N", "type": "BYTE", "description": "The index of the byte to extract from the DWORD, multiplied by 8 to account for bit shifts."}], "output": [{"name": "BYTE_OF_DWORD", "type": "BYTE", "description": "The extracted byte from the specified position of the input DWORD."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting byte obtained from the extraction process."}}
{"title": "Addition of Two Real2 Values", "description": "The function 'R2_ADD2' is designed to perform the addition of two input parameters of type 'REAL2'. It takes two 'REAL2' structures as input, adds their respective members, and returns a 'REAL2' structure containing the sum.", "type": "FUNCTION", "name": "R2_ADD2", "input": [{"name": "X", "type": "REAL2", "description": "The first 'REAL2' structure that contains the first set of values to be added."}, {"name": "Y", "type": "REAL2", "description": "The second 'REAL2' structure that contains the second set of values to be added."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "The 'REAL2' structure that contains the result of the addition of 'X' and 'Y'.", "fields": [{"name": "R1", "type": "REAL", "description": "The first real part of the 'REAL2' structure which is the sum of 'X.R1' and 'Y.R1'."}, {"name": "RX", "type": "REAL", "description": "The second real part of the 'REAL2' structure which is the sum of 'X.RX' and 'Y.RX'."}]}}
{"title": "Integer Truncation Function", "description": "This function takes a real number as input and truncates it to its nearest integer value, following specific rounding rules based on whether the input is positive or negative. The function adjusts the truncated value based on whether it is greater than or less than the original input.", "type": "FUNCTION", "name": "D_TRUNC", "input": [{"name": "X", "type": "REAL", "description": "The real number to be truncated to an integer."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The truncated integer value of the input real number.", "fields": []}}
{"title": "Array Shuffle Function", "description": "This function shuffles an array of real numbers in a random order. It takes a pointer to an array of real numbers and the size of the array as input, and it performs in-place swapping of elements to randomize their order.", "type": "FUNCTION", "name": "_ARRAY_SHUFFLE", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of real numbers that needs to be shuffled."}, {"name": "size", "type": "UINT", "description": "The size of the array, determining how many elements will be shuffled."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the array was shuffled successfully."}}
{"title": "Convert Geographic Coordinates to Decimal Degrees", "description": "This function takes geographic coordinates in degrees, minutes, and seconds and converts them into decimal degrees format. The degrees, minutes, and seconds are input as separate parameters.", "type": "FUNCTION", "name": "GEO_TO_DEG", "input": [{"name": "D", "type": "INT", "description": "The degree component of the geographic coordinate"}, {"name": "M", "type": "INT", "description": "The minute component of the geographic coordinate"}, {"name": "SEC", "type": "REAL", "description": "The second component of the geographic coordinate"}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting decimal degrees calculated from the input geographic coordinates"}}
{"title": "Temperature Calculation Function", "description": "This function computes the temperature based on two input parameters, Res and R0, by applying a mathematical formula. The output is a real number representing the calculated temperature.", "type": "FUNCTION", "name": "TEMP_NI", "input": [{"name": "Res", "type": "REAL", "description": "The resistance value measured."}, {"name": "R0", "type": "REAL", "description": "The reference resistance value for the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated temperature derived from the formula using Res and R0."}}
{"title": "Calculate Array Median", "description": "This function calculates the median of a given array of real numbers. It takes a pointer to the array and the size of the array as inputs. The median is determined based on whether the size of the array is even or odd after sorting the array.", "type": "FUNCTION", "name": "_ARRAY_MEDIAN", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to an array of real numbers whose median is to be calculated."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array pointed to by pt."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The median value of the array.", "fields": []}}
{"title": "R2_MUL Function", "description": "This function takes a REAL2 structure and a REAL value as input, and multiplies the components of the REAL2 structure by the REAL value, returning a new REAL2 structure with the results.", "type": "FUNCTION", "name": "R2_MUL", "input": [{"name": "X", "type": "REAL2", "description": "Input structure containing two REAL components RX and R1 to be multiplied."}, {"name": "Y", "type": "REAL", "description": "A REAL value to multiply with the components of the structure X."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "The new REAL2 structure resulting from multiplying the components of X by Y.", "fields": [{"name": "RX", "type": "REAL", "description": "The result of multiplying the RX component of X by Y."}, {"name": "R1", "type": "REAL", "description": "The result of multiplying the R1 component of X by Y."}]}}
{"title": "Range to Byte Conversion", "description": "This function takes a real number input and converts it to a byte based on a specified range defined by low and high limits. The resulting byte value represents the position of the input X within the scaled range from low to high.", "type": "FUNCTION", "name": "RANGE_TO_BYTE", "input": [{"name": "X", "type": "REAL", "description": "The real number input that is to be converted to a byte."}, {"name": "low", "type": "REAL", "description": "The lower bound of the range."}, {"name": "high", "type": "REAL", "description": "The upper bound of the range."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting byte value after the conversion from the real number based on the defined range."}}
{"title": "Integer Floor Function", "description": "This function calculates the floor value of a given real number by converting it to an integer. If the converted integer value is greater than the original real number, it reduces the integer value by one to ensure correct flooring behavior.", "type": "FUNCTION", "name": "FLOOR", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the floor value needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The integer floor value of the input real number X.", "fields": []}}
{"title": "Modulo Operation Function", "description": "This function calculates the modulo of a real number by another real number. If the divisor is zero, the function returns zero. Otherwise, it computes the modulo using the formula: in - DINT_TO_REAL(FLOOR2(in / divi)) * divi.", "type": "FUNCTION", "name": "MODR", "input": [{"name": "IN", "type": "REAL", "description": "The number to be divided."}, {"name": "DIVI", "type": "REAL", "description": "The divisor used for the modulo operation."}], "output": [{"name": "MODR", "type": "REAL", "description": "The result of the modulo operation."}], "in/out": [], "return_value": {"type": "REAL", "description": "The modulo result, which is either the computed modulo or zero if DIVI is zero."}}
{"title": "Clock Pulse Generator", "description": "This function block generates a clock pulse output based on a specified time interval. The time interval can be configured at runtime, and the output pulse is generated whenever the elapsed time since the last pulse meets or exceeds the specified interval.", "type": "FUNCTION_BLOCK", "name": "CLK_PRG", "input": [{"name": "PT", "type": "TIME", "description": "The time period for which the output pulse should remain HIGH. Default value is set to 10 milliseconds."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output which is HIGH when the output pulse is generated."}], "in/out": [], "return_value": null}
{"title": "Byte Reversal Function", "description": "This function takes a single byte input and performs bitwise rotations and shifts to output a modified byte that represents a reversed byte pattern. The function applies various logical operations to the input byte to achieve the reversal effect.", "type": "FUNCTION", "name": "REVERSE", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte value to be reversed."}], "output": [{"name": "REVERSE", "type": "BYTE", "description": "The output byte value resulting from the bitwise operations on the input byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The return value represents the modified byte resulting from the function's operations."}}
{"title": "Calculate Beginning of Month from a Given Date", "description": "This function calculates the start date of the month for a given date input. It adjusts the input date by subtracting the number of seconds corresponding to the days in that month.", "type": "FUNCTION", "name": "MONTH_BEGIN", "input": [{"name": "idate", "type": "DATE", "description": "The input date from which the beginning of the month is to be calculated."}], "output": [{"name": "MONTH_BEGIN", "type": "DATE", "description": "The calculated beginning date of the month derived from the input date."}], "in/out": [], "return_value": {"type": "DATE", "description": "The date representing the start of the month for the given input date."}}
{"title": "Integrator Function Block", "description": "This function block performs integration on a given input value. It takes an input signal and integrates it over time, with optional parameters to specify the integration factor and to enable or disable the operation. It also allows for setting output limits to prevent the integrated value from exceeding predefined bounds.", "type": "FUNCTION_BLOCK", "name": "FT_INT", "input": [{"name": "IN", "type": "REAL", "description": "The input value to be integrated."}, {"name": "K", "type": "REAL", "description": "The integration factor, default is set to 1."}, {"name": "RUN", "type": "BOOL", "description": "A boolean indicating whether the integration should run or not, default is TRUE."}, {"name": "RST", "type": "BOOL", "description": "A reset flag that, when TRUE, resets the output to zero."}, {"name": "OUT_MIN", "type": "REAL", "description": "The minimum limit for the output, default is set to -1E+37."}, {"name": "OUT_MAX", "type": "REAL", "description": "The maximum limit for the output, default is set to 1E+37."}], "output": [{"name": "OUT", "type": "REAL", "description": "The result of the integration process."}, {"name": "LIM", "type": "BOOL", "description": "A boolean indicating if the output has reached a limit."}], "in/out": [], "return_value": null}
{"title": "4-to-1 Multiplexer Function", "description": "This function implements a 4-to-1 multiplexer logic that selects one of four boolean inputs based on two select lines. The function returns a boolean value corresponding to the selected input.", "type": "FUNCTION", "name": "MUX_4", "input": [{"name": "D0", "type": "BOOL", "description": "First data input for the multiplexer."}, {"name": "D1", "type": "BOOL", "description": "Second data input for the multiplexer."}, {"name": "D2", "type": "BOOL", "description": "Third data input for the multiplexer."}, {"name": "D3", "type": "BOOL", "description": "Fourth data input for the multiplexer."}, {"name": "A0", "type": "BOOL", "description": "First select line for selecting the input."}, {"name": "A1", "type": "BOOL", "description": "Second select line for selecting the input."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The output of the multiplexer, representing the selected boolean input."}}
{"title": "Multiply and Add Function", "description": "This function performs a multiplication of two input parameters and then adds a third input parameter to the result. The function takes three inputs: X, K, and O. It calculates the product of X and K and adds O to this product, returning the final result.", "type": "FUNCTION", "name": "MUL_ADD", "input": [{"name": "X", "type": "REAL", "description": "The first input value that will be multiplied."}, {"name": "K", "type": "REAL", "description": "The second input value that will multiply with X."}, {"name": "O", "type": "REAL", "description": "The value that will be added to the product of X and K."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the operation, which is the value of X multiplied by K, plus O."}}
{"title": "Proportional-Integral Controller", "description": "This function block implements a Proportional-Integral (PI) controller with the ability to limit the output of the integrator. The function block receives an input signal, applies proportional and integral gains, handles output limits, and indicates if the integrator has reached its limits.", "type": "FUNCTION_BLOCK", "name": "FT_PI", "input": [{"name": "IN", "type": "REAL", "description": "The input value to the PI controller."}, {"name": "KP", "type": "REAL", "description": "The proportional gain parameter, default is 1.0."}, {"name": "KI", "type": "REAL", "description": "The integral gain parameter, default is 1.0."}, {"name": "ILIM_L", "type": "REAL", "description": "The lower limit for the integrator output, default is -1E+38."}, {"name": "ILIM_H", "type": "REAL", "description": "The upper limit for the integrator output, default is 1E+38."}, {"name": "IEN", "type": "BOOL", "description": "Indicator to enable or disable the integrator, default is TRUE."}, {"name": "RST", "type": "BOOL", "description": "Reset signal for the integrator."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the PI controller after applying the gains."}, {"name": "LIM", "type": "BOOL", "description": "Indicator that shows if the integrator has reached its output limits."}], "in/out": [], "return_value": {}}
{"title": "Convert DateTime to Structured DateTime", "description": "This function converts a DateTime value to a Structured DateTime (SDT) format, which breaks down the DateTime into individual components such as year, month, day, weekday, hour, minute, and second.", "type": "FUNCTION", "name": "DT_TO_SDT", "input": [{"name": "DTI", "type": "TIME_DT", "description": "The input DateTime value that needs to be converted into Structured DateTime."}], "output": [{"name": "DT_TO_SDT", "type": "SDT", "description": "The output Structured DateTime that contains the year, month, day, weekday, hour, minute, and second extracted from the input DateTime."}], "in/out": [], "return_value": {"type": "SDT", "description": "The return value is a Structured DateTime containing the detailed components of the input DateTime value.", "fields": [{"name": "YEAR", "type": "INT", "description": "The year component extracted from the input DateTime."}, {"name": "MONTH", "type": "INT", "description": "The month component extracted from the input DateTime."}, {"name": "DAY", "type": "INT", "description": "The day component extracted from the input DateTime."}, {"name": "WEEKDAY", "type": "INT", "description": "The weekday component extracted from the input DateTime, representing the day of the week."}, {"name": "HOUR", "type": "INT", "description": "The hour component extracted from the input DateTime."}, {"name": "MINUTE", "type": "INT", "description": "The minute component extracted from the input DateTime."}, {"name": "SECOND", "type": "INT", "description": "The second component extracted from the input DateTime."}]}}
{"title": "Decrement Function", "description": "This function, DEC1, takes an integer value X and returns a decremented value based on the condition of X. If X equals zero, the function will return N - 1. Otherwise, it will return X - 1. The function is designed to handle integer inputs.", "type": "FUNCTION", "name": "DEC1", "input": [{"name": "X", "type": "INT", "description": "An integer input value that will be decremented."}, {"name": "N", "type": "INT", "description": "An integer input value used for calculation when X is zero."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The decremented integer value based on the conditions provided. Returns N - 1 if X is 0, otherwise returns X - 1."}}
{"title": "Calculate the Gold Value", "description": "This function calculates a value based on the input parameter X using the formula GOLD := (X + SQRT(X*X + 4.0)) * 0.5. The function returns the calculated Gold value as a REAL type.", "type": "FUNCTION", "name": "GOLD", "input": [{"name": "X", "type": "REAL", "description": "The input real number for which the Gold value will be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated Gold value based on the input X."}}
{"title": "Calculate Resistance Based on Temperature Differences", "description": "This function calculates the resistance based on the input temperature and resistance values, considering the effects of the temperature differences using predefined constants.", "type": "FUNCTION", "name": "RES_SI", "input": [{"name": "T", "type": "REAL", "description": "The current temperature value."}, {"name": "RS", "type": "REAL", "description": "The base resistance value."}, {"name": "TS", "type": "REAL", "description": "The reference temperature value."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated resistance value based on the inputs and constants.", "fields": []}}
{"title": "Sine Wave Generator Function Block", "description": "This function block generates a sine wave based on a specified period, amplitude, and offset. It takes time as an input and outputs the current value of the sine wave and a boolean indicating the signal's state.", "type": "FUNCTION_BLOCK", "name": "GEN_SIN", "input": [{"name": "PT", "type": "TIME", "description": "The period of the sine wave."}, {"name": "AM", "type": "REAL", "description": "The amplitude of the sine wave. Default is 1.0."}, {"name": "OS", "type": "REAL", "description": "The offset of the sine wave."}, {"name": "DL", "type": "REAL", "description": "The duty cycle of the sine wave, which affects the waveform shape."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating the signal state, true if the sine wave is positive."}, {"name": "Out", "type": "REAL", "description": "The current value of the generated sine wave."}], "in/out": [], "return_value": {}}
{"title": "SHR_4UDE Function Block", "description": "This function block implements a 4-bit shift register with control signals for setting, resetting, and clocking. It handles the shifting of data based on a digital clock and has an optional direct load feature controlled by the DN signal.", "type": "FUNCTION_BLOCK", "name": "SHR_4UDE", "input": [{"name": "SET", "type": "BOOL", "description": "Control signal to set the output state."}, {"name": "D0", "type": "BOOL", "description": "Input data bit to be shifted into the register at Q0."}, {"name": "D3", "type": "BOOL", "description": "Input data bit to be shifted into the register at Q3."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal for controlling the shifting operation."}, {"name": "DN", "type": "BOOL", "description": "Control signal for direct loading of data into the register."}, {"name": "RST", "type": "BOOL", "description": "Control signal to reset the output state."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output of the least significant bit of the shift register."}, {"name": "Q1", "type": "BOOL", "description": "Output of the second bit of the shift register."}, {"name": "Q2", "type": "BOOL", "description": "Output of the third bit of the shift register."}, {"name": "Q3", "type": "BOOL", "description": "Output of the most significant bit of the shift register."}], "in/out": [], "return_value": null}
{"title": "Signal Processing Block", "description": "This FUNCTION_BLOCK processes input signals and generates an output signal Q based on the input boolean parameters IN1, IN2, IN3, and IN4. It also utilizes a timestamp and local signal patterns for processing.", "type": "FUNCTION_BLOCK", "name": "SIGNAL_4", "input": [{"name": "IN1", "type": "BOOL", "description": "Boolean input representing the first signal."}, {"name": "IN2", "type": "BOOL", "description": "Boolean input representing the second signal."}, {"name": "IN3", "type": "BOOL", "description": "Boolean input representing the third signal."}, {"name": "IN4", "type": "BOOL", "description": "Boolean input representing the fourth signal."}, {"name": "TS", "type": "TIME", "description": "Timestamp indicating the time at which the signals are processed."}, {"name": "S1", "type": "BYTE", "description": "Byte pattern for the first signal, initialized to 16#FF."}, {"name": "S2", "type": "BYTE", "description": "Byte pattern for the second signal, initialized to 16#F0."}, {"name": "S3", "type": "BYTE", "description": "Byte pattern for the third signal, initialized to 16#AA."}, {"name": "S4", "type": "BYTE", "description": "Byte pattern for the fourth signal, initialized to 16#A0."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output boolean indicating whether an alarm condition is present."}], "in/out": [], "return_value": null}
{"title": "Calculate End of Month Date", "description": "This function calculates the last date of the month for a given date input. It does so by finding the first day of the next month and subtracting one day.", "type": "FUNCTION", "name": "MONTH_END", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the end of month is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The last date of the month corresponding to the provided input date."}}
{"title": "Byte Swap Function", "description": "This function takes a DWORD input and swaps its bytes. Specifically, it rotates the input bits to the right and left to achieve the byte swapping effect, combining the results to produce the final output.", "type": "FUNCTION", "name": "SWAP_BYTE2", "input": [{"name": "IN", "type": "DWORD", "description": "The DWORD value whose bytes are to be swapped."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD after the bytes have been swapped.", "fields": []}}
{"title": "Convert String to Week Representation", "description": "This function converts a comma-separated string representation of weekdays into a byte value that represents those weekdays. The conversion takes into account the specified language by using a language index.", "type": "FUNCTION", "name": "FSTRING_TO_WEEK", "input": [{"name": "WEEK", "type": "STRING[60]", "description": "A string containing the weekdays separated by commas."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language index for weekday conversion."}], "output": [{"name": "FSTRING_TO_WEEK", "type": "BYTE", "description": "A byte value representing the converted weekdays."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns a byte value that encodes the weekdays from the input string.", "fields": []}}
{"title": "Length Conversion Function Block", "description": "This function block converts various length units inputted in real numbers into meters and computes the equivalent values for different units such as p, in, ft, yd, mile, sm, and fm based on defined conversion factors.", "type": "FUNCTION_BLOCK", "name": "LENGTH", "input": [{"name": "m", "type": "REAL", "description": "Length in meters (SI base unit)."}, {"name": "p", "type": "REAL", "description": "Length in typographical points."}, {"name": "in", "type": "REAL", "description": "Length in inches."}, {"name": "ft", "type": "REAL", "description": "Length in feet."}, {"name": "yd", "type": "REAL", "description": "Length in yards."}, {"name": "mile", "type": "REAL", "description": "Length in miles."}, {"name": "sm", "type": "REAL", "description": "Length in international sea miles."}, {"name": "fm", "type": "REAL", "description": "Length in fathoms."}], "output": [{"name": "Ym", "type": "REAL", "description": "Converted length in meters."}, {"name": "Yp", "type": "REAL", "description": "Converted length in typographical points."}, {"name": "Yin", "type": "REAL", "description": "Converted length in inches."}, {"name": "Yft", "type": "REAL", "description": "Converted length in feet."}, {"name": "Yyd", "type": "REAL", "description": "Converted length in yards."}, {"name": "Ymile", "type": "REAL", "description": "Converted length in miles."}, {"name": "Ysm", "type": "REAL", "description": "Converted length in international sea miles."}, {"name": "Yfm", "type": "REAL", "description": "Converted length in fathoms."}], "in/out": [], "return_value": null}
{"title": "Cycle Time Measurement", "description": "This FUNCTION_BLOCK is responsible for tracking cycle times in a process. It initializes cycle time values, updates minimum and maximum cycle times based on elapsed cycles, and counts the number of cycles that have occurred. The block resets the cycle time when requested.", "type": "FUNCTION_BLOCK", "name": "CYCLE_TIME", "input": [{"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the cycle time measurements."}], "output": [{"name": "ct_min", "type": "TIME", "description": "The minimum cycle time recorded."}, {"name": "ct_max", "type": "TIME", "description": "The maximum cycle time recorded."}, {"name": "ct_last", "type": "TIME", "description": "The last cycle time measured."}, {"name": "systime", "type": "TIME", "description": "The accumulated system time."}, {"name": "sysdays", "type": "INT", "description": "The number of days accounted for in system time."}, {"name": "cycles", "type": "DWORD", "description": "The total count of cycles that have occurred."}], "in/out": [], "return_value": null}
{"title": "Set Date Function", "description": "This function calculates and returns a date based on the provided year, month, and day inputs. It also accounts for leap years when necessary.", "type": "FUNCTION", "name": "SET_DATE", "input": [{"name": "YEAR", "type": "INT", "description": "The year of the date to be set."}, {"name": "MONTH", "type": "INT", "description": "The month of the date to be set."}, {"name": "DAY", "type": "INT", "description": "The day of the date to be set."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated date based on the provided year, month, and day.", "fields": []}}
{"title": "Holiday Event Checker", "description": "This function block checks for holiday events based on a given date. It uses an input date, a boolean enable signal, and searches a list of holiday data to determine if the date falls within any holiday event period. If a holiday is detected, it outputs a boolean indicating the event's status and the name of the holiday.", "type": "FUNCTION_BLOCK", "name": "EVENTS", "input": [{"name": "DATE_IN", "type": "DATE", "description": "The date to check for holiday events."}, {"name": "ENA", "type": "BOOL", "description": "Enable signal to determine if the holiday event check should be processed."}], "output": [{"name": "Y", "type": "BOOL", "description": "Output indicating if a holiday event is active."}, {"name": "NAME", "type": "STRING(30)", "description": "The name of the holiday if an event is active, otherwise an empty string."}], "in/out": [{"name": "ELIST", "type": "ARRAY[0..49] OF HOLIDAY_DATA", "description": "An array of holiday data structures to check against the input date."}], "return_value": null}
{"title": "FRMP_B Function", "description": "This function computes a byte value based on the input parameters START, DIR, TD, and TR. It conditions the output based on the comparison of TD and TR. If TD is less than TR, it calculates a shifted value based on TD and TR, modifies it based on the direction indicated by DIR, and adjusts it with START. If TD is not less than TR, it sets the output depending on the value of DIR.", "type": "FUNCTION", "name": "FRMP_B", "input": [{"name": "START", "type": "BYTE", "description": "The starting byte value to be used in calculations."}, {"name": "DIR", "type": "BOOL", "description": "Direction flag, where TRUE indicates an increment operation and FALSE indicates a decrement operation."}, {"name": "TD", "type": "TIME", "description": "The first time duration to be compared with TR."}, {"name": "TR", "type": "TIME", "description": "The second time duration used for comparison with TD."}], "output": [{"name": "FRMP_B", "type": "BYTE", "description": "The resulting byte value calculated based on the input parameters."}], "in/out": [], "return_value": {"type": "BYTE", "description": "This return value represents the calculated byte value based on the function logic."}}
{"title": "4-bit Latch Function Block", "description": "This function block implements a 4-bit latch, where the output reflects the state of the inputs as long as a control signal (L) is true. An asynchronous reset (RST) will clear the output regardless of inputs.", "type": "FUNCTION_BLOCK", "name": "LTCH_4", "input": [{"name": "D0", "type": "BOOL", "description": "First data input for the latch."}, {"name": "D1", "type": "BOOL", "description": "Second data input for the latch."}, {"name": "D2", "type": "BOOL", "description": "Third data input for the latch."}, {"name": "D3", "type": "BOOL", "description": "Fourth data input for the latch."}, {"name": "L", "type": "BOOL", "description": "Control signal that determines if the latch is transparent."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset signal that resets the output."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output corresponding to the first data input."}, {"name": "Q1", "type": "BOOL", "description": "Output corresponding to the second data input."}, {"name": "Q2", "type": "BOOL", "description": "Output corresponding to the third data input."}, {"name": "Q3", "type": "BOOL", "description": "Output corresponding to the fourth data input."}], "in/out": [], "return_value": {}}
{"title": "Square Root to the Nth Power Calculation", "description": "This function computes the square root of a given number raised to the power of N. It returns 0 if N is less than or equal to 0 for compatibility reasons.", "type": "FUNCTION", "name": "SQRTN", "input": [{"name": "X", "type": "REAL", "description": "The base number for which the Nth root needs to be calculated."}, {"name": "N", "type": "INT", "description": "The exponent indicating the degree of the root to compute. Must be greater than 0."}], "output": [{"name": "SQRTN", "type": "REAL", "description": "The computed Nth root of X, or 0 if N is less than or equal to 0."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the Nth root calculation."}}
{"title": "Array Sum Function", "description": "This function calculates the sum of elements in a given array of real numbers, using a pointer to the array and its size as input parameters.", "type": "FUNCTION", "name": "ARRAY_SUM", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to the array of real numbers to be summed."}, {"name": "size", "type": "UINT", "description": "The size of the array. This indicates the number of elements in the array to be processed."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The sum of the elements of the array.", "fields": []}}
{"title": "Multiply Time by a Real Number", "description": "This function computes the product of a TIME value and a REAL multiplier, returning the result as a TIME. It first converts the TIME to a REAL number, multiplies it by the REAL multiplier, and then converts the result back to TIME.", "type": "FUNCTION", "name": "MULTIME", "input": [{"name": "t", "type": "TIME", "description": "The TIME value to be multiplied."}, {"name": "M", "type": "REAL", "description": "The REAL multiplier to scale the TIME value."}], "output": [], "in/out": [], "return_value": {"type": "TIME", "description": "The resulting TIME after multiplying the input TIME with the REAL multiplier.", "fields": []}}
{"title": "Increment Function with Bounds", "description": "The function INC2 calculates the incremented value of an integer X by a specified increment D, constrained within the limits defined by L (lower limit) and U (upper limit). The function returns the incremented value, ensuring it wraps around if it exceeds the upper limit.", "type": "FUNCTION", "name": "INC2", "input": [{"name": "X", "type": "INT", "description": "The integer value to be incremented."}, {"name": "D", "type": "INT", "description": "The increment value to be added to X."}, {"name": "L", "type": "INT", "description": "The lower boundary limit for the incremented value."}, {"name": "U", "type": "INT", "description": "The upper boundary limit for the incremented value."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The incremented value of X after applying the increment D within the specified limits.", "fields": []}}
{"title": "Calculate Angle from Z-Axis", "description": "This function calculates the angle in radians between a 3D vector and the Z-axis. It takes a 3D vector as input and returns the angle based on the Z component of the vector normalized by its magnitude, returning the angle only if the vector has a non-zero length.", "type": "FUNCTION", "name": "V3_ZANG", "input": [{"name": "A", "type": "Vector_3", "description": "A 3D vector containing the X, Y, and Z components."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians between the vector and the Z-axis.", "fields": []}}
{"title": "PI Controller Function Block", "description": "This function block implements a proportional-integral (PI) controller. It processes an input signal with a proportional gain (KP) and an integral gain (KI) while enforcing both upper and lower limits on the output signal. The block can be reset, which initializes internal variables.", "type": "FUNCTION_BLOCK", "name": "FT_PIWL", "input": [{"name": "IN", "type": "REAL", "description": "The input signal for the PI controller."}, {"name": "KP", "type": "REAL", "description": "The proportional gain coefficient (default is 1.0)."}, {"name": "KI", "type": "REAL", "description": "The integral gain coefficient (default is 1.0)."}, {"name": "LIM_L", "type": "REAL", "description": "The lower limit for the output signal (default is -1E+38)."}, {"name": "LIM_H", "type": "REAL", "description": "The upper limit for the output signal (default is 1E+38)."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the internal state."}], "output": [{"name": "Y", "type": "REAL", "description": "The output signal from the PI controller."}, {"name": "LIM", "type": "BOOL", "description": "Indicates whether the output signal is within the defined limits."}], "in/out": [], "return_value": null}
{"title": "Check Non-Containment of Substring", "description": "This function checks whether the specified substring (cmp) is contained within a given string (str). If the substring is found in any part of the string, the function will return FALSE. If the substring is not found at all, the function will return TRUE.", "type": "FUNCTION", "name": "IS_NCC", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The main string in which to search for the substring."}, {"name": "cmp", "type": "STRING[STRING_LENGTH]", "description": "The substring that needs to be checked for containment in the main string."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Boolean value indicating whether the substring is not contained in the main string. TRUE if not found; FALSE if found."}}
{"title": "4-Bit Digital Decoder", "description": "This function block implements a 4-bit digital decoder based on the input control signals. It takes two address inputs (A0 and A1) and a data input (D) to produce four output signals (Q0, Q1, Q2, Q3) based on the combination of inputs.", "type": "FUNCTION_BLOCK", "name": "DEC_4", "input": [{"name": "D", "type": "BOOL", "description": "Data input that controls the activation of the outputs."}, {"name": "A0", "type": "BOOL", "description": "Address input bit 0."}, {"name": "A1", "type": "BOOL", "description": "Address input bit 1."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal 0, active when D is TRUE, A0 is FALSE, and A1 is FALSE."}, {"name": "Q1", "type": "BOOL", "description": "Output signal 1, active when D is TRUE, A0 is TRUE, and A1 is FALSE."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2, active when D is TRUE, A0 is FALSE, and A1 is TRUE."}, {"name": "Q3", "type": "BOOL", "description": "Output signal 3, active when D is TRUE, A0 is TRUE, and A1 is TRUE."}], "in/out": [], "return_value": null}
{"title": "Array Multiplication Function", "description": "This function multiplies each element of a real number array by a specified real number. The function takes a pointer to an array as input, along with the size of the array and the multiplier. The function processes half the elements of the array based on the size provided.", "type": "FUNCTION", "name": "_ARRAY_MUL", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of real numbers that will be modified."}, {"name": "size", "type": "UINT", "description": "The size of the array indicating how many elements are present."}, {"name": "X", "type": "REAL", "description": "The real number by which each element of the array will be multiplied."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE to indicate successful completion of the multiplication operation."}}
{"title": "ESR Data Collection Function Block", "description": "This function block collects ESR data from multiple input arrays, processes them, and outputs a combined array of valid ESR data. It supports a reset functionality to initialize the output position.", "type": "FUNCTION_BLOCK", "name": "ESR_COLLECT", "input": [{"name": "ESR_0", "type": "ARRAY[0..3] OF esr_data", "description": "First array of ESR data containing up to 4 elements."}, {"name": "ESR_1", "type": "ARRAY[0..3] OF esr_data", "description": "Second array of ESR data containing up to 4 elements."}, {"name": "ESR_2", "type": "ARRAY[0..3] OF esr_data", "description": "Third array of ESR data containing up to 4 elements."}, {"name": "ESR_3", "type": "ARRAY[0..3] OF esr_data", "description": "Fourth array of ESR data containing up to 4 elements."}, {"name": "ESR_4", "type": "ARRAY[0..3] OF esr_data", "description": "Fifth array of ESR data containing up to 4 elements."}, {"name": "ESR_5", "type": "ARRAY[0..3] OF esr_data", "description": "Sixth array of ESR data containing up to 4 elements."}, {"name": "ESR_6", "type": "ARRAY[0..3] OF esr_data", "description": "Seventh array of ESR data containing up to 4 elements."}, {"name": "ESR_7", "type": "ARRAY[0..3] OF esr_data", "description": "Eighth array of ESR data containing up to 4 elements."}, {"name": "rst", "type": "BOOL", "description": "A boolean flag to reset the output position."}], "output": [{"name": "ESR_OUT", "type": "ARRAY[0..31] OF esr_data", "description": "Output array containing up to 32 collected ESR data elements."}], "in/out": [{"name": "pos", "type": "INT", "description": "Current position index for output storage, can be modified to determine where to place the next valid ESR data."}], "return_value": null}
{"title": "Quadratic Function Calculator", "description": "This function calculates the value of a quadratic equation given the coefficients A, B, and C, and the input variable X. The function applies the formula f(X) = A * X^2 + B * X + C to compute the result.", "type": "FUNCTION", "name": "F_QUAD", "input": [{"name": "X", "type": "REAL", "description": "The value of the variable X for which the quadratic function is calculated."}, {"name": "A", "type": "REAL", "description": "The coefficient A in the quadratic equation."}, {"name": "B", "type": "REAL", "description": "The coefficient B in the quadratic equation."}, {"name": "C", "type": "REAL", "description": "The coefficient C in the quadratic equation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value of the quadratic function based on the input parameters X, A, B, and C."}}
{"title": "Sequencer Function Block", "description": "This function block implements a sequential control logic with multiple inputs and outputs, allowing the user to manage a sequence of operations determined by input signals and timed delays. The sequence can be started, reset, and controlled to handle errors as specified.", "type": "FUNCTION_BLOCK", "name": "SEQUENCE_8", "input": [{"name": "in0", "type": "BOOL", "description": "Input signal for step 0 activation."}, {"name": "in1", "type": "BOOL", "description": "Input signal for step 1 activation."}, {"name": "in2", "type": "BOOL", "description": "Input signal for step 2 activation."}, {"name": "in3", "type": "BOOL", "description": "Input signal for step 3 activation."}, {"name": "in4", "type": "BOOL", "description": "Input signal for step 4 activation."}, {"name": "in5", "type": "BOOL", "description": "Input signal for step 5 activation."}, {"name": "in6", "type": "BOOL", "description": "Input signal for step 6 activation."}, {"name": "in7", "type": "BOOL", "description": "Input signal for step 7 activation."}, {"name": "start", "type": "BOOL", "description": "Start signal to initialize the sequence."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to reset the sequence state."}, {"name": "wait0", "type": "TIME", "description": "Wait time before executing step 0."}, {"name": "delay0", "type": "TIME", "description": "Delay time after completing step 0."}, {"name": "wait1", "type": "TIME", "description": "Wait time before executing step 1."}, {"name": "delay1", "type": "TIME", "description": "Delay time after completing step 1."}, {"name": "wait2", "type": "TIME", "description": "Wait time before executing step 2."}, {"name": "delay2", "type": "TIME", "description": "Delay time after completing step 2."}, {"name": "wait3", "type": "TIME", "description": "Wait time before executing step 3."}, {"name": "delay3", "type": "TIME", "description": "Delay time after completing step 3."}, {"name": "wait4", "type": "TIME", "description": "Wait time before executing step 4."}, {"name": "delay4", "type": "TIME", "description": "Delay time after completing step 4."}, {"name": "wait5", "type": "TIME", "description": "Wait time before executing step 5."}, {"name": "delay5", "type": "TIME", "description": "Delay time after completing step 5."}, {"name": "wait6", "type": "TIME", "description": "Wait time before executing step 6."}, {"name": "delay6", "type": "TIME", "description": "Delay time after completing step 6."}, {"name": "wait7", "type": "TIME", "description": "Wait time before executing step 7."}, {"name": "delay7", "type": "TIME", "description": "Delay time after completing step 7."}, {"name": "stop_on_error", "type": "BOOL", "description": "Flag to indicate if the sequence should stop on error."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for step 0."}, {"name": "Q1", "type": "BOOL", "description": "Output for step 1."}, {"name": "Q2", "type": "BOOL", "description": "Output for step 2."}, {"name": "Q3", "type": "BOOL", "description": "Output for step 3."}, {"name": "Q4", "type": "BOOL", "description": "Output for step 4."}, {"name": "Q5", "type": "BOOL", "description": "Output for step 5."}, {"name": "Q6", "type": "BOOL", "description": "Output for step 6."}, {"name": "Q7", "type": "BOOL", "description": "Output for step 7."}, {"name": "QX", "type": "BOOL", "description": "Any output active indicator."}, {"name": "run", "type": "BOOL", "description": "Indicator if the sequencer is currently running."}, {"name": "step", "type": "INT", "description": "Current step of the sequence."}, {"name": "status", "type": "BYTE", "description": "Current status of the sequencer."}], "in/out": [], "return_value": {}}
{"title": "UML Character Replacement Function", "description": "The function REPLACE_UML is designed to replace umlaut characters in a given string with their corresponding representations. It ensures that non-umlaut characters are copied directly to the output string. The function handles pointer manipulation and ensures that the output does not exceed the defined string length.", "type": "FUNCTION", "name": "REPLACE_UML", "input": [{"name": "str", "type": "STRING", "description": "The input string that may contain umlaut characters which need to be replaced."}], "output": [], "in/out": [], "return_value": {"type": "STRING", "description": "The output string after replacing umlaut characters, with appropriate handling for non-umlaut characters.", "fields": []}}
{"title": "Tuning Function Block", "description": "This function block implements a tuning system for adjusting a value Y based on various input signals for setting, incrementing, decrementing, and resetting values. The block manages state changes and time-based ramps for gradual adjustments while ensuring that the output value remains within specified limits.", "type": "FUNCTION_BLOCK", "name": "TUNE", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean flag to set the value of Y to SET_val."}, {"name": "SU", "type": "BOOL", "description": "A boolean flag indicating a request to increment the value of Y slowly."}, {"name": "SD", "type": "BOOL", "description": "A boolean flag indicating a request to decrement the value of Y slowly."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the value of Y to RST_val."}, {"name": "SS", "type": "REAL", "description": "A real number representing the step size for slow adjustments, default value is 0.1."}, {"name": "Limit_L", "type": "REAL", "description": "The lower limit for the output value Y."}, {"name": "LIMIT_H", "type": "REAL", "description": "The upper limit for the output value Y, default value is 100.0."}, {"name": "RST_val", "type": "REAL", "description": "The value to set Y to when RST is true."}, {"name": "SET_val", "type": "REAL", "description": "The value to set Y to when SET is true, default value is 100.0."}, {"name": "T1", "type": "TIME", "description": "The duration for the slow ramp operation, default value is 500 ms."}, {"name": "T2", "type": "TIME", "description": "The duration for the fast ramp operation, default value is 2 s."}, {"name": "S1", "type": "REAL", "description": "The step size for the slow ramp up operation, default value is 2.0."}, {"name": "S2", "type": "REAL", "description": "The step size for the fast ramp up operation, default value is 10.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value that is adjusted based on the input states and limits."}], "in/out": [], "return_value": null}
{"title": "Complex Power Calculation", "description": "This function calculates the power of a complex number X raised to another complex number Y using the formula CPOW(X, Y) = CEXP(CMUL(Y, CLOG(X))).", "type": "FUNCTION", "name": "CPOW", "input": [{"name": "X", "type": "Complex", "description": "The base complex number that is to be raised to a power."}, {"name": "Y", "type": "Complex", "description": "The exponent complex number that indicates the power to which X is raised."}], "output": [{"name": "CPOW", "type": "complex", "description": "The result of raising the complex number X to the power of the complex number Y."}], "in/out": [], "return_value": {"type": "complex", "description": "The calculated complex power result of X raised to Y."}}
{"title": "M_D Function Block", "description": "This function block manages the timing operations based on start and stop inputs while allowing for a reset condition. It tracks elapsed and preset time based on the provided inputs.", "type": "FUNCTION_BLOCK", "name": "M_D", "input": [{"name": "start", "type": "BOOL", "description": "A boolean input to start the timer."}, {"name": "stop", "type": "BOOL", "description": "A boolean input to stop the timer."}, {"name": "tmax", "type": "TIME", "description": "The maximum preset time for the timer, defaults to 14400 minutes."}, {"name": "rst", "type": "BOOL", "description": "A boolean input to reset the timer."}], "output": [{"name": "PT", "type": "TIME", "description": "The preset time that has been set or retained when stopping."}, {"name": "ET", "type": "TIME", "description": "The elapsed time counted while the timer is running."}, {"name": "run", "type": "BOOL", "description": "A boolean output indicating whether the timer is currently running."}], "in/out": [], "return_value": null}
{"title": "Calculate Geometric Average of an Array", "description": "This function computes the geometric average of a given array of real numbers. It takes a pointer to an array and its size as inputs. If any element of the array is less than or equal to zero, the function returns a geometric average of zero. Otherwise, it computes the geometric average by multiplying all positive elements and taking the nth root, where n is the number of elements processed.", "type": "FUNCTION", "name": "ARRAY_GAV", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to the array of real numbers whose geometric average is to be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating how many elements are present."}], "output": [{"name": "ARRAY_GAV", "type": "REAL", "description": "The computed geometric average of the array. Returns 0.0 if any array element is non-positive."}], "in/out": [], "return_value": {"type": "REAL", "description": "The geometric average of the input array computed from the positive elements.", "fields": []}}
{"title": "Inverse Function", "description": "This function computes the inverse of the input value X. If X is not zero, it returns the result as 1.0 divided by X. If X equals zero, the function does not change the value of INV.", "type": "FUNCTION", "name": "INV", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the inverse is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed inverse of the input value X.", "fields": []}}
{"title": "Resistance Temperature Detector Calculation", "description": "This function calculates the resistance of a Pt100 temperature sensor based on the input temperature (T) and reference resistance (R0). The calculation takes into account the temperature coefficients A, B, and C to determine the resistance at different temperature ranges.", "type": "FUNCTION", "name": "RES_PT", "input": [{"name": "T", "type": "REAL", "description": "The temperature in degrees Celsius for which the resistance is to be calculated."}, {"name": "R0", "type": "REAL", "description": "The reference resistance of the Pt100 sensor at 0 degrees Celsius."}], "output": [{"name": "RES_PT", "type": "REAL", "description": "The calculated resistance of the Pt100 sensor based on the input temperature and reference resistance."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resistance value computed from the input parameters for a Pt100 sensor."}}
{"title": "Linear Interpolation Function", "description": "This function performs linear interpolation for a given value X based on predefined points defined in an array XY. It ensures that the input number of points (Pts) is bound within the array size and calculates the interpolated value according to the linear segment defined by the provided points.", "type": "FUNCTION", "name": "LINEAR_INT", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the linear interpolation is to be calculated."}, {"name": "XY", "type": "ARRAY[1..20, 0..1] OF REAL", "description": "A two-dimensional array containing the points for interpolation, where each row represents a point with X and Y coordinates."}, {"name": "Pts", "type": "INT", "description": "The number of points defined in the XY array that should be used for interpolation."}], "output": [{"name": "LINEAR_INT", "type": "REAL", "description": "The result of the linear interpolation calculation for the given input X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The real number result obtained from the linear interpolation."}}
{"title": "Celsius to Fahrenheit Conversion Function", "description": "This function converts a temperature value from Celsius to Fahrenheit. The input is a temperature in Celsius, and the function calculates the corresponding temperature in Fahrenheit using the formula: Fahrenheit = Celsius * 1.8 + 32.0.", "type": "FUNCTION", "name": "C_TO_F", "input": [{"name": "celsius", "type": "REAL", "description": "The temperature value in degrees Celsius to be converted to Fahrenheit."}], "output": [{"name": "C_TO_F", "type": "REAL", "description": "The temperature value in degrees Fahrenheit obtained from the conversion."}], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in degrees Fahrenheit.", "fields": []}}
{"title": "A_TRIG Function Block", "description": "The A_TRIG function block detects a change in its input signal (IN) and indicates when the change exceeds a specified threshold (RES). It calculates the difference (D) between the current input and the last recorded input to determine if the output (Q) should be triggered. If the change exceeds the specified threshold, the output Q is set to TRUE, and the current input is recorded as the last input for future comparisons.", "type": "FUNCTION_BLOCK", "name": "A_TRIG", "input": [{"name": "IN", "type": "REAL", "description": "The current input value to be evaluated."}, {"name": "RES", "type": "REAL", "description": "The threshold value for the change detection."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output indicating whether a significant change has occurred."}, {"name": "D", "type": "REAL", "description": "The calculated difference between the current input and the last input."}], "in/out": [], "return_value": null}
{"title": "Sensor Intensity Calculation", "description": "This function calculates the sensor intensity based on the provided voltage, current, and resistances. The calculation adjusts the sensor intensity by incorporating the values of RP and RS, as well as the resistance RG which is derived from voltage and current, if the current is not zero.", "type": "FUNCTION", "name": "SENSOR_INT", "input": [{"name": "Voltage", "type": "REAL", "description": "The voltage input to the function."}, {"name": "Current", "type": "REAL", "description": "The current input to the function."}, {"name": "RP", "type": "REAL", "description": "The parallel resistance value used in the calculation."}, {"name": "RS", "type": "REAL", "description": "The series resistance value used in the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated sensor intensity value.", "fields": []}}
{"title": "Calculate Day of the Week", "description": "This function calculates the day of the week for a given date. It takes a date as input and returns an integer representing the day of the week, with 1 for Sunday, 2 for Monday, and so on.", "type": "FUNCTION", "name": "DAY_OF_WEEK", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the day of the week is to be calculated."}], "output": [{"name": "DAY_OF_WEEK", "type": "INT", "description": "An integer representing the day of the week, where 1 corresponds to Sunday."}], "in/out": [], "return_value": {"type": "INT", "description": "The day of the week as an integer.", "fields": []}}
{"title": "Compute Complex Hyperbolic Cosine", "description": "This function computes the hyperbolic cosine of a given complex number. The real part of the output is calculated using the hyperbolic cosine of the real part of the input, while the imaginary part is derived from the sine of the real and imaginary parts of the input.", "type": "FUNCTION", "name": "CCOSH", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the hyperbolic cosine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The hyperbolic cosine of the input complex number.", "fields": [{"name": "re", "type": "real", "description": "The real part of the hyperbolic cosine."}, {"name": "im", "type": "real", "description": "The imaginary part of the hyperbolic cosine."}]}}
{"title": "Real to String Formatting Function", "description": "This function converts a real number into a string representation with a specified number of decimal places and a specified decimal separator. The output string is formatted to ensure it has at least 8 characters, adding leading zeros if necessary, and includes a decimal point if the specified number of decimal places is greater than zero.", "type": "FUNCTION", "name": "REAL_TO_STRF", "input": [{"name": "IN", "type": "REAL", "description": "The real number to be converted to a string."}, {"name": "N", "type": "INT", "description": "The number of decimal places to round the real number to. Must be limited to the range 0..7."}, {"name": "D", "type": "STRING[1]", "description": "The character to be used as the decimal separator."}], "output": [{"name": "REAL_TO_STRF", "type": "string", "description": "The resulting string representation of the real number."}], "in/out": [], "return_value": {"type": "string", "description": "The string representation of the real number after conversion and formatting."}}
{"title": "Toggle Function Block", "description": "This function block implements a toggle mechanism that changes the state of the output Q each time there is a rising edge detected on the CLK input, while also handling a reset functionality through the rst input.", "type": "FUNCTION_BLOCK", "name": "TOGGLE", "input": [{"name": "CLK", "type": "BOOL", "description": "Clock input signal used for toggling the output state."}, {"name": "rst", "type": "BOOL", "description": "Reset input signal that sets the output Q to false when high."}], "output": [{"name": "Q", "type": "BOOL", "description": "Current state of the output signal, toggled based on the CLK input."}], "in/out": [], "return_value": null}
{"title": "Cyclic Redundancy Check (CRC) Generator", "description": "This function generates the CRC for a given byte array. It processes the input array with a specified size and computes the CRC based on defined polynomial values and settings for endianness. Input bytes can be reversed, and the output CRC can also be reflected according to user-defined parameters.", "type": "FUNCTION", "name": "CRC_GEN", "input": [{"name": "PT", "type": "POINTER TO ARRAY[0..32000] OF BYTE", "description": "Pointer to the input byte array that needs CRC generation."}, {"name": "SIZE", "type": "INT", "description": "Size of the input byte array, must be at least 4 bytes."}, {"name": "PL", "type": "INT", "description": "Polynomial degree which defines the CRC configuration."}, {"name": "PN", "type": "DWORD", "description": "Polynomial value used for CRC calculation."}, {"name": "INIT", "type": "DWORD", "description": "Initial value for the CRC calculation."}, {"name": "REV_IN", "type": "BOOL", "description": "Flag indicating whether to reverse the input bytes before processing."}, {"name": "REV_OUT", "type": "BOOL", "description": "Flag indicating whether to reverse the output CRC value."}, {"name": "XOR_OUT", "type": "DWORD", "description": "Value to XOR with the final CRC result."}], "output": [{"name": "CRC_GEN", "type": "DWORD", "description": "The resulting CRC value after processing the input byte array."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the calculated CRC value.", "fields": []}}
{"title": "Convert Hours to Time", "description": "This function converts a given input in hours (as a REAL type) into a TIME type by multiplying the input by 3600000 (the number of milliseconds in an hour) and converting it to DWORD.", "type": "FUNCTION", "name": "HOUR_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input value representing time in hours."}], "output": [], "in/out": [], "return_value": {"type": "TIME", "description": "The converted time in the TIME format.", "fields": []}}
{"title": "Random Number Generation Function", "description": "This function generates a random integer within a specified range defined by the parameters 'low' and 'high', based on a fractional part of the input 'last' multiplied by π (pi). The function truncates the random value before adding it to 'low' to ensure that the result remains within the specified bounds.", "type": "FUNCTION", "name": "RDM2", "input": [{"name": "last", "type": "INT", "description": "An integer input used to generate the random number."}, {"name": "low", "type": "INT", "description": "The lower bound of the range for the random number generation."}, {"name": "high", "type": "INT", "description": "The upper bound of the range for the random number generation."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The generated random integer within the specified range from 'low' to 'high'."}}
{"title": "SINC Function", "description": "This function calculates the sine of a given input value divided by the input itself, returning 1.0 when the input is zero to handle the singularity at that point.", "type": "FUNCTION", "name": "SINC", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the sine calculation is to be performed."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the sine calculation, or 1.0 if the input value is zero."}}
{"title": "Complex Arc Sine Function", "description": "This function computes the arc sine of a complex number. It takes a complex input and produces a complex output that represents the arc sine of the input value, following the mathematical definition of the complex arc sine function.", "type": "FUNCTION", "name": "CASIN", "input": [{"name": "X", "type": "complex", "description": "Input variable of type complex, representing the complex number for which the arc sine will be calculated."}], "output": [{"name": "CASIN", "type": "complex", "description": "Output variable of type complex, representing the arc sine of the input complex number X."}], "in/out": [], "return_value": {"type": "complex", "description": "The resulting complex number from the computation of the arc sine.", "fields": [{"name": "re", "type": "real", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "real", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Bit Load Function", "description": "This function modifies a specified bit of a BYTE input based on the provided boolean flag. If the flag is true, it sets the bit at the specified position to 1; if false, it clears the bit at that position to 0.", "type": "FUNCTION", "name": "BIT_LOAD_B", "input": [{"name": "IN", "type": "BYTE", "description": "The input BYTE value that will be modified."}, {"name": "VAL", "type": "BOOL", "description": "A boolean flag that determines whether to set or clear the bit at the specified position."}, {"name": "POS", "type": "INT", "description": "The position of the bit in the BYTE that needs to be set or cleared."}], "output": [{"name": "BIT_LOAD_B", "type": "BYTE", "description": "The modified BYTE after the bit operation."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The value of the modified BYTE after the operation.", "fields": []}}
{"title": "CLK_PULSE Function Block", "description": "This function block generates a pulse output for a specified number of cycles based on a given time period. It can be reset and counts the number of pulses generated. The output, Q, is set to TRUE during the pulse generation cycle.", "type": "FUNCTION_BLOCK", "name": "CLK_PULSE", "input": [{"name": "PT", "type": "TIME", "description": "The time period for generating each pulse."}, {"name": "N", "type": "INT", "description": "The number of pulses to generate. A value of 0 means continuous pulses."}, {"name": "RST", "type": "BOOL", "description": "A reset flag to initialize the pulse generation process."}], "output": [{"name": "Q", "type": "BOOL", "description": "Indicates when a pulse is generated (TRUE during a pulse)."}, {"name": "CNT", "type": "INT", "description": "Counts the number of pulses generated."}, {"name": "RUN", "type": "BOOL", "description": "Indicates if pulse generation is currently running."}], "in/out": [], "return_value": {}}
{"title": "D_TRIG Function Block", "description": "This function block detects changes in the input signal and calculates the difference between the current and previous input values. It provides an output indicating whether a change has occurred and the amount of change.", "type": "FUNCTION_BLOCK", "name": "D_TRIG", "input": [{"name": "in", "type": "DWORD", "description": "Current input value to be monitored."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output flag indicating whether the input has changed since the last scan."}, {"name": "X", "type": "DWORD", "description": "Output value that represents the difference between the current input and the last input."}], "in/out": [], "return_value": null}
{"title": "Binary to Byte Conversion", "description": "This function converts a binary string representation (up to 12 characters) into its corresponding byte value. The input binary string should consist only of '0's and '1's, and the function processes each character to compute the final byte value.", "type": "FUNCTION", "name": "BIN_TO_BYTE", "input": [{"name": "BIN", "type": "STRING(12)", "description": "A binary string consisting of '0's and '1's with a maximum length of 12 characters."}], "output": [{"name": "BIN_TO_BYTE", "type": "BYTE", "description": "The resulting byte value obtained from the binary string."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The byte value that represents the input binary string.", "fields": []}}
{"title": "Convert Direction to Degrees", "description": "This function takes a direction represented as a string and returns its corresponding degree value. The direction is matched against predefined language settings, and the function ensures that the input length is respected to prevent errors.", "type": "FUNCTION", "name": "DIR_TO_DEG", "input": [{"name": "DIR", "type": "STRING[3]", "description": "A string representation of the direction, limited to three characters."}, {"name": "L", "type": "INT", "description": "An integer indicating the language option, used for direction localization."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The degree representation of the input direction calculated as per the language-specific mapping.", "fields": []}}
{"title": "Character Replacement Function", "description": "This function replaces occurrences of a specified substring (SRC) in a given string (STR) with another substring (REP). It ensures that the lengths of SRC and REP are the same before proceeding with the replacement. If SRC is longer than REP, SRC will be trimmed to match the length of REP, and vice versa. The function then performs the replacement for each character in the original string.", "type": "FUNCTION", "name": "REPLACE_CHARS", "input": [{"name": "STR", "type": "STRING", "description": "The string in which the replacement will occur."}, {"name": "SRC", "type": "STRING", "description": "The substring to be replaced in STR."}, {"name": "REP", "type": "STRING", "description": "The substring that will replace occurrences of SRC."}], "output": [{"name": "REPLACE_CHARS", "type": "STRING", "description": "The resulting string after replacement operations."}], "in/out": [], "return_value": {"type": "string", "description": "The modified string after replacing characters according to the defined rules."}}
{"title": "Filter Dynamics with Time Integration", "description": "This functional block implements a filter that integrates input over time using differential calculations. It takes an input value 'X' of type DWORD and a time interval 'T' of type TIME to compute an output 'Y' of type DWORD, representing the integrated value. The block initializes the integration process and continuously updates the integrated value based on the elapsed time and input changes.", "type": "FUNCTION_BLOCK", "name": "FILTER_DW", "input": [{"name": "X", "type": "DWORD", "description": "Input value to be filtered."}, {"name": "T", "type": "TIME", "description": "Time interval over which the integration is computed."}], "output": [{"name": "Y", "type": "DWORD", "description": "The filtered output value."}], "in/out": [], "return_value": {}}
{"title": "Input Control Function for ISC", "description": "This function evaluates whether the input byte IN is less than 32 or equal to 127, returning a boolean value indicating the result of this evaluation.", "type": "FUNCTION", "name": "ISC_CTRL", "input": [{"name": "IN", "type": "BYTE", "description": "A byte input value that will be evaluated by the function."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input IN is less than 32 or equal to 127; otherwise, returns FALSE."}}
{"title": "First-order Transfer Function with Time Constant", "description": "This function block implements a first-order transfer function that uses a time constant T and a gain K to process an input signal. The output signal is adjusted based on the previous output and the elapsed time since the last computation. The block initializes on the first call or when the time parameter T is zero, setting the output equal to K times the input.", "type": "FUNCTION_BLOCK", "name": "FT_PT1", "input": [{"name": "in", "type": "REAL", "description": "The input signal for the transfer function."}, {"name": "T", "type": "TIME", "description": "The time constant for the transfer function."}, {"name": "K", "type": "REAL", "description": "The gain factor applied to the input signal. Default value is 1.0."}], "output": [{"name": "out", "type": "REAL", "description": "The output signal of the transfer function."}], "in/out": [], "return_value": null}
{"title": "METER Function Block", "description": "This function block measures the current consumption based on the input parameters and maintains an output value that can be used for further processing. It accounts for execution timing and supports resetting of the measured values.", "type": "FUNCTION_BLOCK", "name": "METER", "input": [{"name": "M1", "type": "REAL", "description": "First measurement input."}, {"name": "M2", "type": "REAL", "description": "Second measurement input."}, {"name": "I1", "type": "BOOL", "description": "Boolean indicator for the first measurement."}, {"name": "I2", "type": "BOOL", "description": "Boolean indicator for the second measurement."}, {"name": "D", "type": "REAL", "description": "Divisor used for calculations, defaults to 1.0."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to initialize measured values."}], "output": [{"name": "MX", "type": "REAL", "description": "Current output value reflecting the consumption measurement."}], "in/out": [], "return_value": null}
{"title": "Convert Degrees to Radians with Modulo Operation", "description": "This function converts an angle in degrees to radians while ensuring that the result is restricted to the range [0, 2PI]. The conversion follows the formula: radians = degrees * (π / 180). The output value is then limited using the MODR operation.", "type": "FUNCTION", "name": "RAD", "input": [{"name": "DEG", "type": "REAL", "description": "Degrees as input variable."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated radians value, constrained to be within the range [0, 2PI]."}}
{"title": "Replace All Occurrences of a Substring", "description": "This function replaces all occurrences of a specified substring (src) within a given string (str) with a new substring (rep). It does this by iteratively finding and replacing each occurrence until none are left.", "type": "FUNCTION", "name": "REPLACE_ALL", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The original string in which occurrences of the source substring will be replaced."}, {"name": "src", "type": "STRING[STRING_LENGTH]", "description": "The substring that needs to be replaced in the original string."}, {"name": "rep", "type": "STRING[STRING_LENGTH]", "description": "The substring that will replace each occurrence of the source substring."}], "output": [{"name": "REPLACE_ALL", "type": "string", "description": "The modified string after all occurrences of the source substring have been replaced."}], "in/out": [], "return_value": {"type": "string", "description": "The final string resulting from the replacement of all occurrences."}}
{"title": "Fractional Part Calculation", "description": "This function calculates the fractional part of a given real number. If the absolute value of the input number is less than 2 billion, the function returns the fractional part calculated by subtracting the truncated integer value from the original number. If the absolute value of the input number exceeds or equals 2 billion, the function returns 0.", "type": "FUNCTION", "name": "FRACT", "input": [{"name": "x", "type": "REAL", "description": "The real number from which the fractional part is to be calculated."}], "output": [{"name": "FRACT", "type": "REAL", "description": "The calculated fractional part of the input number, or 0 if the absolute value of the input number is greater than or equal to 2 billion."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the fractional component of the input real number."}}
{"title": "Complex Conjugate Function", "description": "This function calculates the complex conjugate of a given complex number by negating its imaginary part, while retaining its real part.", "type": "FUNCTION", "name": "CCON", "input": [{"name": "X", "type": "COMPLEX", "description": "The input complex number for which the conjugate is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The complex conjugate of the input complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex conjugate."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex conjugate, which is the negation of the input's imaginary part."}]}}
{"title": "Find First Non-Numeric Character", "description": "This function identifies the position of the first non-numeric character in a given string, starting from the end of the string and moving backwards. If all characters are numeric or if the string is empty, it returns 0.", "type": "FUNCTION", "name": "FINDB_NONUM", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The string in which to search for a non-numeric character."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the first non-numeric character found in the string. Returns 0 if no non-numeric character is found.", "fields": []}}
{"title": "Scale a Value between Two Ranges", "description": "This function scales a given input value from one range to another. The input value X is constrained by the low and high limits (I_LO and I_HI). If the input high limit is the same as the input low limit, the output will be set to the output low limit (O_LO). Otherwise, the function computes the scaled value based on the specified output range (O_LO to O_HI).", "type": "FUNCTION", "name": "SCALE_D", "input": [{"name": "X", "type": "DWORD", "description": "The input value to be scaled."}, {"name": "I_LO", "type": "DWORD", "description": "The lower limit of the input range."}, {"name": "I_HI", "type": "DWORD", "description": "The upper limit of the input range."}, {"name": "O_LO", "type": "REAL", "description": "The lower limit of the output range."}, {"name": "O_HI", "type": "REAL", "description": "The upper limit of the output range."}], "output": [{"name": "SCALE_D", "type": "REAL", "description": "The scaled output value based on the input range and output range."}], "in/out": [], "return_value": {"type": "REAL", "description": "The function returns the scaled value."}}
{"title": "1D Timer Function Block", "description": "This function block implements a one-dimensional timer functionality, managing input and output states based on timing conditions. It resets when the RST input is true, times an input signal, and toggles output signals based on predefined time intervals.", "type": "FUNCTION_BLOCK", "name": "TP_1D", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input signal that starts the timing process when true."}, {"name": "PT1", "type": "TIME", "description": "The time duration that determines how long the output Q remains true after the input IN is activated."}, {"name": "PTD", "type": "TIME", "description": "The delay time which controls when output W is activated after the input has been processed."}, {"name": "RST", "type": "BOOL", "description": "A boolean reset input that, when true, resets the outputs and internal states."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output indicating the active state based on the input and time conditions."}, {"name": "W", "type": "BOOL", "description": "The boolean output indicating the delayed state which activates after the PTD time if conditions are met."}], "in/out": [], "return_value": null}
{"title": "UTC to Local Time Conversion", "description": "This function converts a given UTC time to local time based on the specified time zone offset and daylight saving time (DST) considerations. The function takes into account whether DST is enabled and adjusts the time accordingly.", "type": "FUNCTION", "name": "UTC_TO_LTIME", "input": [{"name": "UTC", "type": "DT", "description": "The UTC date and time to be converted."}, {"name": "DST_ENABLE", "type": "BOOL", "description": "A boolean flag indicating whether daylight saving time adjustments should be applied."}, {"name": "TIME_ZONE_OFFSET", "type": "INT", "description": "The time zone offset in minutes to be applied to the UTC time."}], "output": [{"name": "UTC_TO_LTIME", "type": "DT", "description": "The converted local time in date and time format."}], "in/out": [], "return_value": {"type": "DT", "description": "The function returns the local time corresponding to the input UTC time after applying the necessary adjustments for the time zone and DST.", "fields": []}}
{"title": "Convert BCD to Integer", "description": "This function converts a Binary-Coded Decimal (BCD) represented as a BYTE into its corresponding INTEGER value. The conversion process masks the lower four bits of the BYTE and shifts the upper four bits to compute the integer representation.", "type": "FUNCTION", "name": "BCDC_TO_INT", "input": [{"name": "IN", "type": "BYTE", "description": "A BYTE input representing the BCD value to be converted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The resulting integer value derived from the given BCD input."}}
{"title": "Temperature Conversion from Kelvin to Celsius", "description": "This function converts a temperature value from Kelvin to Celsius by adding the temperature constant T0. The implementation should ensure accuracy in the conversion process.", "type": "FUNCTION", "name": "K_TO_C", "input": [{"name": "Kelvin", "type": "REAL", "description": "The temperature value in Kelvin that needs to be converted to Celsius."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in Celsius.", "fields": []}}
{"title": "TONOF Function Block", "description": "The TONOF function block implements a timer functionality where it controls a boolean output based on input conditions and designated on/off timings. The block checks the input signals and manages the state of the output based on timing parameters provided.", "type": "FUNCTION_BLOCK", "name": "TONOF", "input": [{"name": "IN", "type": "BOOL", "description": "The boolean input signal that triggers the timer."}, {"name": "T_ON", "type": "TIME", "description": "The time duration for which the output remains active when the input is true."}, {"name": "T_OFF", "type": "TIME", "description": "The time duration for which the output remains inactive when the input is false."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output signal indicating the state after applying the timing logic."}], "in/out": [], "return_value": null}
{"title": "AOUT1 Function Specification", "description": "The AOUT1 function calculates a DWORD output based on the provided input parameters. It applies bit shifting and scaling based on the specified range defined by low and high values. The input can also be limited based on specified criteria and can account for the sign of the input value.", "type": "FUNCTION", "name": "AOUT1", "input": [{"name": "in", "type": "REAL", "description": "The input real value that will be processed to compute the output."}, {"name": "Bit_0", "type": "INT", "description": "The starting bit position for the output value. This is a constant input."}, {"name": "Bit_N", "type": "INT", "description": "The ending bit position for the output value, defaulting to 31."}, {"name": "sign", "type": "INT", "description": "The sign bit indicator, defaulting to 255."}, {"name": "low", "type": "REAL", "description": "The minimum value that input is limited to."}, {"name": "high", "type": "REAL", "description": "The maximum value available, defaulting to 10.0."}], "output": [{"name": "AOUT1", "type": "DWORD", "description": "The calculated DWORD output value based on the processed input."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the calculated DWORD output value."}}
{"title": "Buffer to String Conversion", "description": "This function converts a specified range of bytes from a buffer into a string representation. The function takes a pointer to a byte array and parameters indicating the size of the buffer, the start, and stop indices for the conversion. It performs bounds checking and ensures the final string does not exceed the predefined maximum string length before terminating the string.", "type": "FUNCTION", "name": "BUFFER_TO_STRING", "input": [{"name": "PT", "type": "POINTER TO ARRAY [0..32767] OF BYTE", "description": "A pointer to the byte array that contains the data to be converted to a string."}, {"name": "SIZE", "type": "UINT", "description": "The total size of the byte array pointed to by PT."}, {"name": "START", "type": "UINT", "description": "The starting index in the byte array from which to begin the conversion."}, {"name": "STOP", "type": "UINT", "description": "The stopping index in the byte array at which to end the conversion."}], "output": [{"name": "string", "type": "string", "description": "The resulting string obtained from the specified range of the byte buffer."}], "in/out": [], "return_value": {"type": "string", "description": "The final string after converting the bytes from the buffer.", "fields": []}}
{"title": "Find Last Numeric Character in String", "description": "This function, FINDB_NUM, aims to find the position of the last numeric character or a period in a given string. If a numeric character (0-9) or a period is found, the function returns the position (1-based index) of that character. If there are no numeric characters or periods in the string, it returns 0.", "type": "FUNCTION", "name": "FINDB_NUM", "input": [{"name": "str", "type": "STRING", "description": "Input variable of type STRING with a specified length.", "fields": []}], "output": [{"name": "FINDB_NUM", "type": "INT", "description": "The position of the last numeric character or period in the input string, or 0 if none exists.", "fields": []}], "in/out": [], "return_value": {"type": "INT", "description": "The return value indicates the position of the last numeric character or period found in the string.", "fields": []}}
{"title": "STAIR2 Function Block", "description": "The STAIR2 function block performs a stair-step rounding operation on a given real number X based on a specified step size D. It outputs the rounded value Y based on the conditions defined. If the step size D is positive, Y is calculated based on the relation to X and adjusted according to D. If D is not positive, Y will simply be equal to X.", "type": "FUNCTION_BLOCK", "name": "STAIR2", "input": [{"name": "X", "type": "REAL", "description": "The input real value that needs to be rounded."}, {"name": "D", "type": "REAL", "description": "The step size for the rounding operation. Must be a positive real number to perform the stair-step calculation."}], "output": [{"name": "Y", "type": "REAL", "description": "The output real value after applying the stair-step rounding logic based on inputs X and D."}], "in/out": [], "return_value": null}
{"title": "String to DWORD Conversion Function", "description": "This function converts a formatted string representation of a number into a DWORD. The function handles binary, octal, hexadecimal, and decimal formats based on specific prefixes in the input string.", "type": "FUNCTION", "name": "FSTRING_TO_DWORD", "input": [{"name": "IN", "type": "STRING[40]", "description": "The input string which can represent a number in binary, octal, hexadecimal, or decimal format."}], "output": [{"name": "FSTRING_TO_DWORD", "type": "DWORD", "description": "The DWORD representation of the input string after conversion from its specified format."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the converted DWORD value from the input string.", "fields": []}}
{"title": "Average Calculation Function Block", "description": "This function block calculates the average of incoming real values over a defined number of cycles, utilizing a delay mechanism for buffering the inputs. The block should reinitialize the buffer when reset is triggered and maintain control of the input flow with the enable signal.", "type": "FUNCTION_BLOCK", "name": "FT_AVG", "input": [{"name": "IN", "type": "REAL", "description": "The input real value to be averaged."}, {"name": "E", "type": "BOOL", "description": "Enable signal to control the calculation of the average, defaults to TRUE."}, {"name": "N", "type": "INT", "description": "The number of cycles for which the average is calculated, limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to initialize the buffer with the actual input value instead of zero."}], "output": [{"name": "AVG", "type": "REAL", "description": "The computed average of the input values over the specified cycles."}], "in/out": [], "return_value": null}
{"title": "Calculation of Solar Times", "description": "This function block calculates the solar times for a given geographical location, providing the times for sunrise, sunset, and midday along with the sun's declination at midday. The user needs to provide the latitude and longitude of the location, the UTC date for the calculation, and an optional height adjustment for sunrise.", "type": "FUNCTION_BLOCK", "name": "SUN_TIME", "input": [{"name": "LATITUDE", "type": "REAL", "description": "Latitude of geographical position in degrees."}, {"name": "LONGITUDE", "type": "REAL", "description": "Longitude of geographical position in degrees."}, {"name": "UTC", "type": "DATE", "description": "World time in UTC format."}, {"name": "H", "type": "REAL", "description": "Height above horizon for sunrise, default value is -0.83333333333."}], "output": [{"name": "MIDDAY", "type": "TOD", "description": "Astrological midday in hours when sun stands at south direction."}, {"name": "SUN_RISE", "type": "TOD", "description": "Sunrise time for the current day in local time."}, {"name": "SUN_SET", "type": "TOD", "description": "Sunset time for the current day in local time."}, {"name": "SUN_DECLINATION", "type": "REAL", "description": "Sun declination above horizon at midday in degrees."}], "in/out": [], "return_value": {}}
{"title": "Convert Byte to UML Representation", "description": "This function converts a given BYTE input into its respective UML formatted string representation. Special German characters are transformed into their UML representations, while other BYTE values are handled using a character to string conversion.", "type": "FUNCTION", "name": "TO_UML", "input": [{"name": "IN", "type": "BYTE", "description": "A BYTE input that represents a character in a specific encoding."}], "output": [{"name": "TO_UML", "type": "string", "description": "The UML representation of the input byte, transformed according to predefined rules."}], "in/out": [], "return_value": {"type": "string", "description": "The resulting UML string representation of the input BYTE."}}
{"title": "Calculate Days in Year", "description": "This function calculates the number of days in a year based on the provided date. It checks if the date corresponds to a leap year and returns 366 if it does; otherwise, it returns 365.", "type": "FUNCTION", "name": "DAYS_IN_YEAR", "input": [{"name": "IDATE", "type": "DATE", "description": "The date for which the number of days in the year needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The number of days in the year corresponding to the given date (365 or 366)."}}
{"title": "Scale Input Values with Offset", "description": "This function retrieves two input values based on boolean selection inputs, scales these values using a factor, and adds an offset. The function also considers minimum and maximum limits for the input values.", "type": "FUNCTION", "name": "SCALE_X2", "input": [{"name": "IN1", "type": "BOOL", "description": "First boolean selector for input selection."}, {"name": "IN2", "type": "BOOL", "description": "Second boolean selector for input selection."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the selected inputs."}, {"name": "O", "type": "REAL", "description": "Offset added to the result after scaling."}, {"name": "IN1_MIN", "type": "REAL", "description": "Minimum value for input 1 when selected."}, {"name": "IN1_MAX", "type": "REAL", "description": "Maximum value for input 1 when selected. Default is 1000.0.", "fields": []}, {"name": "IN2_MIN", "type": "REAL", "description": "Minimum value for input 2 when selected."}, {"name": "IN2_MAX", "type": "REAL", "description": "Maximum value for input 2 when selected. Default is 1000.0.", "fields": []}], "output": [{"name": "SCALE_X2", "type": "REAL", "description": "The resultant value after scaling and applying the offset."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final calculated value after processing the input parameters.", "fields": []}}
{"title": "RMP Next Function Block", "description": "This function block determines the direction and state of a ramp based on the input values and conditions. It handles the ramping behavior and adjusts the output state UP, DN, and DIR based on the input conditions and the state of the timer.", "type": "FUNCTION_BLOCK", "name": "_RMP_NEXT", "input": [{"name": "E", "type": "BOOL", "description": "Enable/disable input, with initial value set to TRUE."}, {"name": "IN", "type": "BYTE", "description": "Current input value for the ramp control."}, {"name": "TR", "type": "TIME", "description": "Time duration for ramping state when moving upwards."}, {"name": "TF", "type": "TIME", "description": "Time duration for ramping state when moving downwards."}, {"name": "TL", "type": "TIME", "description": "Lock time duration for the ramp."}], "output": [{"name": "DIR", "type": "BOOL", "description": "Indicates the direction of ramping; upwards if TRUE."}, {"name": "UP", "type": "BOOL", "description": "Output indicating if the ramp is moving upwards."}, {"name": "DN", "type": "BOOL", "description": "Output indicating if the ramp is moving downwards."}], "in/out": [{"name": "OUT", "type": "BYTE", "description": "Current output value that can be modified by the function block."}], "return_value": null}
{"title": "FF_RSE Function Block", "description": "The FF_RSE function block is designed to implement a rising edge triggered flip-flop with an asynchronous reset capability. The block uses three input parameters: CS for the clock signal, CR for the reset signal, and RST for an external reset. The output Q indicates the current state of the flip-flop, which can be set to TRUE or FALSE based on the input signals.", "type": "FUNCTION_BLOCK", "name": "FF_RSE", "input": [{"name": "CS", "type": "BOOL", "description": "Clock signal input, triggers a transition on the rising edge."}, {"name": "CR", "type": "BOOL", "description": "Reset signal input, sets the output Q to FALSE on the rising edge."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset signal to set output Q to FALSE immediately."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal representing the state of the flip-flop (TRUE or FALSE)."}], "in/out": [], "return_value": null}
{"title": "Dead Band Calculation Function", "description": "This function calculates the dead band value based on the input value X and a specified limit L. If X exceeds L, the function returns the difference between X and L. If X is lower than -L, it returns the sum of X and L. If X is within the range of -L to L, it returns 0.0.", "type": "FUNCTION", "name": "DEAD_BAND", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the dead band is calculated."}, {"name": "L", "type": "REAL", "description": "The limit value used to determine the dead band thresholds."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated dead band value based on the input conditions."}}
{"title": "Inverse Hyperbolic Cosine Calculation", "description": "This function calculates the inverse hyperbolic cosine (ACOSH) of a given real number input. The function uses the mathematical formula ACOSH(x) = ln(sqrt(x^2 - 1) + x) to compute the result.", "type": "FUNCTION", "name": "ACOSH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the inverse hyperbolic cosine is to be calculated. This value must be greater than or equal to 1."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the inverse hyperbolic cosine calculation.", "fields": []}}
{"title": "Ceiling Function", "description": "This function calculates the ceiling value of a given real number X. The ceiling value is the smallest integer that is greater than or equal to X. If the result of converting X to an integer is less than X, it increments the integer value by one to ensure the ceiling condition is satisfied.", "type": "FUNCTION", "name": "CEIL", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the ceiling value is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The ceiling value of the input real number X, representing the smallest integer greater than or equal to X."}}
{"title": "Time to DWORD Conversion with Offset and Debugging", "description": "This function converts the current time to a DWORD value and applies an offset if debugging is enabled. The conversion process must account for the full range of time values, ensuring that an overflow correctly wraps around rather than resetting to zero. Additional considerations are provided for compatibility with specific hardware setups and debugging purposes.", "type": "FUNCTION", "name": "T_PLC_US", "input": [{"name": "debug", "type": "BOOL", "description": "Flag indicating whether debug mode is active."}, {"name": "N", "type": "INT", "description": "Number of bits to shift in the conversion process."}, {"name": "offset", "type": "DWORD", "description": "Offset to apply to the converted time value."}], "output": [{"name": "T_PLC_US", "type": "DWORD", "description": "The resulting DWORD value derived from the time conversion."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the converted time value as a DWORD."}}
{"title": "Beta Function Calculation", "description": "This function calculates the beta function value using the gamma function for two input real numbers, X and Y. The beta function is defined as the product of gamma of X and gamma of Y, divided by gamma of the sum of X and Y.", "type": "FUNCTION", "name": "BETA", "input": [{"name": "X", "type": "REAL", "description": "A real number input representing the first parameter for the beta function calculation."}, {"name": "Y", "type": "REAL", "description": "A real number input representing the second parameter for the beta function calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the beta function calculation, which is a real number."}}
{"title": "Fibonacci Function", "description": "This function calculates the Fibonacci number for a given integer input X. The function returns -1 for any input less than 0 or greater than 46. For inputs between 0 and 46, it computes the Fibonacci number using an iterative method. If the input is less than 2, it returns the input value directly.", "type": "FUNCTION", "name": "FIB", "input": [{"name": "X", "type": "INT", "description": "An integer input for which the Fibonacci number needs to be calculated."}], "output": [{"name": "FIB", "type": "DINT", "description": "The calculated Fibonacci number, or -1 for invalid input."}], "in/out": [], "return_value": {"type": "DINT", "description": "The final result of the Fibonacci calculation.", "fields": []}}
{"title": "TMIN Function Block", "description": "The TMIN function block processes an input signal and a time period, producing an output signal based on the logical combination of the input and a timer's output. The block should be able to handle boolean input and time input to determine the active state of the output.", "type": "FUNCTION_BLOCK", "name": "TMIN", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input signal that influences the output state."}, {"name": "PT", "type": "TIME", "description": "The time period for which the input signal should be considered."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output signal indicating the current state based on the input and timer."}], "in/out": [], "return_value": null}
{"title": "Calculate Area of an Ellipse", "description": "This function calculates the area of an ellipse using the radii R1 and R2. The area is computed using the formula A = π * R1 * R2, where π is a mathematical constant.", "type": "FUNCTION", "name": "ELLIPSE_A", "input": [{"name": "R1", "type": "REAL", "description": "The length of the semi-major axis of the ellipse."}, {"name": "R2", "type": "REAL", "description": "The length of the semi-minor axis of the ellipse."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated area of the ellipse.", "fields": []}}
{"title": "Rate of Motion Profile (RMP)", "description": "This function block generates a ramp signal based on the input parameters, adjusting the ramp according to the current time and direction. It calculates the steps to be applied to the ramp value based on enabling signals, direction changes, and elapsed time. This helps in controlling a process or actuator that requires smooth ramping behavior.", "type": "FUNCTION_BLOCK", "name": "_RMP_W", "input": [{"name": "DIR", "type": "BOOL", "description": "Indicates the direction of the ramp. True for one direction and false for the opposite."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the ramp calculation. Default value is TRUE."}, {"name": "TR", "type": "TIME", "description": "Time interval used for calculating the ramp step."}], "output": [{"name": "RMP", "type": "WORD", "description": "The calculated ramp value constrained between 0 and 65535."}], "in/out": [], "return_value": null}
{"title": "Get Element from String List", "description": "This function retrieves a specific element from a delimited string list based on the provided position. It uses a defined separator to identify individual elements in the list and populates the output with the requested element until the end of the list or the end of the string is reached.", "type": "FUNCTION", "name": "LIST_GET", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator used to delimit elements in the input string list."}, {"name": "POS", "type": "INT", "description": "The position of the element to be retrieved from the list (0-based index)."}], "output": [{"name": "LIST_GET", "type": "string", "description": "The output string containing the retrieved element from the input list based on the specified position."}], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The input/output string list from which the element will be retrieved."}], "return_value": {"type": "string", "description": "Returns the string representation of the element at the specified position in the list."}}
{"title": "Lambert W Function Calculation", "description": "This function calculates the Lambert W value for a given input X. It checks for valid input ranges, applies a formula based on the input value, and iteratively refines the result to provide an accurate calculation of the Lambert W function.", "type": "FUNCTION", "name": "LAMBERT_W", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the Lambert W function is to be calculated."}], "output": [{"name": "LAMBERT_W", "type": "REAL", "description": "The calculated Lambert W value. Returns -1000.0 for invalid inputs and 0 for an input of 0."}], "in/out": [], "return_value": {"type": "REAL", "description": "The return value of the Lambert W function computation.", "fields": []}}
{"title": "Convert Seconds to TIME", "description": "This function converts a floating-point value representing seconds into a TIME data type. The input value is multiplied by 1000 to convert seconds into milliseconds before conversion to TIME format. The function also includes historical revisions indicating updates and adjustments made to its calculation methodology.", "type": "FUNCTION", "name": "SECOND_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input value representing time in seconds that needs to be converted to TIME."}], "output": [{"name": "SECOND_TO_TIME", "type": "TIME", "description": "The output time value converted from the input seconds into the TIME format."}], "in/out": [], "return_value": {"type": "TIME", "description": "Returns the converted TIME value."}}
{"title": "String Trimming Function", "description": "This function, TRIM, is designed to remove leading spaces from a given string input. It takes in a string of maximum length defined by STRING_LENGTH and returns the trimmed version of that string, ensuring that all leading spaces are removed.", "type": "FUNCTION", "name": "TRIM", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string from which leading spaces need to be removed."}], "output": [{"name": "TRIM", "type": "string", "description": "The output string after leading spaces have been stripped away."}], "in/out": [], "return_value": {"type": "string", "description": "The trimmed string that results from the removal of leading spaces.", "fields": []}}
{"title": "Convert Weekday Integer to String Representation", "description": "This function takes an integer representing a weekday and converts it into a corresponding string representation based on the specified language. The function supports two language formats and checks for valid input ranges.", "type": "FUNCTION", "name": "WEEKDAY_TO_STRING", "input": [{"name": "WDAY", "type": "INT", "description": "An integer representing the weekday. Valid values are from 1 to 7."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language choice. If set to 0, the default language is used."}, {"name": "LX", "type": "INT", "description": "An integer that specifies the language format. 0 for standard, 2 for an alternative format."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "Returns the string representation of the weekday in the specified language.", "fields": []}}
{"title": "Manual Control Function Block", "description": "This function block implements a manual control mechanism based on various input signals. It processes inputs to control an output signal and provides status codes based on the operations performed. The block is enabled and reacts to 'ON' and 'OFF' commands while also allowing for manual input.", "type": "FUNCTION_BLOCK", "name": "MANUAL_2", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal to the function block indicating the manual input state."}, {"name": "ENA", "type": "BOOL", "description": "Enable signal to activate the function block."}, {"name": "ON", "type": "BOOL", "description": "Signal indicating a request to turn the output ON."}, {"name": "OFF", "type": "BOOL", "description": "Signal indicating a request to turn the output OFF."}, {"name": "MAN", "type": "BOOL", "description": "Manual control input signal when neither ON nor OFF is active."}], "output": [{"name": "Q", "type": "BOOL", "description": "Current output state of the function block."}, {"name": "STATUS", "type": "BYTE", "description": "Status code representing the current state of processing."}], "in/out": [], "return_value": null}
{"title": "Complex Sine Function", "description": "The function CSIN calculates the sine of a complex number. It takes a complex number as input and computes both the real and imaginary parts of the result using hyperbolic sine and cosine functions.", "type": "FUNCTION", "name": "CSIN", "input": [{"name": "X", "type": "complex", "description": "A complex number input for which the sine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The sine of the complex input X, returned as a complex number.", "fields": [{"name": "re", "type": "real", "description": "The real part of the sine result."}, {"name": "im", "type": "real", "description": "The imaginary part of the sine result."}]}}
{"title": "Timer Counter Function Block", "description": "This function block calculates the time difference between consecutive calls based on the system timer. It initializes a timer counter on the first call and updates it on subsequent calls.", "type": "FUNCTION_BLOCK", "name": "TC_MS", "input": [], "output": [{"name": "TC", "type": "DWORD", "description": "The calculated time difference in milliseconds between the current timer value and the last timer value."}], "in/out": [], "return_value": null}
{"title": "HYST_1 Function Block", "description": "This function block implements a hysteresis control logic. It takes an input value and compares it against defined high and low thresholds to produce boolean outputs representing the state of a control system.", "type": "FUNCTION_BLOCK", "name": "HYST_1", "input": [{"name": "In", "type": "REAL", "description": "The input value to be evaluated against the threshold limits."}, {"name": "high", "type": "REAL", "description": "The upper threshold for the hysteresis comparison."}, {"name": "low", "type": "REAL", "description": "The lower threshold for the hysteresis comparison."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean output indicating if the input is above the high threshold."}, {"name": "win", "type": "BOOL", "description": "Boolean output indicating whether the input is within the hysteresis window."}], "in/out": [], "return_value": {}}
{"title": "Convert Real Number to Fraction", "description": "This function takes a real number and converts it into its fractional representation with a maximum allowable denominator size. The function calculates the numerator and denominator iteratively until the denominator exceeds the specified maximum size, ensuring the fraction is correctly represented even if the real number is negative.", "type": "FUNCTION", "name": "REAL_TO_FRAC", "input": [{"name": "X", "type": "REAL", "description": "The real number to be converted into a fraction."}, {"name": "N", "type": "INT", "description": "The maximum allowed size of the denominator."}], "output": [{"name": "NUMERATOR", "type": "DINT", "description": "The calculated numerator of the resulting fraction."}, {"name": "DENOMINATOR", "type": "DINT", "description": "The calculated denominator of the resulting fraction."}], "in/out": [], "return_value": {"type": "FRACTION", "description": "The fraction representation of the given real number containing numerator and denominator.", "fields": [{"name": "NUMERATOR", "type": "DINT", "description": "The numerator value of the fraction."}, {"name": "DENOMINATOR", "type": "DINT", "description": "The denominator value of the fraction."}]}}
{"title": "Meter Status Function Block", "description": "The METER_STAT function block is designed to track and manage the status of a meter, including daily, weekly, monthly, and yearly measurements. It resets the current and last measurements based on the specified input conditions and the date of last run.", "type": "FUNCTION_BLOCK", "name": "METER_STAT", "input": [{"name": "IN", "type": "REAL", "description": "The input value measured by the meter."}, {"name": "DI", "type": "DATE", "description": "The current date corresponding to the measurement."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to indicate whether to reset the current measurements."}], "output": [], "in/out": [{"name": "Last_Day", "type": "REAL", "description": "The value of the last day measurement."}, {"name": "Current_Day", "type": "REAL", "description": "The value of the current day measurement."}, {"name": "Last_Week", "type": "REAL", "description": "The value of the last week measurement."}, {"name": "Current_Week", "type": "REAL", "description": "The value of the current week measurement."}, {"name": "Last_Month", "type": "REAL", "description": "The value of the last month measurement."}, {"name": "Current_Month", "type": "REAL", "description": "The value of the current month measurement."}, {"name": "Last_Year", "type": "REAL", "description": "The value of the last year measurement."}, {"name": "Current_Year", "type": "REAL", "description": "The value of the current year measurement."}], "return_value": null}
{"title": "Ramp Generator Function Block", "description": "This function block implements a ramp generator that provides a variable output based on a specified time parameter and control signals. The ramp can be set, reset, and controlled to run in the upward or downward direction.", "type": "FUNCTION_BLOCK", "name": "RMP_W", "input": [{"name": "SET", "type": "BOOL", "description": "Control signal to set the ramp output to its maximum value."}, {"name": "PT", "type": "TIME", "description": "Time duration for which the ramp should be executed."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the ramp operation; when false, the ramp is disabled."}, {"name": "UP", "type": "BOOL", "description": "Direction control for the ramp; true for upward ramping, false for downward."}, {"name": "RST", "type": "BOOL", "description": "Control signal to reset the ramp output to zero."}], "output": [{"name": "out", "type": "WORD", "description": "Current output value of the ramp generator."}, {"name": "busy", "type": "BOOL", "description": "Indicates whether the ramp generator is currently active."}, {"name": "high", "type": "BOOL", "description": "Indicates if the output is at its maximum value."}, {"name": "low", "type": "BOOL", "description": "Indicates if the output is at its minimum value."}], "in/out": [], "return_value": null}
{"title": "Trimming Leading and Trailing Spaces from a String", "description": "This function takes an input string and removes any leading and trailing whitespace characters. The output is the trimmed version of the input string.", "type": "FUNCTION", "name": "TRIME", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be trimmed."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The trimmed version of the input string, with leading and trailing spaces removed."}}
{"title": "Complex Arc Tangent Function", "description": "This function calculates the arc tangent of a complex number. The input is a complex number, and the output is the complex result of the arc tangent calculation.", "type": "FUNCTION", "name": "CATAN", "input": [{"name": "X", "type": "complex", "description": "Input variable of type complex."}], "output": [{"name": "CATAN", "type": "complex", "description": "The result of the arc tangent calculation, returned as a complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The complex result representing the arc tangent of the input complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the arc tangent result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the arc tangent result."}]}}
{"title": "TUNE2 Function Block", "description": "The TUNE2 function block is designed to control a variable output (Y) based on user-defined inputs including set, reset, and speed adjustment commands. It implements a state machine to handle slow and fast up/down operations while ensuring the output remains within specified limits. The block also allows for timing-based ramp adjustments based on input parameters.", "type": "FUNCTION_BLOCK", "name": "TUNE2", "input": [{"name": "SET", "type": "BOOL", "description": "Indicator to set the output to SET_val."}, {"name": "SU", "type": "BOOL", "description": "Signal to initiate a slow step up operation."}, {"name": "SD", "type": "BOOL", "description": "Signal to initiate a slow step down operation."}, {"name": "FU", "type": "BOOL", "description": "Signal to initiate a fast step up operation."}, {"name": "FD", "type": "BOOL", "description": "Signal to initiate a fast step down operation."}, {"name": "RST", "type": "BOOL", "description": "Indicator to reset the output to RST_val."}, {"name": "SS", "type": "REAL", "description": "The amount to be added or subtracted during each slow step operation."}, {"name": "FS", "type": "REAL", "description": "The amount to be added or subtracted during each fast step operation."}, {"name": "Limit_L", "type": "REAL", "description": "The lower limit for the output."}, {"name": "LIMIT_H", "type": "REAL", "description": "The upper limit for the output."}, {"name": "RST_val", "type": "REAL", "description": "The value to assign to Y when the reset is triggered."}, {"name": "SET_val", "type": "REAL", "description": "The value to assign to Y when the set operation is triggered."}, {"name": "TR", "type": "TIME", "description": "The time duration for the ramp operation."}, {"name": "S1", "type": "REAL", "description": "The speed factor used for slow movements."}, {"name": "S2", "type": "REAL", "description": "The speed factor used for fast movements."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value after processing commands."}], "in/out": [], "return_value": {}}
{"title": "Hyperbolic Sine Function", "description": "Implement a function that calculates the hyperbolic sine of a given real number. The function should optimize calculations for small values of input to improve accuracy and performance.", "type": "FUNCTION", "name": "SINH", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the hyperbolic sine is to be calculated."}], "output": [{"name": "SINH", "type": "REAL", "description": "The calculated hyperbolic sine of the input value X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the hyperbolic sine calculation."}}
{"title": "Delay Block", "description": "This function block implements a four-times delayed output based on the input signal. The input value is passed through a series of outputs, delaying the signal progressively, which allows for smoothing effects in signal processing.", "type": "FUNCTION_BLOCK", "name": "DELAY_4", "input": [{"name": "in", "type": "REAL", "description": "The input signal to be delayed."}], "output": [{"name": "out1", "type": "REAL", "description": "The first delayed output of the input signal."}, {"name": "out2", "type": "REAL", "description": "The second delayed output of the input signal."}, {"name": "out3", "type": "REAL", "description": "The third delayed output of the input signal."}, {"name": "out4", "type": "REAL", "description": "The fourth delayed output of the input signal."}], "in/out": [], "return_value": {}}
{"title": "Energy Calculation Function Block", "description": "This function block performs calculations related to energy based on input parameters Joules (J), capacity (C), and watt-hours (Wh). It computes various energy-related outputs, converting between different units.", "type": "FUNCTION_BLOCK", "name": "ENERGY", "input": [{"name": "J", "type": "REAL", "description": "Energy in Joules."}, {"name": "C", "type": "REAL", "description": "Capacity in a specific energy unit."}, {"name": "Wh", "type": "REAL", "description": "Energy in watt-hours."}], "output": [{"name": "YJ", "type": "REAL", "description": "Calculated energy in Joules after conversion."}, {"name": "YC", "type": "REAL", "description": "Energy in a calculated unit based on YJ."}, {"name": "YWh", "type": "REAL", "description": "Converted energy from YJ to watt-hours."}], "in/out": [], "return_value": null}
{"title": "Uppercase String Conversion", "description": "This function takes a string input and converts all its characters to uppercase, supporting extended ASCII characters. The function returns the uppercase version of the input string.", "type": "FUNCTION", "name": "UPPERCASE", "input": [{"name": "str", "type": "STRING", "description": "The input string that needs to be converted to uppercase."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The converted uppercase string.", "fields": []}}
{"title": "Dead Band Filter Function Block", "description": "This function block implements a dead band filter that processes an input signal to filter out noise and stabilize it. It computes the filtered output by determining a dead band around the input signal X based on given time parameters and constants.", "type": "FUNCTION_BLOCK", "name": "DEAD_BAND_A", "input": [{"name": "X", "type": "REAL", "description": "The input signal to be filtered."}, {"name": "T", "type": "TIME", "description": "The time constant for the filtering process."}, {"name": "KL", "type": "REAL", "description": "A scaling factor for the dead band, default value is 1.0."}, {"name": "LM", "type": "REAL", "description": "The maximum limit for the dead band's width."}], "output": [{"name": "Y", "type": "REAL", "description": "The processed output signal after applying dead band filtering."}, {"name": "L", "type": "REAL", "description": "The computed width of the dead band, representing stability."}], "in/out": [], "return_value": null}
{"title": "Calculate Area of a Circle", "description": "This function calculates the area of a circle using its radius and a constant factor. The area is determined by the formula: Area = π * radius^2, where the radius is adjusted by a provided constant factor.", "type": "FUNCTION", "name": "CIRCLE_A", "input": [{"name": "rx", "type": "REAL", "description": "The radius of the circle."}, {"name": "ax", "type": "REAL", "description": "A constant multiplier factor that influences the area calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated area of the circle based on the provided radius and constant factor."}}
{"title": "Count Manager", "description": "This function block manages a count value, allowing for incrementing and decrementing based on input signals while ensuring the count stays within specified limits.", "type": "FUNCTION_BLOCK", "name": "COUNT_DR", "input": [{"name": "SET", "type": "BOOL", "description": "Signal to initialize the count to the input value."}, {"name": "IN", "type": "DWORD", "description": "Input value used to set the count when 'SET' is true."}, {"name": "UP", "type": "BOOL", "description": "Signal to increment the count."}, {"name": "DN", "type": "BOOL", "description": "Signal to decrement the count."}, {"name": "STEP", "type": "DWORD", "description": "Amount to increment or decrement the count, defaulted to 1.", "fields": []}, {"name": "MX", "type": "DWORD", "description": "Maximum value for the count, defaulted to 16#FFFFFFFF.", "fields": []}, {"name": "RST", "type": "BOOL", "description": "Signal to reset the count to zero."}], "output": [{"name": "CNT", "type": "DWORD", "description": "Current value of the count."}], "in/out": [], "return_value": null}
{"title": "Complex Number Set Function", "description": "This function is designed to create a complex number by setting its real and imaginary parts. The user will provide the real part (RE) and the imaginary part (IM) as input parameters, and these values will be assigned to the respective fields of the complex number structure.", "type": "FUNCTION", "name": "CSET", "input": [{"name": "RE", "type": "REAL", "description": "The real part of the complex number."}, {"name": "IM", "type": "REAL", "description": "The imaginary part of the complex number."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The complex number consisting of the provided real and imaginary parts.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex number."}]}}
{"title": "Retrieve Element from List", "description": "This function retrieves a specific element from a delimited list based on the provided position. The list is defined as a string, and the separator used for delimiting is specified by the user. The function outputs the appropriate list element to the output string and modifies the input list accordingly.", "type": "FUNCTION", "name": "LIST_RETRIEVE", "input": [{"name": "SEP", "type": "BYTE", "description": "The byte value representing the separator used to delimit elements in the list."}, {"name": "POS", "type": "INT", "description": "The position of the element to retrieve from the list, where the first element is at position 1."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The list from which an element will be retrieved. This is both the input list and will be updated during the operation."}], "return_value": {"type": "string", "description": "The retrieved element from the list. If the position is not greater than 0, the function returns an empty string."}}
{"title": "Binomial Coefficient Calculation", "description": "This function calculates the binomial coefficient (n choose k), which is the number of ways to choose k elements from a set of n elements. It includes optimizations for specific cases, such as when k is 0 or equal to n.", "type": "FUNCTION", "name": "BINOM", "input": [{"name": "N", "type": "INT", "description": "The total number of elements from which the selection is made."}, {"name": "K", "type": "INT", "description": "The number of elements to choose from the total elements."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The computed binomial coefficient value.", "fields": []}}
{"title": "Convert Byte to Lowercase", "description": "This function converts an input byte to its lowercase representation if it falls within the uppercase ASCII range or extended ASCII settings. The function checks if the input byte is an uppercase letter in the ASCII table and converts it to lowercase by applying a bitwise OR operation with the hexadecimal value 20. For extended ASCII characters, the function checks specific conditions before applying the conversion.", "type": "FUNCTION", "name": "TO_LOWER", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be converted to lowercase."}], "output": [{"name": "TO_LOWER", "type": "BYTE", "description": "The lowercase representation of the input byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns the converted lowercase byte if applicable, otherwise returns the input byte.", "fields": []}}
{"title": "Maximum of Three Real Numbers", "description": "This function computes the maximum value among three input real numbers. It takes three real inputs and returns the largest of the three.", "type": "FUNCTION", "name": "MAX3", "input": [{"name": "in1", "type": "REAL", "description": "The first real number input."}, {"name": "in2", "type": "REAL", "description": "The second real number input."}, {"name": "in3", "type": "REAL", "description": "The third real number input."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The maximum value among the three input real numbers."}}
{"title": "Proportional-Integral Controller Function Block", "description": "This function block implements a Proportional-Integral (PI) controller. It takes an input value and adjusts its output based on given proportional and integral gains, while enforcing limits on the output. The block also includes a reset functionality and determines whether the output has reached its limits.", "type": "FUNCTION_BLOCK", "name": "FT_PIW", "input": [{"name": "IN", "type": "REAL", "description": "The input value to be controlled."}, {"name": "KP", "type": "REAL", "description": "The proportional gain for the controller.", "fields": []}, {"name": "KI", "type": "REAL", "description": "The integral gain for the controller.", "fields": []}, {"name": "LIM_L", "type": "REAL", "description": "The lower limit for the output.", "fields": []}, {"name": "LIM_H", "type": "REAL", "description": "The upper limit for the output.", "fields": []}, {"name": "RST", "type": "BOOL", "description": "Reset signal for the integrator.", "fields": []}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the controller.", "fields": []}, {"name": "LIM", "type": "BOOL", "description": "Indicator that output is at limit.", "fields": []}], "in/out": [], "return_value": {}}
{"title": "Scale Function", "description": "This function scales an input value X using a scaling factor K and an offset O. The resulting value is then limited between the minimum value MN and the maximum value MX.", "type": "FUNCTION", "name": "SCALE", "input": [{"name": "X", "type": "REAL", "description": "The input value that will be scaled."}, {"name": "K", "type": "REAL", "description": "The scaling factor applied to the input value."}, {"name": "O", "type": "REAL", "description": "The offset to be added to the scaled input value."}, {"name": "MX", "type": "REAL", "description": "The maximum limit for the scaled value."}, {"name": "MN", "type": "REAL", "description": "The minimum limit for the scaled value."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The scaled value limited between MN and MX."}}
{"title": "Check if All Characters are Present", "description": "This function checks whether all characters from a specified comparison string are present in the leading portion of a given input string. It takes two strings as input and returns a boolean indicating if the input string meets the criteria.", "type": "FUNCTION", "name": "IS_CC", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string to be checked against the comparison string."}, {"name": "cmp", "type": "STRING(STRING_LENGTH)", "description": "The comparison string containing characters to look for in the input string."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input string contains all characters from the comparison string in the specified portion; otherwise, returns FALSE."}}
{"title": "Exponentiation Function", "description": "This function calculates the exponentiation of a real number X raised to the power N, where N can be a positive or negative integer. The function handles negative exponents by returning the reciprocal of the result and utilizes bitwise operations for efficient computation.", "type": "FUNCTION", "name": "EXPN", "input": [{"name": "X", "type": "REAL", "description": "The base value which is a real number."}, {"name": "N", "type": "INT", "description": "The exponent value which is an integer. It can be positive or negative."}], "output": [{"name": "EXPN", "type": "REAL", "description": "The result of the calculation, representing X raised to the power of N."}], "in/out": [], "return_value": {"type": "REAL", "description": "The real number result of the exponentiation."}}
{"title": "Cross Product of Two Vectors", "description": "This function calculates the cross product of two 3-dimensional vectors. The function takes two input vectors, A and B, and computes the resulting vector perpendicular to both A and B.", "type": "FUNCTION", "name": "V3_XPRO", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector for the cross product operation."}, {"name": "B", "type": "Vector_3", "description": "The second input vector for the cross product operation."}], "output": [], "in/out": [], "return_value": {"type": "vector_3", "description": "The resulting vector that is the cross product of vectors A and B.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the resulting cross product vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the resulting cross product vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the resulting cross product vector."}]}}
{"title": "Convert Gray Code to Byte", "description": "This function takes a byte representing a Gray code value and converts it into its equivalent binary representation. The conversion involves bitwise operations to shift and XOR the input byte.", "type": "FUNCTION", "name": "GRAY_TO_BYTE", "input": [{"name": "IN", "type": "BYTE", "description": "A BYTE value representing the Gray code to be converted."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The binary representation of the input Gray code after conversion."}}
{"title": "4-bit Shift Register with Set, Reset, and Clock Functionality", "description": "This function block implements a 4-bit shift register that allows setting and resetting the output bits based on the clock signal. The block has inputs for setting the register, a data input, and a clock signal, along with a reset signal. The outputs include four bits representing the current state of the register.", "type": "FUNCTION_BLOCK", "name": "SHR_4E", "input": [{"name": "SET", "type": "BOOL", "description": "Input signal to set the shift register."}, {"name": "D0", "type": "BOOL", "description": "Data input for the shift register."}, {"name": "CLK", "type": "BOOL", "description": "Clock input signal to trigger the shifting operation."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the shift register outputs."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output representing the least significant bit of the shift register."}, {"name": "Q1", "type": "BOOL", "description": "Output representing the second least significant bit of the shift register."}, {"name": "Q2", "type": "BOOL", "description": "Output representing the second most significant bit of the shift register."}, {"name": "Q3", "type": "BOOL", "description": "Output representing the most significant bit of the shift register."}], "in/out": [], "return_value": null}
{"title": "Pressure Conversion Function Block", "description": "This function block is designed to convert various pressure units into different formats. It takes input values in different pressure units such as millimeters of water, torr, atmospheric pressure, and outputs the corresponding converted values in these units as well as additional pressure measurements.", "type": "FUNCTION_BLOCK", "name": "PRESSURE", "input": [{"name": "mws", "type": "REAL", "description": "Pressure in millimeters of water column."}, {"name": "torr", "type": "REAL", "description": "Pressure in torr."}, {"name": "att", "type": "REAL", "description": "Pressure in technical atmospheres."}, {"name": "atm", "type": "REAL", "description": "Pressure in standard atmospheres."}, {"name": "pa", "type": "REAL", "description": "Pressure in pascals."}, {"name": "bar", "type": "REAL", "description": "Pressure in bar."}], "output": [{"name": "Ymws", "type": "REAL", "description": "Converted pressure in millimeters of water column."}, {"name": "Ytorr", "type": "REAL", "description": "Converted pressure in torr."}, {"name": "Yatt", "type": "REAL", "description": "Converted pressure in technical atmospheres."}, {"name": "Yatm", "type": "REAL", "description": "Converted pressure in standard atmospheres."}, {"name": "Ypa", "type": "REAL", "description": "Converted pressure in pascals."}, {"name": "Ybar", "type": "REAL", "description": "Converted pressure in bar."}], "in/out": [], "return_value": null}
{"title": "Array Sorting Function", "description": "This function sorts an array of real numbers using a quicksort algorithm. It utilizes a stack to manage recursive function calls and sorts the array in place. The function takes a pointer to the array and its size as input and returns a boolean indicating whether the sorting was successful.", "type": "FUNCTION", "name": "_ARRAY_SORT", "input": [{"name": "PT", "type": "POINTER TO ARRAY[1..32000] OF REAL", "description": "A pointer to the array of real numbers to be sorted."}, {"name": "SIZE", "type": "UINT", "description": "The size of the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the sorting was successful or not."}}
{"title": "Minimum of Three Real Numbers", "description": "This function calculates the minimum value among three input real numbers. It takes three parameters and returns the smallest of the three values.", "type": "FUNCTION", "name": "MIN3", "input": [{"name": "in1", "type": "REAL", "description": "The first real number input."}, {"name": "in2", "type": "REAL", "description": "The second real number input."}, {"name": "in3", "type": "REAL", "description": "The third real number input."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The minimum value among the three input real numbers."}}
{"title": "Convert String to Month Integer", "description": "This function takes a string representation of a month and converts it into its corresponding integer value, using a specified language setting. If the string does not match any of the month names in the chosen language, it attempts to convert the string directly to an integer.", "type": "FUNCTION", "name": "FSTRING_TO_MONTH", "input": [{"name": "MTH", "type": "STRING(20)", "description": "A string representing the month to be converted."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language setting. Use 0 for default language, or a specific language index."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "Returns the integer representation of the month (1-12), or the integer value of the string if no match is found."}}
{"title": "Increment Function", "description": "This function increments the input value X by 1, unless X is greater than or equal to N - 1, in which case it returns 0. The function is designed to ensure that the output remains within a predetermined limit set by N.", "type": "FUNCTION", "name": "INC1", "input": [{"name": "X", "type": "INT", "description": "The integer value to be incremented."}, {"name": "N", "type": "INT", "description": "The limit value that determines the behavior of the increment."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The result of the increment operation, which will be either X + 1 or 0 if X is greater than or equal to N - 1."}}
{"title": "Trim String Function", "description": "The TRIM1 function removes leading and trailing spaces from a given string. It also eliminates any extra spaces within the string, ensuring that the returned string has no consecutive spaces.", "type": "FUNCTION", "name": "TRIM1", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be trimmed of spaces."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The trimmed string with no leading, trailing, or consecutive spaces."}}
{"title": "FIFO Buffer Implementation", "description": "This function block implements a First-In-First-Out (FIFO) buffer with a maximum capacity of 32 DWORD elements. It supports reading from and writing to the buffer, while providing status indicators for empty and full conditions. It also includes a reset functionality to clear the state of the FIFO.", "type": "FUNCTION_BLOCK", "name": "FIFO_32", "input": [{"name": "Din", "type": "DWORD", "description": "The data input to be written to the FIFO."}, {"name": "E", "type": "BOOL", "description": "Enable signal, when TRUE allows reading and writing operations."}, {"name": "RD", "type": "BOOL", "description": "Read signal, when TRUE initiates a read operation from the FIFO."}, {"name": "WD", "type": "BOOL", "description": "Write signal, when TRUE initiates a write operation to the FIFO."}, {"name": "RST", "type": "BOOL", "description": "Reset signal, when TRUE resets the FIFO state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data output read from the FIFO."}, {"name": "EMPTY", "type": "BOOL", "description": "Status indicator, TRUE if the FIFO is empty."}, {"name": "FULL", "type": "BOOL", "description": "Status indicator, TRUE if the FIFO is full."}], "in/out": [], "return_value": null}
{"title": "Convert Frequency to Angular Frequency", "description": "This function converts a frequency value given in Hertz to angular frequency in radians per second by multiplying it with 2π. The input parameter is the frequency (F), and the function returns the corresponding angular frequency as a real number.", "type": "FUNCTION", "name": "F_TO_OM", "input": [{"name": "F", "type": "REAL", "description": "The frequency value in Hertz to be converted to angular frequency."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted angular frequency in radians per second.", "fields": []}}
{"title": "Moving Average Filter", "description": "This function block implements a moving average filter that calculates the average of the last N input values. It takes an input word value and produces an output word value representing the average. The block also includes a reset functionality.", "type": "FUNCTION_BLOCK", "name": "FILTER_MAV_W", "input": [{"name": "X", "type": "WORD", "description": "Input variable which is a word value to be averaged."}, {"name": "N", "type": "UINT", "description": "Input variable that specifies the number of samples to average. It is limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "Reset variable that initializes the moving average calculation when set to TRUE."}], "output": [{"name": "Y", "type": "WORD", "description": "Output variable which holds the current average value."}], "in/out": [], "return_value": null}
{"title": "Polynomial Interpolation Calculation", "description": "This function calculates the value of a polynomial at a given point using interpolation based on provided data points. The function receives a value 'X' and an array of data points, 'XY', then computes the polynomial's value at 'X' using interpolation formulae derived from the inputs.", "type": "FUNCTION", "name": "POLYNOM_INT", "input": [{"name": "X", "type": "REAL", "description": "The point at which the polynomial value is to be calculated."}, {"name": "XY", "type": "ARRAY[1..5, 0..1] OF REAL", "description": "A two-dimensional array containing the data points for polynomial interpolation, where each element corresponds to an (x, y) coordinate."}, {"name": "Pts", "type": "INT", "description": "The number of data points provided in the 'XY' array, limited to a maximum of 5."}], "output": [{"name": "POLYNOM_INT", "type": "REAL", "description": "The calculated value of the polynomial at the point 'X'."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the polynomial interpolation at the specified point 'X'."}}
{"title": "Capitalize String", "description": "This function takes a string as input and returns a new string where the first character and any character following a space is converted to uppercase. The function processes each character of the input string sequentially.", "type": "FUNCTION", "name": "CAPITALIZE", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string that needs to be capitalized."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The capitalized version of the input string."}}
{"title": "MESSAGE_4R Function Block", "description": "This function block, MESSAGE_4R, is designed to manage the selection of messages based on a rising edge trigger. It takes in several message strings and outputs the selected message alongside a counter and a trigger signal. The block uses a timer to regulate the message selection process.", "type": "FUNCTION_BLOCK", "name": "MESSAGE_4R", "input": [{"name": "M0", "type": "STRING(STRING_LENGTH)", "description": "First message string."}, {"name": "M1", "type": "STRING(STRING_LENGTH)", "description": "Second message string."}, {"name": "M2", "type": "STRING(STRING_LENGTH)", "description": "Third message string."}, {"name": "M3", "type": "STRING(STRING_LENGTH)", "description": "Fourth message string."}, {"name": "MM", "type": "INT", "description": "Increment value for the message counter. Default is 3."}, {"name": "ENQ", "type": "BOOL", "description": "Enable signal for the message selection process. Default is TRUE."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal used for timing the message selection process. Default is TRUE."}, {"name": "T1", "type": "TIME", "description": "Time interval for the timer. Default is 3 seconds."}], "output": [{"name": "MX", "type": "STRING(STRING_LENGTH)", "description": "Selected message string based on the current counter value."}, {"name": "MN", "type": "INT", "description": "Current message counter value."}, {"name": "TR", "type": "BOOL", "description": "Trigger signal indicating that a new message has been selected."}], "in/out": [], "return_value": null}
{"title": "Hysteresis Control Function Block", "description": "This function block implements a hysteresis control mechanism, determining the output states based on input values and defined ON/OFF thresholds. It evaluates the input against the ON and OFF parameters to set the output boolean values Q and win accordingly.", "type": "FUNCTION_BLOCK", "name": "HYST", "input": [{"name": "In", "type": "REAL", "description": "The input value to be evaluated against the hysteresis thresholds."}, {"name": "ON", "type": "REAL", "description": "The upper threshold value for the hysteresis control."}, {"name": "OFF", "type": "REAL", "description": "The lower threshold value for the hysteresis control."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output boolean indicating the active state based on hysteresis logic."}, {"name": "win", "type": "BOOL", "description": "A boolean output that indicates if the input is within the hysteresis range."}], "in/out": [], "return_value": {}}
{"title": "Negation Function", "description": "This function takes a real number input and returns its negation. The output is the negative value of the input number.", "type": "FUNCTION", "name": "NEGX", "input": [{"name": "X", "type": "REAL", "description": "Input parameter which is a real number to be negated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The negated value of the input X.", "fields": []}}
{"title": "ONTIME Function Block", "description": "This function block, named ONTIME, is designed to keep track of elapsed time in seconds and cycles based on input signals. It utilizes the system clock to count milliseconds and updates the SECONDS and CYCLES outputs accordingly. The block can be reset using the RST input.", "type": "FUNCTION_BLOCK", "name": "ONTIME", "input": [{"name": "IN", "type": "BOOL", "description": "This input signal indicates whether the timing should be active."}, {"name": "RST", "type": "BOOL", "description": "This input signal resets the SECONDS and CYCLES outputs."}], "output": [{"name": "SECONDS", "type": "UDINT", "description": "The total elapsed time in seconds."}, {"name": "CYCLES", "type": "UDINT", "description": "The total count of active cycles."}], "in/out": [], "return_value": null}
{"title": "Sign Function", "description": "This function determines the sign of the input integer value. It takes a 32-bit integer (DINT) as input and returns a boolean value indicating whether the sign bit is set (1) or not (0).", "type": "FUNCTION", "name": "SIGN_I", "input": [{"name": "IN", "type": "DINT", "description": "A 32-bit signed integer input whose sign is to be checked."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating the sign of the input integer. Returns true if the sign bit is set (input is negative), otherwise returns false."}}
{"title": "Alarm Monitoring Block", "description": "The ALARM_2 function block monitors two sets of thresholds (low and high) for the input value X. It uses hysteresis to determine when the alarms should trigger based on the defined low and high limits with respective hysteresis values. The outputs indicate whether the input value is above or below the defined thresholds.", "type": "FUNCTION_BLOCK", "name": "ALARM_2", "input": [{"name": "X", "type": "REAL", "description": "The input value that is being monitored."}, {"name": "LO_1", "type": "REAL", "description": "The lower threshold for the first alarm."}, {"name": "HI_1", "type": "REAL", "description": "The upper threshold for the first alarm."}, {"name": "LO_2", "type": "REAL", "description": "The lower threshold for the second alarm."}, {"name": "HI_2", "type": "REAL", "description": "The upper threshold for the second alarm."}, {"name": "HYS", "type": "REAL", "description": "The hysteresis value applied to determine alarm state changes."}], "output": [{"name": "Q1_LO", "type": "BOOL", "description": "Output indicating if the first low alarm is triggered."}, {"name": "Q1_HI", "type": "BOOL", "description": "Output indicating if the first high alarm is triggered."}, {"name": "Q2_LO", "type": "BOOL", "description": "Output indicating if the second low alarm is triggered."}, {"name": "Q2_HI", "type": "BOOL", "description": "Output indicating if the second high alarm is triggered."}], "in/out": [], "return_value": null}
{"title": "Complex Inverse Function", "description": "This function calculates the inverse of a given complex number. The output is another complex number representing the inverse.", "type": "FUNCTION", "name": "CINV", "input": [{"name": "X", "type": "COMPLEX", "description": "Input variable of type complex representing the complex number for which the inverse is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The inverse of the input complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the inverse complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the inverse complex number."}]}}
{"title": "Calculate Volume of a Cone", "description": "This function calculates the volume of a cone based on the radius and height provided as input parameters. The formula used for the calculation is V = (1/3) * π * r² * h, simplified here as V = 1.047197551 * rx * rx * hx.", "type": "FUNCTION", "name": "CONE_V", "input": [{"name": "rx", "type": "REAL", "description": "The radius of the cone's base."}, {"name": "hx", "type": "REAL", "description": "The height of the cone."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated volume of the cone."}}
{"title": "Convert Hour to Time of Day", "description": "This function converts an input time in hours to a Time of Day (TOD) format. The input is a real number representing hours, which is multiplied by 3600000 to convert it into milliseconds before being converted into TOD format.", "type": "FUNCTION", "name": "HOUR_TO_TOD", "input": [{"name": "IN", "type": "REAL", "description": "The input time in hours that needs to be converted to Time of Day."}], "output": [], "in/out": [], "return_value": {"type": "TOD", "description": "Returns the equivalent Time of Day representation of the input hours.", "fields": []}}
{"title": "BYTE_To_STRH", "description": "This function converts a BYTE input variable into its corresponding hexadecimal string representation of two characters. The output is a string where each character represents a single digit of the hexadecimal value derived from the input BYTE.", "type": "FUNCTION", "name": "BYTE_TO_STRH", "input": [{"name": "IN", "type": "BYTE", "description": "The BYTE input variable to be converted into a hexadecimal string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The resulting string representation of the input BYTE in hexadecimal format.", "fields": []}}
{"title": "Minute Calculation from Time of Day", "description": "This function calculates the minute component from a given Time of Day (TOD) input. The function takes a Time of Day input, processes it, and returns the integer minute value derived from the input time.", "type": "FUNCTION", "name": "MINUTE", "input": [{"name": "itod", "type": "TOD", "description": "The Time of Day input from which the minute value will be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The calculated minute value derived from the given Time of Day input."}}
{"title": "ESR Monitoring Function Block", "description": "This function block monitors input status from multiple sources and updates the output array accordingly, while checking for conditions based on the mode provided. It initializes the output array and flags and updates them based on input changes.", "type": "FUNCTION_BLOCK", "name": "ESR_MON_X8", "input": [{"name": "s0", "type": "BYTE", "description": "First status input byte."}, {"name": "s1", "type": "BYTE", "description": "Second status input byte."}, {"name": "s2", "type": "BYTE", "description": "Third status input byte."}, {"name": "s3", "type": "BYTE", "description": "Fourth status input byte."}, {"name": "s4", "type": "BYTE", "description": "Fifth status input byte."}, {"name": "s5", "type": "BYTE", "description": "Sixth status input byte."}, {"name": "s6", "type": "BYTE", "description": "Seventh status input byte."}, {"name": "s7", "type": "BYTE", "description": "Eighth status input byte."}, {"name": "DT_in", "type": "DT", "description": "DateTime input parameter."}, {"name": "Mode", "type": "BYTE", "description": "Mode of operation, default is 3."}, {"name": "a0", "type": "STRING[10]", "description": "Additional string input for status s0."}, {"name": "a1", "type": "STRING[10]", "description": "Additional string input for status s1."}, {"name": "a2", "type": "STRING[10]", "description": "Additional string input for status s2."}, {"name": "a3", "type": "STRING[10]", "description": "Additional string input for status s3."}, {"name": "a4", "type": "STRING[10]", "description": "Additional string input for status s4."}, {"name": "a5", "type": "STRING[10]", "description": "Additional string input for status s5."}, {"name": "a6", "type": "STRING[10]", "description": "Additional string input for status s6."}, {"name": "a7", "type": "STRING[10]", "description": "Additional string input for status s7."}], "output": [{"name": "ESR_Flag", "type": "BOOL", "description": "Flag indicating if any status input has changed and an output was updated."}], "in/out": [{"name": "ESR_Out", "type": "ARRAY[0..3] OF esr_data", "description": "Output array that stores the converted status based on inputs."}], "return_value": null}
{"title": "Sigmoid Function", "description": "This function calculates the sigmoid of a given real number input. The function utilizes specific conditions to return 1.0 for inputs greater than 20.0 and 0.0 for inputs less than -85.0. For inputs within this range, the sigmoid function is computed using the standard mathematical formula.", "type": "FUNCTION", "name": "SIGMOID", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the sigmoid function is to be calculated."}], "output": [{"name": "SIGMOID", "type": "REAL", "description": "The output of the sigmoid function calculated based on the input value X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated sigmoid value based on the input X, returning 1.0, 0.0, or the computed value based on the sigmoid formula.", "fields": []}}
{"title": "String Mirror Function", "description": "This function takes an input string and returns its mirrored version. The function processes the input string character by character from the end to the beginning, constructing a new string that is effectively the reverse of the input.", "type": "FUNCTION", "name": "MIRROR", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string that needs to be mirrored."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The mirrored version of the input string."}}
{"title": "Hexadecimal to DWORD Converter", "description": "This function converts a hexadecimal string into a DWORD value. It processes each character in the input string, interpreting valid hexadecimal digits and appropriately converting them to their decimal representation. The function ignores invalid characters and can handle both upper and lower case hexadecimal representations.", "type": "FUNCTION", "name": "HEX_TO_DWORD", "input": [{"name": "Hex", "type": "STRING", "description": "A hexadecimal string input with a maximum length of 20 characters."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The DWORD value that results from converting the hexadecimal input string.", "fields": []}}
{"title": "TMAX Function Block", "description": "The TMAX function block processes a boolean input signal and a time duration. It outputs a boolean signal that indicates the occurrence of an event based on the input signal and the elapsed time since the last input change. If the input signal remains TRUE for the specified duration, the output signal is set to FALSE and a secondary output signal is set to TRUE indicating that the event has occurred.", "type": "FUNCTION_BLOCK", "name": "TMAX", "input": [{"name": "IN", "type": "BOOL", "description": "Input boolean signal that triggers the function block."}, {"name": "PT", "type": "TIME", "description": "Time duration that the input signal must be TRUE for in order to reset the output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal that indicates whether the function block is active or not."}, {"name": "Z", "type": "BOOL", "description": "Output signal that indicates that the timing condition has been satisfied, i.e., the input was TRUE for the specified duration."}], "in/out": [], "return_value": null}
{"title": "Convert BYTE to STRING Representation", "description": "This function converts a BYTE input into its string representation, producing an 8-character string where each character corresponds to a bit from the BYTE. The resulting string is NULL-terminated.", "type": "FUNCTION", "name": "BYTE_TO_STRB", "input": [{"name": "IN", "type": "BYTE", "description": "The BYTE value to be converted into a string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The string representation of the byte input, consisting of 8 characters representing each bit.", "fields": []}}
{"title": "AGDF Function Implementation", "description": "The AGDF function computes the natural logarithm of the ratio of (1.0 + SIN(X)) to COS(X). The function is intended for real input values of X, but its accuracy diminishes near X = PI/2.", "type": "FUNCTION", "name": "AGDF", "input": [{"name": "X", "type": "REAL", "description": "The input real value for which the AGDF function will compute the result."}], "output": [{"name": "AGDF", "type": "REAL", "description": "The output result of the AGDF function, which is the computed natural logarithm value."}], "in/out": [], "return_value": {"type": "REAL", "description": "The return value of the AGDF function is a REAL number representing the natural logarithm of the specified computation."}}
{"title": "PT1 Differentiator Function Block", "description": "This function block implements a PT1 filter and a differentiator. The block takes an input value and processes it using a differentiator followed by a PT1 filter. The final output is a combination of the filtered value and scaled input.", "type": "FUNCTION_BLOCK", "name": "FT_PDT1", "input": [{"name": "IN", "type": "REAL", "description": "The input signal to be processed."}, {"name": "KP", "type": "REAL", "description": "The proportional gain factor, default value is 1.0."}, {"name": "TV", "type": "REAL", "description": "The time constant for the differentiator, default value is 1.0."}, {"name": "T1", "type": "REAL", "description": "The time constant for the PT1 filter, default value is 1.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The output of the function block, which is the combined result of the processed input."}], "in/out": [], "return_value": {}}
{"title": "OSCAT_VERSION Function", "description": "This function returns a DWORD value representing the OSCAT version. The value returned is based on the input parameter; if the input is TRUE, it will return a date converted to DWORD (specifically the date July 16, 2024); otherwise, it returns the integer 335.", "type": "FUNCTION", "name": "OSCAT_VERSION", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input parameter that determines which version number to return."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The DWORD value representing the OSCAT version based on the input parameter.", "fields": []}}
{"title": "Convert BYTE to Range", "description": "This function converts a BYTE value into a specified range defined by low and high real numbers. It scales the BYTE value, which ranges from 0 to 255, to the specified range.", "type": "FUNCTION", "name": "BYTE_TO_RANGE", "input": [{"name": "X", "type": "BYTE", "description": "The BYTE value to be converted, which should be in the range of 0 to 255."}, {"name": "low", "type": "REAL", "description": "The lower boundary of the desired range."}, {"name": "high", "type": "REAL", "description": "The upper boundary of the desired range."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The scaled value in the range defined by low and high based on the input BYTE value.", "fields": []}}
{"title": "String to Weekday Conversion", "description": "This function converts a given string representing a weekday into its corresponding integer value (1 to 7) based on the language specified. If the input string does not match any weekday in the specified language, the function will return the integer value derived from the input string using STRING_TO_INT.", "type": "FUNCTION", "name": "FSTRING_TO_WEEKDAY", "input": [{"name": "WDAY", "type": "STRING[20]", "description": "A string representation of the weekday to be converted."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language index to be used for weekday conversion. 0 refers to the default language."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "An integer representing the corresponding weekday (1 to 7) if a match is found, otherwise the result of STRING_TO_INT on WDAY."}}
{"title": "Convert Two Words to a DWORD", "description": "This function takes two 16-bit WORD values and combines them into a single 32-bit DWORD value by shifting the first WORD to the left by 16 bits, and then performing a bitwise OR with the second WORD.", "type": "FUNCTION", "name": "DWORD_OF_WORD", "input": [{"name": "W1", "type": "WORD", "description": "The first 16-bit WORD value to be converted and shifted."}, {"name": "W0", "type": "WORD", "description": "The second 16-bit WORD value to be combined with the first."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting 32-bit DWORD value formed by combining W1 and W0.", "fields": []}}
{"title": "ESR Monitor Block", "description": "This function block monitors the state of 8 boolean inputs and generates output data based on changes in these inputs. It checks for changes in each of the inputs and fills an output structure with relevant data, which includes the input's type, address, timestamp, and data value.", "type": "FUNCTION_BLOCK", "name": "ESR_MON_B8", "input": [{"name": "s0", "type": "BOOL", "description": "Boolean input 0 for state monitoring."}, {"name": "s1", "type": "BOOL", "description": "Boolean input 1 for state monitoring."}, {"name": "s2", "type": "BOOL", "description": "Boolean input 2 for state monitoring."}, {"name": "s3", "type": "BOOL", "description": "Boolean input 3 for state monitoring."}, {"name": "s4", "type": "BOOL", "description": "Boolean input 4 for state monitoring."}, {"name": "s5", "type": "BOOL", "description": "Boolean input 5 for state monitoring."}, {"name": "s6", "type": "BOOL", "description": "Boolean input 6 for state monitoring."}, {"name": "s7", "type": "BOOL", "description": "Boolean input 7 for state monitoring."}, {"name": "DT_in", "type": "DT", "description": "Data time input to be associated with the monitored states."}, {"name": "a0", "type": "STRING[10]", "description": "String address for input 0."}, {"name": "a1", "type": "STRING[10]", "description": "String address for input 1."}, {"name": "a2", "type": "STRING[10]", "description": "String address for input 2."}, {"name": "a3", "type": "STRING[10]", "description": "String address for input 3."}, {"name": "a4", "type": "STRING[10]", "description": "String address for input 4."}, {"name": "a5", "type": "STRING[10]", "description": "String address for input 5."}, {"name": "a6", "type": "STRING[10]", "description": "String address for input 6."}, {"name": "a7", "type": "STRING[10]", "description": "String address for input 7."}], "output": [{"name": "ESR_Flag", "type": "BOOL", "description": "Flag indicating if any input state has changed."}], "in/out": [{"name": "ESR_Out", "type": "ARRAY[0..3] OF esr_data", "description": "Array of output data structures that hold information about the changes in the inputs."}], "return_value": null}
{"title": "Click Edge Detection and Counting Function Block", "description": "This function block detects rising edges on the input signal and counts the number of falling edges that follow. It activates specific output signals based on the count of detected edges for a single cycle only. The block resets the output signals when the input is false.", "type": "FUNCTION_BLOCK", "name": "CLICK_DEC", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input signal that triggers edge detection."}, {"name": "TC", "type": "TIME", "description": "Time constant used for timing operations within the block."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal activated when the count is zero."}, {"name": "Q1", "type": "BOOL", "description": "Output signal activated when the count is one."}, {"name": "Q2", "type": "BOOL", "description": "Output signal activated when the count is two."}, {"name": "Q3", "type": "BOOL", "description": "Output signal activated when the count is three."}], "in/out": [], "return_value": null}
{"title": "Find Character in String", "description": "This function aims to find the index of the first character in a given string that meets specific criteria, starting from a specified position. It returns the index of the character if found, or 0 if no such character exists.", "type": "FUNCTION", "name": "FIND_CHAR", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The string in which to search for the character."}, {"name": "pos", "type": "INT", "description": "The starting position in the string from which to begin the search."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The index of the found character if it meets the criteria; otherwise, 0.", "fields": []}}
{"title": "Trend Detection Function Block", "description": "The TREND_DW function block monitors a DWORD input value 'X' and detects trends in its changes. It outputs boolean signals indicating whether there is an upward or downward trend, along with the difference in value from the last input. The function block also produces a boolean output 'Q' indicating a change has occurred.", "type": "FUNCTION_BLOCK", "name": "TREND_DW", "input": [{"name": "X", "type": "DWORD", "description": "The input value to be monitored for trend detection."}], "output": [{"name": "Q", "type": "BOOL", "description": "Indicates whether the input value 'X' has changed."}, {"name": "TU", "type": "BOOL", "description": "True if an upward trend is detected (X has increased)."}, {"name": "TD", "type": "BOOL", "description": "True if a downward trend is detected (X has decreased)."}, {"name": "D", "type": "DWORD", "description": "The difference in value between the current and last input value."}], "in/out": [], "return_value": null}
{"title": "PID Controller Function Block", "description": "This function block implements a Proportional-Integral-Derivative (PID) controller, processing input setpoint and actual value to generate a control output, while managing manual control and reset functions.", "type": "FUNCTION_BLOCK", "name": "CTRL_PI", "input": [{"name": "ACT", "type": "REAL", "description": "The actual value to be used in the PID control."}, {"name": "SET", "type": "REAL", "description": "The desired setpoint value for the PID control."}, {"name": "SUP", "type": "REAL", "description": "The reference value for supervision purposes."}, {"name": "OFS", "type": "REAL", "description": "Offset value to adjust the output signal."}, {"name": "M_I", "type": "REAL", "description": "Manual input value for the controller."}, {"name": "MAN", "type": "BOOL", "description": "Manual mode switch; if true, the controller uses manual input."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the controller operation."}, {"name": "KP", "type": "REAL", "description": "Proportional gain factor for the PID controller.", "fields": null}, {"name": "KI", "type": "REAL", "description": "Integral gain factor for the PID controller.", "fields": null}, {"name": "LL", "type": "REAL", "description": "Lower limit for the output value.", "fields": null}, {"name": "LH", "type": "REAL", "description": "Upper limit for the output value.", "fields": null}], "output": [{"name": "Y", "type": "REAL", "description": "The output value generated by the PID controller."}, {"name": "DIFF", "type": "REAL", "description": "The difference between the setpoint and actual value."}, {"name": "LIM", "type": "BOOL", "description": "Flag indicating whether the output is within the limits."}], "in/out": [], "return_value": null}
{"title": "Convert Byte to Uppercase", "description": "This function takes a BYTE input and converts it to its uppercase equivalent if applicable. It checks if the input is a lowercase letter in the standard ASCII range or an extended ASCII letter, and returns the corresponding uppercase letter. If the input does not fall within these criteria, it returns the input as is.", "type": "FUNCTION", "name": "TO_UPPER", "input": [{"name": "IN", "type": "BYTE", "description": "The BYTE value to be converted to uppercase."}], "output": [{"name": "TO_UPPER", "type": "BYTE", "description": "The uppercase equivalent of the input BYTE, or the original input if no conversion is applicable."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The result of the uppercase conversion for the input BYTE.", "fields": []}}
{"title": "Mixing Two Real Values", "description": "This function takes two real values and a mixing factor and returns a mixed value based on the specified factor. The mixing is done by taking a weighted sum of the two input values, where the weight is determined by the mixing factor M.", "type": "FUNCTION", "name": "MIX", "input": [{"name": "A", "type": "REAL", "description": "The first real value to be mixed."}, {"name": "B", "type": "REAL", "description": "The second real value to be mixed."}, {"name": "M", "type": "REAL", "description": "The mixing factor, which determines the weight of each input value in the final result."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the mixing operation, calculated as (1.0 - M) * A + M * B."}}
{"title": "Convert DWORD to String", "description": "This function converts a DWORD input into a string representation consisting of 32 binary characters. Each bit of the DWORD is converted to its corresponding binary character ('0' or '1') and the resulting string is null-terminated.", "type": "FUNCTION", "name": "DWORD_TO_STRB", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value that needs to be converted to a string."}], "output": [{"name": "DWORD_TO_STRB", "type": "string", "description": "The output string representation of the input DWORD value, containing binary characters."}], "in/out": [], "return_value": {"type": "string", "description": "The resulting binary string derived from the input DWORD.", "fields": []}}
{"title": "Fahrenheit to Celsius Conversion", "description": "This function converts a temperature value from Fahrenheit to Celsius. It accepts a temperature in Fahrenheit as input and returns the corresponding temperature in Celsius.", "type": "FUNCTION", "name": "F_TO_C", "input": [{"name": "fahrenheit", "type": "REAL", "description": "The temperature value in Fahrenheit that needs to be converted to Celsius."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in Celsius.", "fields": []}}
{"title": "Hysteresis Control Logic", "description": "This FUNCTION_BLOCK implements a hysteresis control mechanism. The function determines output states based on an input value, a reference value with hysteresis, and the threshold for the hysteresis effect. The output indicates whether the input is within the hysteresis bounds and whether the condition is active.", "type": "FUNCTION_BLOCK", "name": "HYST_2", "input": [{"name": "IN", "type": "REAL", "description": "The input value to be evaluated against the hysteresis conditions."}, {"name": "VAL", "type": "REAL", "description": "The reference value from which hysteresis is calculated."}, {"name": "HYS", "type": "REAL", "description": "The amount of hysteresis used to determine the output states."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output indicating if the input is above the upper hysteresis threshold."}, {"name": "WIN", "type": "BOOL", "description": "The boolean output indicating if the input is within the hysteresis window."}], "in/out": [], "return_value": {}}
{"title": "Decimal String to Integer Conversion", "description": "This function takes a decimal string input and converts it to an integer. The function handles both positive and negative numbers based on the presence of the negative sign in the string. It processes each character of the string, converting it to its corresponding integer value and accumulating the result.", "type": "FUNCTION", "name": "DEC_TO_INT", "input": [{"name": "DEC", "type": "STRING[10]", "description": "The input decimal string to be converted to an integer."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The integer value resulting from the conversion of the input decimal string.", "fields": []}}
{"title": "Analog Input Processing", "description": "This function block processes an analog input value by interpreting various bits for error and overflow conditions, and converting the input value to a real output while considering the sign bit.", "type": "FUNCTION_BLOCK", "name": "AIN1", "input": [{"name": "in", "type": "DWORD", "description": "The input value that needs to be processed."}, {"name": "sign_bit", "type": "INT", "description": "The position of the sign bit in the input value, defaulting to 255."}, {"name": "error_bit", "type": "INT", "description": "The position of the error bit in the input value, defaulting to 255."}, {"name": "error_code_en", "type": "BOOL", "description": "A boolean flag enabling error code checking."}, {"name": "error_code", "type": "DWORD", "description": "The error code to compare against the input value."}, {"name": "overflow_bit", "type": "INT", "description": "The position of the overflow bit in the input value, defaulting to 255."}, {"name": "overflow_code_en", "type": "BOOL", "description": "A boolean flag enabling overflow code checking."}, {"name": "overflow_code", "type": "DWORD", "description": "The overflow code to compare against the input value."}, {"name": "Bit_0", "type": "INT", "description": "The starting bit position for the processing."}, {"name": "Bit_N", "type": "INT", "description": "The maximum bit position for processing, defaulting to 31."}, {"name": "out_min", "type": "REAL", "description": "The minimum output value after conversion."}, {"name": "out_max", "type": "REAL", "description": "The maximum output value after conversion, defaulting to 10.0."}, {"name": "code_min", "type": "DWORD", "description": "The minimum allowable code value for valid input."}, {"name": "code_max", "type": "DWORD", "description": "The maximum allowable code value for valid input, defaulting to 16#FFFFFFFF."}, {"name": "error_output", "type": "REAL", "description": "Output value when an error condition is detected."}, {"name": "overflow_output", "type": "REAL", "description": "Output value when an overflow condition is detected, defaulting to 10.0."}], "output": [{"name": "out", "type": "REAL", "description": "The processed output value after conversion."}, {"name": "sign", "type": "BOOL", "description": "Indicator of the sign of the output value."}, {"name": "error", "type": "BOOL", "description": "Flag indicating whether an error condition was detected."}, {"name": "overflow", "type": "BOOL", "description": "Flag indicating whether an overflow condition was detected."}], "in/out": [], "return_value": null}
{"title": "Find Position of Substring", "description": "This function, FINDP, searches for the position of a specified substring (src) within a given string (str), starting the search from a defined position (pos). If the substring is found, its position is returned; otherwise, the function returns 0.", "type": "FUNCTION", "name": "FINDP", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The string in which to search for the substring."}, {"name": "src", "type": "STRING[STRING_LENGTH]", "description": "The substring that is being searched for in the main string."}, {"name": "pos", "type": "INT", "description": "The position from which to start searching in the main string."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the first occurrence of the substring; returns 0 if the substring is not found.", "fields": []}}
{"title": "Scheduler Function Block", "description": "This function block schedules output signals based on input events and specified time intervals. The block monitors time elapsed since specific events represented by E0, E1, E2, and E3, and activates corresponding outputs Q0, Q1, Q2, and Q3 when the specified time conditions are met.", "type": "FUNCTION_BLOCK", "name": "SCHEDULER", "input": [{"name": "E0", "type": "BOOL", "description": "Input event signal for output Q0."}, {"name": "E1", "type": "BOOL", "description": "Input event signal for output Q1."}, {"name": "E2", "type": "BOOL", "description": "Input event signal for output Q2."}, {"name": "E3", "type": "BOOL", "description": "Input event signal for output Q3."}, {"name": "T0", "type": "TIME", "description": "The time interval for activating output Q0."}, {"name": "T1", "type": "TIME", "description": "The time interval for activating output Q1."}, {"name": "T2", "type": "TIME", "description": "The time interval for activating output Q2."}, {"name": "T3", "type": "TIME", "description": "The time interval for activating output Q3."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal indicating the status of E0 after T0 has elapsed."}, {"name": "Q1", "type": "BOOL", "description": "Output signal indicating the status of E1 after T1 has elapsed."}, {"name": "Q2", "type": "BOOL", "description": "Output signal indicating the status of E2 after T2 has elapsed."}, {"name": "Q3", "type": "BOOL", "description": "Output signal indicating the status of E3 after T3 has elapsed."}], "in/out": [], "return_value": {}}
{"title": "Circle Calculation Function", "description": "This function computes a value based on the radius and axis parameters of a circle. The output is a real number calculated using a specific formula that incorporates both the radius and an axis factor.", "type": "FUNCTION", "name": "CIRCLE_C", "input": [{"name": "Rx", "type": "REAL", "description": "The radius of the circle."}, {"name": "Ax", "type": "REAL", "description": "The axis factor used in the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value from the formula that involves the radius and axis factor."}}
{"title": "8-bit Shift Register Function Block", "description": "The SHR_8PLE function block implements an 8-bit shift register that can shift the bits either up or down based on the UP input. It allows for loading a new byte value when the load signal is active and resets the register when the reset signal is received.", "type": "FUNCTION_BLOCK", "name": "SHR_8PLE", "input": [{"name": "Din", "type": "BOOL", "description": "Input data bit to be shifted into the register."}, {"name": "Dload", "type": "BYTE", "description": "Byte value to load into the register when load signal is active."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal which triggers the shifting operation."}, {"name": "UP", "type": "BOOL", "description": "Direction of shift; TRUE for shift up, FALSE for shift down."}, {"name": "load", "type": "BOOL", "description": "Signal to load Dload value into the register."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to clear the register."}], "output": [{"name": "DOut", "type": "BOOL", "description": "Output data bit, represents the bit shifted out of the register."}], "in/out": [], "return_value": null}
{"title": "Convert WORD to Range", "description": "This function takes a WORD input and maps it to a specified range defined by the low and high REAL values. The output is a REAL number that scales the input based on the given range.", "type": "FUNCTION", "name": "WORD_TO_RANGE", "input": [{"name": "X", "type": "WORD", "description": "The WORD value to be converted into the specified range."}, {"name": "low", "type": "REAL", "description": "The lower bound of the range to which the WORD value will be mapped."}, {"name": "high", "type": "REAL", "description": "The upper bound of the range to which the WORD value will be mapped."}], "output": [{"name": "WORD_TO_RANGE", "type": "REAL", "description": "The resulting REAL value after mapping the WORD input into the specified range."}], "in/out": [], "return_value": {"type": "REAL", "description": "The mapped REAL value based on the input WORD and specified range.", "fields": []}}
{"title": "Range to Word Conversion", "description": "This function converts a given real number into a word representation based on specified lower and upper limits. The conversion is performed by normalizing the input value within the limits and scaling it to fit into a word format.", "type": "FUNCTION", "name": "RANGE_TO_WORD", "input": [{"name": "X", "type": "REAL", "description": "The input real number that needs to be converted."}, {"name": "low", "type": "REAL", "description": "The lower limit for the range."}, {"name": "high", "type": "REAL", "description": "The upper limit for the range."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The word representation of the normalized input value.", "fields": []}}
{"title": "Conversion from BFT to MS", "description": "This function converts a value from BFT (an integer value) to MS (a real value) using the equation MS = BFT^1.5 * 0.836. The function accepts an integer input representing the BFT value and returns a real number representing the corresponding MS value.", "type": "FUNCTION", "name": "BFT_TO_MS", "input": [{"name": "BFT", "type": "INT", "description": "An integer value representing BFT to be converted to MS."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted MS value calculated as BFT raised to the power of 1.5 multiplied by 0.836."}}
{"title": "Convert String to Lowercase", "description": "This function takes a string input and converts all characters in the string to lowercase. The function is capable of handling extended ASCII characters, ensuring proper conversion of special characters such as Ä, Ö, and Ü.", "type": "FUNCTION", "name": "LOWERCASE", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be converted to lowercase."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The lowercase version of the input string.", "fields": []}}
{"title": "Buffer Comparison Function", "description": "This function searches for the first occurrence of a specified byte array (PT2) within another byte array (PT1) starting from a specified index (START). If found, it returns the index of the first match in PT1, otherwise it returns -1.", "type": "FUNCTION", "name": "BUFFER_COMP", "input": [{"name": "PT1", "type": "POINTER TO ARRAY [0..32767] OF BYTE", "description": "Pointer to the first byte array where the search will be performed."}, {"name": "SIZE1", "type": "INT", "description": "The size of the first byte array (PT1)."}, {"name": "PT2", "type": "POINTER TO ARRAY [0..32767] OF BYTE", "description": "Pointer to the second byte array which will be searched within the first byte array."}, {"name": "SIZE2", "type": "INT", "description": "The size of the second byte array (PT2)."}, {"name": "START", "type": "INT", "description": "The starting index in the first byte array (PT1) from which the search will be initiated."}], "output": [{"name": "BUFFER_COMP", "type": "INT", "description": "Returns the index of the first match in the first byte array (PT1), or -1 if no match was found."}], "in/out": [], "return_value": {"type": "INT", "description": "The return value indicates the position of the first occurrence of the second byte array in the first byte array.", "fields": []}}
{"title": "Gamma Function Calculation", "description": "This function calculates the Gamma value for a given input X based on mathematical formulas. It utilizes two different approaches depending on the value of X to ensure better accuracy.", "type": "FUNCTION", "name": "GAMMA", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the Gamma function is to be calculated."}], "output": [{"name": "GAMMA", "type": "REAL", "description": "The computed Gamma value based on the input X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the Gamma function calculation.", "fields": []}}
{"title": "Normalize a 3D Vector", "description": "This function takes a 3D vector as input and returns its normalized form. Normalization is done by calculating the absolute length of the vector and then scaling the vector by the inverse of its length, provided the length is greater than zero to avoid division by zero.", "type": "FUNCTION", "name": "V3_NORM", "input": [{"name": "A", "type": "Vector_3", "description": "The input 3D vector that needs to be normalized."}], "output": [{"name": "V3_NORM", "type": "vector_3", "description": "The normalized 3D vector as the output."}], "in/out": [], "return_value": {"type": "vector_3", "description": "The normalized form of the input vector.", "fields": []}}
{"title": "Convert Bytes to DWORD", "description": "This function takes four individual BYTE values and combines them into a single DWORD value. The bytes are combined in the order of B3, B2, B1, and B0, where B3 represents the highest byte and B0 represents the lowest byte.", "type": "FUNCTION", "name": "DWORD_OF_BYTE", "input": [{"name": "B3", "type": "BYTE", "description": "The highest byte of the DWORD."}, {"name": "B2", "type": "BYTE", "description": "The second highest byte of the DWORD."}, {"name": "B1", "type": "BYTE", "description": "The third byte of the DWORD."}, {"name": "B0", "type": "BYTE", "description": "The lowest byte of the DWORD."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The combined DWORD value generated from the four input BYTE values."}}
{"title": "Vector Subtraction Function", "description": "This function performs subtraction of two 3D vectors. The function takes two input vectors and returns a new vector that represents the difference between the two input vectors in each component (X, Y, and Z).", "type": "FUNCTION", "name": "V3_SUB", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector from which the second vector will be subtracted."}, {"name": "B", "type": "Vector_3", "description": "The second input vector that will be subtracted from the first vector."}], "output": [], "in/out": [], "return_value": {"type": "vector_3", "description": "The resultant vector after subtracting vector B from vector A.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the resultant vector, calculated as A.X - B.X."}, {"name": "Y", "type": "REAL", "description": "The Y component of the resultant vector, calculated as A.Y - B.Y."}, {"name": "Z", "type": "REAL", "description": "The Z component of the resultant vector, calculated as A.Z - B.Z."}]}}
{"title": "Count Substring Occurrences", "description": "This function computes the number of times a specific substring appears within a given string. It utilizes a repeat-until loop to continuously find and replace occurrences of the substring until none are left.", "type": "FUNCTION", "name": "COUNT_SUBSTRING", "input": [{"name": "SEARCH", "type": "STRING", "description": "The substring to search for within the main string."}, {"name": "STR", "type": "STRING", "description": "The main string in which substring occurrences will be counted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The total number of occurrences of the substring within the main string."}}
{"title": "Complex Number Multiplication", "description": "This function is designed to multiply two complex numbers and return the result as a complex number. The multiplication is performed using the standard formula for complex multiplication.", "type": "FUNCTION", "name": "CMUL", "input": [{"name": "X", "type": "COMPLEX", "description": "The first complex number to be multiplied."}, {"name": "Y", "type": "COMPLEX", "description": "The second complex number to be multiplied."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The result of multiplying the two complex numbers.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Simple Signal Handler Function Block", "description": "This function block handles input signals by updating the output variable when the clock input transitions from low to high. It captures the input real value and sets a trigger boolean output to indicate when the input value is captured.", "type": "FUNCTION_BLOCK", "name": "SH", "input": [{"name": "in", "type": "REAL", "description": "Input Real Variable that receives the signal to be processed."}, {"name": "CLK", "type": "BOOL", "description": "Clock Input Variable that triggers the processing of the input signal."}], "output": [{"name": "out", "type": "REAL", "description": "Output Real Variable that reflects the captured input value when triggered."}, {"name": "trig", "type": "BOOL", "description": "Output BOOL Variable that indicates whether the input has been captured or not."}], "in/out": [], "return_value": null}
{"title": "Set Time of Day (TOD)", "description": "This function sets the time of day based on the provided hours, minutes, and seconds. The input parameters are converted into a time format and assigned to the output.", "type": "FUNCTION", "name": "SET_TOD", "input": [{"name": "hour", "type": "INT", "description": "The hour component of the time, ranging from 0 to 23."}, {"name": "minute", "type": "INT", "description": "The minute component of the time, ranging from 0 to 59."}, {"name": "second", "type": "REAL", "description": "The second component of the time, which can include a fractional part for milliseconds."}], "output": [], "in/out": [], "return_value": {"type": "TOD", "description": "Returns the time of day value calculated from the input parameters.", "fields": []}}
{"title": "Function to Convert Frequency to Period Time", "description": "This function calculates the period time based on a given frequency. The input frequency is provided in Hertz (REAL), and the function outputs the corresponding period time in TIME format. The calculation involves converting the frequency to a period using the formula: period_time = 1 / frequency * 1000, where the result is then converted from DWORD to TIME format.", "type": "FUNCTION", "name": "F_TO_PT", "input": [{"name": "F", "type": "REAL", "description": "The input frequency in Hertz."}], "output": [], "in/out": [], "return_value": {"type": "TIME", "description": "The calculated period time corresponding to the given frequency.", "fields": []}}
{"title": "Selection of Valid Inputs from Three Inputs", "description": "This function block selects valid inputs from three real input values based on a given tolerance. It computes the average of the valid inputs and returns the result as well as additional status indicators.", "type": "FUNCTION_BLOCK", "name": "SEL2_OF_3", "input": [{"name": "IN1", "type": "REAL", "description": "The first input value."}, {"name": "IN2", "type": "REAL", "description": "The second input value."}, {"name": "IN3", "type": "REAL", "description": "The third input value."}, {"name": "D", "type": "REAL", "description": "The tolerance value to determine the validity of inputs."}], "output": [{"name": "Y", "type": "REAL", "description": "The calculated average of the selected valid input values."}, {"name": "W", "type": "INT", "description": "Indicator of which inputs were valid (0 for all, 1 for IN2 and IN3, 2 for IN3 and IN1, 3 for IN1 and IN2, 4 for none)."}, {"name": "E", "type": "BOOL", "description": "Error flag indicating if no valid input combinations were found."}], "in/out": [], "return_value": null}
{"title": "Calculate Stair Value", "description": "This function calculates the stair value of the input 'X' based on the provided step size 'D'. If 'D' is greater than zero, the function will compute the largest multiple of 'D' that is less than or equal to 'X'. If 'D' is zero or negative, the function will return 'X' unchanged.", "type": "FUNCTION", "name": "STAIR", "input": [{"name": "X", "type": "REAL", "description": "The value from which the stair calculation is derived."}, {"name": "D", "type": "REAL", "description": "The step size used for the stair calculation. Should be greater than zero for the operation to apply."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated stair value based on the inputs.", "fields": []}}
{"title": "Complex Hyperbolic Sine Function", "description": "This function calculates the complex hyperbolic sine of a given complex number. It takes a complex number as input and returns a complex number as the result of the calculation.", "type": "FUNCTION", "name": "CSINH", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the hyperbolic sine is to be calculated."}], "output": [{"name": "CSINH", "type": "complex", "description": "The complex hyperbolic sine of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The calculated complex hyperbolic sine value.", "fields": [{"name": "re", "type": "float", "description": "The real part of the complex hyperbolic sine."}, {"name": "im", "type": "float", "description": "The imaginary part of the complex hyperbolic sine."}]}}
{"title": "Convert DWORD to REAL", "description": "This function takes an input of type DWORD and converts it into a REAL type. The function uses a pointer to achieve the conversion, ensuring that the value is correctly interpreted as a REAL number.", "type": "FUNCTION", "name": "DW_TO_REAL", "input": [{"name": "X", "type": "DWORD", "description": "The DWORD input variable that needs to be converted to REAL."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The REAL value obtained from the conversion of the input DWORD.", "fields": []}}
{"title": "Array Initialization Function", "description": "This function initializes an array of real numbers to a specified value. It takes a pointer to the array, the size of the array, and the initial value as input parameters. The function will iterate through the first quarter of the array, setting each element to the initial value. The function returns TRUE upon successful execution.", "type": "FUNCTION", "name": "_ARRAY_INIT", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array that needs to be initialized."}, {"name": "size", "type": "UINT", "description": "The size of the array to be initialized."}, {"name": "init", "type": "REAL", "description": "The initial value to set for each element of the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the array initialization was successful."}}
{"title": "Message Generation Based on Alarm Status", "description": "This function block generates a message output based on the presence of alarms indicated by boolean input parameters. If any of the input parameters IN1 to IN8 are true, the corresponding message from S1 to S8 is set as the output M. If none of the inputs are true, the output M is cleared.", "type": "FUNCTION_BLOCK", "name": "MESSAGE_8", "input": [{"name": "IN1", "type": "BOOL", "description": "Indicates the presence of alarm 1."}, {"name": "IN2", "type": "BOOL", "description": "Indicates the presence of alarm 2."}, {"name": "IN3", "type": "BOOL", "description": "Indicates the presence of alarm 3."}, {"name": "IN4", "type": "BOOL", "description": "Indicates the presence of alarm 4."}, {"name": "IN5", "type": "BOOL", "description": "Indicates the presence of alarm 5."}, {"name": "IN6", "type": "BOOL", "description": "Indicates the presence of alarm 6."}, {"name": "IN7", "type": "BOOL", "description": "Indicates the presence of alarm 7."}, {"name": "IN8", "type": "BOOL", "description": "Indicates the presence of alarm 8."}, {"name": "S1", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 1."}, {"name": "S2", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 2."}, {"name": "S3", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 3."}, {"name": "S4", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 4."}, {"name": "S5", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 5."}, {"name": "S6", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 6."}, {"name": "S7", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 7."}, {"name": "S8", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 8."}], "output": [{"name": "M", "type": "STRING[STRING_LENGTH]", "description": "The output message based on the current alarm status."}], "in/out": [], "return_value": {}}
{"title": "Flip-Flop Dynamic Reset and Set", "description": "This FUNCTION_BLOCK implements a flip-flop with dynamic reset (RST) and set (SET) inputs. The block outputs a boolean Q based on the state of the inputs (D, CLK, RST, SET). It updates the output Q on the rising edge of the clock input (CLK) or when a reset or set request is made. If the reset (RST) is active, Q is set to NOT RST. Otherwise, Q follows the data input (D) when the clock signal rises.", "type": "FUNCTION_BLOCK", "name": "FF_DRE", "input": [{"name": "SET", "type": "BOOL", "description": "Input to set the output Q to high."}, {"name": "D", "type": "BOOL", "description": "Data input that determines the value of output Q when CLK is high."}, {"name": "CLK", "type": "BOOL", "description": "Clock input that triggers the update of output Q on its rising edge."}, {"name": "RST", "type": "BOOL", "description": "Input to reset the output Q."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output that represents the state of the flip-flop."}], "in/out": [], "return_value": null}
{"title": "Ramping Soft Signal Control", "description": "This function block implements a soft ramping control for a signal based on input conditions. It allows for a gradual increase or decrease of an output value while adhering to specified ramping times for both on and off transitions.", "type": "FUNCTION_BLOCK", "name": "RMP_SOFT", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input that triggers the ramping action."}, {"name": "VAL", "type": "BYTE", "description": "The target value to ramp towards."}, {"name": "PT_ON", "type": "TIME", "description": "The ramping time when increasing the output value."}, {"name": "PT_OFF", "type": "TIME", "description": "The ramping time when decreasing the output value."}], "output": [{"name": "OUT", "type": "BYTE", "description": "The output value that gets ramped up or down based on the input conditions."}], "in/out": [], "return_value": null}
{"title": "Tangent Over X Function", "description": "This function computes the value of the tangent divided by its argument X. If the argument X equals zero, it returns 1.0. Otherwise, it calculates the tangent of X divided by X.", "type": "FUNCTION", "name": "TANC", "input": [{"name": "X", "type": "REAL", "description": "The input real number which the tangent is computed from."}], "output": [{"name": "TANC", "type": "REAL", "description": "The output real number resulting from the computation of TAN(X) / X or 1.0 if X is zero."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the tangent function divided by the input value, or 1.0 if the input is zero."}}
{"title": "Integer to BCD Conversion", "description": "This function converts a given integer input into a BCD (Binary-Coded Decimal) representation. The function takes an integer input, divides it by 10 to extract the higher nibble and uses the remainder to extract the lower nibble, ultimately combining both to produce a BCD byte output.", "type": "FUNCTION", "name": "INT_TO_BCDC", "input": [{"name": "IN", "type": "INT", "description": "The integer value to be converted into BCD format."}], "output": [{"name": "BYTE", "type": "BYTE", "description": "The BCD representation of the input integer."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The result of the BCD conversion as a byte."}}
{"title": "Filter Waveform", "description": "This function block implements a filter that computes the weighted average of the last 16 input samples using specified weights. It initializes the buffer and updates it with the latest input value while resetting if indicated. After that, it calculates the output based on the weights and the buffered samples.", "type": "FUNCTION_BLOCK", "name": "FILTER_WAV", "input": [{"name": "X", "type": "REAL", "description": "The input sample value to be filtered."}, {"name": "W", "type": "ARRAY[0..15] OF REAL", "description": "An array of weights corresponding to the samples in the buffer."}, {"name": "RST", "type": "BOOL", "description": "A reset signal that initializes the buffer if set to TRUE."}], "output": [{"name": "Y", "type": "REAL", "description": "The output result representing the weighted average of the buffered samples."}], "in/out": [], "return_value": null}
{"title": "Retrieve Last Element from a List", "description": "This function retrieves the last element from a given list of strings, separating it based on a specified delimiter. The function traverses the list until it finds the last occurrence of the delimiter and returns the substring that comes after it. The input list is modified to terminate at the last delimiter found.", "type": "FUNCTION", "name": "LIST_RETRIEVE_LAST", "input": [{"name": "SEP", "type": "BYTE", "description": "The byte value used as a separator in the list."}], "output": [{"name": "LIST_RETRIEVE_LAST", "type": "string", "description": "The substring extracted from the list after the last occurrence of the separator."}], "in/out": [{"name": "LIST", "type": "STRING[LENGTH := LIST_LENGTH]", "description": "The input-output list of characters from which the last element is to be retrieved. This list will be modified to terminate at the last separator."}], "return_value": {"type": "string", "description": "Returns the last element in the list found after the last separator."}}
{"title": "Check if Character is Lowercase", "description": "This function determines whether a given BYTE input value corresponds to a lowercase ASCII character. It takes into account whether extended ASCII settings are used.", "type": "FUNCTION", "name": "ISC_LOWER", "input": [{"name": "IN", "type": "BYTE", "description": "Input variable representing the ASCII value of a character."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input corresponds to a lowercase ASCII character, otherwise returns FALSE."}}
{"title": "PID Control Function Block", "description": "This function block implements a PID (Proportional, Integral, Derivative) control algorithm. It takes several input parameters for control settings and generates an output based on the control loop calculations. The block handles limits, manual control, and resetting of the PID controller.", "type": "FUNCTION_BLOCK", "name": "CTRL_PID", "input": [{"name": "ACT", "type": "REAL", "description": "The actual value from the process being controlled."}, {"name": "SET", "type": "REAL", "description": "The desired setpoint for the process variable."}, {"name": "SUP", "type": "REAL", "description": "A supplementary input for additional control."}, {"name": "OFS", "type": "REAL", "description": "Offset value for the controller output."}, {"name": "M_I", "type": "REAL", "description": "Manual input value for control when in manual mode."}, {"name": "MAN", "type": "BOOL", "description": "Manual control flag; when true, overrides the automatic control."}, {"name": "RST", "type": "BOOL", "description": "Reset flag for the PID controller."}, {"name": "KP", "type": "REAL", "description": "Proportional gain of the PID controller.", "default": "1.0"}, {"name": "TN", "type": "REAL", "description": "Integral time constant of the PID controller.", "default": "1.0"}, {"name": "TV", "type": "REAL", "description": "Derivative time constant of the PID controller.", "default": "1.0"}, {"name": "LL", "type": "REAL", "description": "Lower limit for the controller output.", "default": "-1000.0"}, {"name": "LH", "type": "REAL", "description": "Upper limit for the controller output.", "default": "1000.0"}], "output": [{"name": "Y", "type": "REAL", "description": "Output value of the PID controller."}, {"name": "DIFF", "type": "REAL", "description": "Difference between setpoint and actual value."}, {"name": "LIM", "type": "BOOL", "description": "Indicator whether the output is within defined limits."}], "in/out": [], "return_value": null}
{"title": "Signal Function Block", "description": "This function block processes an input signal and generates an output based on time intervals. It calculates a step value based on the system time and the provided time interval, and uses it to modify the output signal.", "type": "FUNCTION_BLOCK", "name": "SIGNAL", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input indicating whether an alarm is present."}, {"name": "SIG", "type": "BYTE", "description": "A byte input representing a signal value that will be combined with the calculated step."}, {"name": "TS", "type": "TIME", "description": "A time input to determine the interval for the step calculation."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating the result of the signal processing."}], "in/out": [], "return_value": null}
{"title": "FIFO 16-Element Queue", "description": "This function block implements a First-In-First-Out (FIFO) queue capable of holding up to 16 elements, allowing for simultaneous read and write operations while managing queue states such as full and empty.", "type": "FUNCTION_BLOCK", "name": "FIFO_16", "input": [{"name": "Din", "type": "DWORD", "description": "The data input that will be stored in the FIFO queue."}, {"name": "E", "type": "BOOL", "description": "Enable input for the FIFO operations. When TRUE, the operation proceeds."}, {"name": "RD", "type": "BOOL", "description": "Read command input. When TRUE, it indicates a read operation should occur."}, {"name": "WD", "type": "BOOL", "description": "Write command input. When TRUE, it indicates a write operation should occur."}, {"name": "RST", "type": "BOOL", "description": "Reset input. When TRUE, it resets the FIFO queue to its initial state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data output from the FIFO queue when a read operation is performed."}, {"name": "EMPTY", "type": "BOOL", "description": "Indicates whether the FIFO queue is empty. TRUE if empty, FALSE otherwise."}, {"name": "FULL", "type": "BOOL", "description": "Indicates whether the FIFO queue is full. TRUE if full, FALSE otherwise."}], "in/out": [], "return_value": null}
{"title": "Scale Byte Function", "description": "This function takes an input byte value and scales it to a specified range defined by O_LO and O_HI based on two limits I_LO and I_HI. If the input high limit equals the input low limit, the function returns the output low value directly. Otherwise, it performs a scaling calculation to map the input variable to the output range.", "type": "FUNCTION", "name": "SCALE_B", "input": [{"name": "X", "type": "BYTE", "description": "The input byte value to be scaled."}, {"name": "I_LO", "type": "BYTE", "description": "The lower limit of the input range."}, {"name": "I_HI", "type": "BYTE", "description": "The upper limit of the input range."}, {"name": "O_LO", "type": "REAL", "description": "The lower limit of the output range."}, {"name": "O_HI", "type": "REAL", "description": "The upper limit of the output range."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The scaled output value based on the input range and output limits."}}
{"title": "Select 8 Function Block", "description": "This function block handles the selection of one of eight output signals based on input conditions such as rising edge, falling edge, and reset conditions. It allows for incrementing and decrementing of a state variable, which determines which output is enabled.", "type": "FUNCTION_BLOCK", "name": "SELECT_8", "input": [{"name": "E", "type": "BOOL", "description": "Enable input for the function block."}, {"name": "SET", "type": "BOOL", "description": "Sets the state variable to the value of IN when TRUE."}, {"name": "IN", "type": "BYTE", "description": "Input value used to set the state variable."}, {"name": "UP", "type": "BOOL", "description": "Increment the state variable when TRUE and the last UP was FALSE."}, {"name": "DN", "type": "BOOL", "description": "Decrement the state variable when TRUE and the last DN was FALSE."}, {"name": "RST", "type": "BOOL", "description": "Resets the state variable to 0 when TRUE."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal for state 0."}, {"name": "Q1", "type": "BOOL", "description": "Output signal for state 1."}, {"name": "Q2", "type": "BOOL", "description": "Output signal for state 2."}, {"name": "Q3", "type": "BOOL", "description": "Output signal for state 3."}, {"name": "Q4", "type": "BOOL", "description": "Output signal for state 4."}, {"name": "Q5", "type": "BOOL", "description": "Output signal for state 5."}, {"name": "Q6", "type": "BOOL", "description": "Output signal for state 6."}, {"name": "Q7", "type": "BOOL", "description": "Output signal for state 7."}, {"name": "STATE", "type": "INT", "description": "Current state of the selection (0-7)."}], "in/out": [], "return_value": null}
{"title": "Sample Time Trigger Function Block", "description": "This function block triggers an output based on the elapsed time since the last trigger. It reads the system time and compares it with a specified period (PT). If the elapsed time meets or exceeds the specified period, it outputs the input value and sets a trigger flag. Otherwise, the trigger flag is set to false.", "type": "FUNCTION_BLOCK", "name": "SH_1", "input": [{"name": "in", "type": "REAL", "description": "The input value to be output when the trigger condition is met."}, {"name": "PT", "type": "TIME", "description": "The time period that must elapse before the output is updated."}], "output": [{"name": "out", "type": "REAL", "description": "The output value that reflects the input when the trigger condition is met."}, {"name": "Trig", "type": "BOOL", "description": "A boolean flag that indicates whether the output has been updated."}], "in/out": [], "return_value": null}
{"title": "FT_Profile Function Block", "description": "The FT_Profile function block is designed to generate a variable profile based on a sequence of time-value pairs. It calculates interpolated values over a specified duration, based on input values and timing conditions, and provides an output value that reflects this profile. The block initiates a run sequence based on a trigger and maintains the state of the profile execution until completion or reset.", "type": "FUNCTION_BLOCK", "name": "FT_Profile", "input": [{"name": "K", "type": "REAL", "description": "The gain factor applied to the output value, with a default value of 1.0."}, {"name": "O", "type": "REAL", "description": "The offset added to the output value."}, {"name": "M", "type": "REAL", "description": "A multiplier applied to the time intervals, with a default value of 1.0."}, {"name": "E", "type": "BOOL", "description": "A boolean signal to start the profile generation."}, {"name": "value_0", "type": "REAL", "description": "The initial value at time_0."}, {"name": "time_1", "type": "TIME", "description": "The time at which value_1 is reached."}, {"name": "value_1", "type": "REAL", "description": "The value corresponding to time_1."}, {"name": "time_2", "type": "TIME", "description": "The time at which value_2 is reached."}, {"name": "value_2", "type": "REAL", "description": "The value corresponding to time_2."}, {"name": "time_3", "type": "TIME", "description": "The time at which value_3 is reached."}, {"name": "value_3", "type": "REAL", "description": "The value corresponding to time_3."}, {"name": "time_10", "type": "TIME", "description": "The time at which value_10 is reached."}, {"name": "value_10", "type": "REAL", "description": "The value corresponding to time_10."}, {"name": "time_11", "type": "TIME", "description": "The time at which value_11 is reached."}, {"name": "value_11", "type": "REAL", "description": "The value corresponding to time_11."}, {"name": "time_12", "type": "TIME", "description": "The time at which value_12 is reached."}, {"name": "value_12", "type": "REAL", "description": "The value corresponding to time_12."}, {"name": "time_13", "type": "TIME", "description": "The time at which value_13 is reached."}, {"name": "value_13", "type": "REAL", "description": "The value corresponding to time_13."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value calculated from the interpolation and adjusted by K and O."}, {"name": "RUN", "type": "BOOL", "description": "A boolean indicating whether the function block is currently running or not."}, {"name": "ET", "type": "TIME", "description": "Elapsed time since the start of the profile generation."}], "in/out": [], "return_value": null}
{"title": "PID Controller Function Block", "description": "This function block implements a PID (Proportional, Integral, Derivative) controller. It calculates a control output based on the input value, proportional gain, integral time, and derivative time while respecting the limits on the integrator output.", "type": "FUNCTION_BLOCK", "name": "FT_PID", "input": [{"name": "IN", "type": "REAL", "description": "The input value to the PID controller."}, {"name": "KP", "type": "REAL", "description": "Proportional gain coefficient."}, {"name": "TN", "type": "REAL", "description": "Integral time constant."}, {"name": "TV", "type": "REAL", "description": "Derivative time constant."}, {"name": "ILIM_L", "type": "REAL", "description": "Lower limit for the integrator output."}, {"name": "ILIM_H", "type": "REAL", "description": "Upper limit for the integrator output."}, {"name": "IEN", "type": "BOOL", "description": "Enable flag for the integrator."}, {"name": "RST", "type": "BOOL", "description": "Reset flag for the integrator."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the PID controller."}, {"name": "LIM", "type": "BOOL", "description": "Flag indicating whether the integrator has hit its limits."}], "in/out": [], "return_value": null}
{"title": "Complex Tangent Function", "description": "This function calculates the complex tangent of a given complex number. It takes in a complex input and computes its tangent using trigonometric and hyperbolic functions.", "type": "FUNCTION", "name": "CTAN", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the tangent is to be calculated."}], "output": [{"name": "CTAN", "type": "complex", "description": "The complex tangent of the input number X."}], "in/out": [], "return_value": {"type": "complex", "description": "The return value is the complex tangent of the input complex number X.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex tangent result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex tangent result."}]}}
{"title": "Calculate Square Root of a Complex Number", "description": "This function computes the square root of a given complex number. It takes a complex number as input and returns its square root as a complex number, handling both real and imaginary components appropriately.", "type": "FUNCTION", "name": "CSQRT", "input": [{"name": "X", "type": "complex", "description": "The complex number for which the square root needs to be calculated."}], "output": [{"name": "CSQRT", "type": "complex", "description": "The computed square root of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The square root of the input complex number returned by the function.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the square root of the complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the square root of the complex number."}]}}
{"title": "Convert Time of Day to Seconds", "description": "This function takes a Time of Day (TOD) value as input and converts it to the equivalent number of seconds. The conversion involves transforming the TOD to a DWORD, performing arithmetic operations to discard the minute portion, and then converting the result back to seconds.", "type": "FUNCTION", "name": "SECOND", "input": [{"name": "itod", "type": "TOD", "description": "The input time of day value that needs to be converted to seconds."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The output value represents the time in seconds converted from the input TOD."}}
{"title": "Event Status Report (ESR) Monitoring", "description": "This function block processes input parameters to generate event status reports based on changes in the input values. It tracks inputs and stores relevant data in an output array, setting a flag when changes occur.", "type": "FUNCTION_BLOCK", "name": "ESR_MON_R4", "input": [{"name": "R0", "type": "REAL", "description": "First real input value."}, {"name": "R1", "type": "REAL", "description": "Second real input value."}, {"name": "R2", "type": "REAL", "description": "Third real input value."}, {"name": "R3", "type": "REAL", "description": "Fourth real input value."}, {"name": "DT_in", "type": "DT", "description": "Input data type for the event report."}, {"name": "a0", "type": "STRING(10)", "description": "Address associated with R0."}, {"name": "a1", "type": "STRING(10)", "description": "Address associated with R1."}, {"name": "a2", "type": "STRING(10)", "description": "Address associated with R2."}, {"name": "a3", "type": "STRING(10)", "description": "Address associated with R3."}, {"name": "s0", "type": "REAL", "description": "State value 0."}, {"name": "s1", "type": "REAL", "description": "State value 1."}, {"name": "s2", "type": "REAL", "description": "State value 2."}, {"name": "s3", "type": "REAL", "description": "State value 3."}], "output": [{"name": "ESR_Flag", "type": "BOOL", "description": "Indicates whether any input has changed and a new event status report has been generated."}], "in/out": [{"name": "ESR_Out", "type": "ARRAY[0..3] OF esr_data", "description": "Array that contains the event status report data."}], "return_value": null}
{"title": "Convert Kilometers per Hour to Meters per Second", "description": "This function converts a speed value from kilometers per hour (km/h) to meters per second (m/s). It takes a real number input representing speed in km/h and returns the equivalent speed in m/s.", "type": "FUNCTION", "name": "KMH_TO_MS", "input": [{"name": "kmh", "type": "REAL", "description": "The speed value in kilometers per hour to be converted."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The equivalent speed value in meters per second after conversion."}}
{"title": "Driver Function Block", "description": "This function block implements a driver with toggling and timeout functionalities. It manages an output signal based on various input conditions, including a toggle mode, set/reset conditions, and a timeout period.", "type": "FUNCTION_BLOCK", "name": "DRIVER_1", "input": [{"name": "Toggle_Mode", "type": "BOOL", "description": "A boolean input that determines whether the output Q should toggle its state."}, {"name": "Timeout", "type": "TIME", "description": "The duration after which the output will reset, if applicable."}, {"name": "SET", "type": "BOOL", "description": "A boolean input to set the output Q to TRUE."}, {"name": "IN", "type": "BOOL", "description": "A boolean input to indicate the control state; it may trigger toggling of the output Q."}, {"name": "RST", "type": "BOOL", "description": "A boolean input to reset the output Q to FALSE."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output signal that indicates the state of the driver."}], "in/out": [], "return_value": null}
{"title": "Convert DWORD to Hexadecimal String", "description": "This function converts a DWORD (32-bit unsigned integer) into its equivalent hexadecimal string representation. The output string is of fixed length (8 characters) and represents the hexadecimal value of the input DWORD in reverse order.", "type": "FUNCTION", "name": "DWORD_TO_STRH", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value that needs to be converted to a hexadecimal string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "A string representation of the hexadecimal value of the input DWORD, consisting of 8 hex characters.", "fields": []}}
{"title": "Refraction Calculation", "description": "This function calculates the refraction value given an elevation input. The elevation value is constrained within specific limits and is used in a mathematical formula to derive the refraction result.", "type": "FUNCTION", "name": "REFRACTION", "input": [{"name": "ELEV", "type": "REAL", "description": "The elevation in degrees which will be used in the refraction calculation."}], "output": [{"name": "REFRACTION", "type": "REAL", "description": "The calculated refraction value based on the input elevation."}], "in/out": [], "return_value": {"type": "REAL", "description": "The output value representing the refraction calculated from the given elevation."}}
{"title": "Astronomical Units Conversion", "description": "This function block performs conversions between different astronomical distance units including meters, astronomical units (AE), parsecs (PC), and light years (LJ). It takes input parameters related to these distances and calculates their corresponding values in meters as output.", "type": "FUNCTION_BLOCK", "name": "ASTRO", "input": [{"name": "m", "type": "REAL", "description": "Distance in meters (SI base unit)."}, {"name": "AE", "type": "REAL", "description": "Distance in astronomical units, where 1 AE = 149,597,870 meters."}, {"name": "PC", "type": "REAL", "description": "Distance in parsecs, where 1 parsec = 206265 AE."}, {"name": "LJ", "type": "REAL", "description": "Distance in light years, where 1 light year = 63240 AE."}], "output": [{"name": "Ym", "type": "REAL", "description": "Converted distance in meters based on input parameters."}, {"name": "YAE", "type": "REAL", "description": "Converted distance in astronomical units."}, {"name": "YPC", "type": "REAL", "description": "Converted distance in parsecs."}, {"name": "YLJ", "type": "REAL", "description": "Converted distance in light years."}], "in/out": [], "return_value": null}
{"title": "Degree Conversion Function", "description": "This function converts an angle in radians to degrees while ensuring that the output value is constrained between 0 and 360 degrees using the MODR function. The input is defined in radians, and the function returns the corresponding angle in degrees.", "type": "FUNCTION", "name": "DEG", "input": [{"name": "rad", "type": "REAL", "description": "The angle in radians to be converted to degrees."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in degrees, constrained to be between 0 and 360 degrees.", "fields": []}}
{"title": "Leap Year Calculation", "description": "This function determines whether a given date falls in a leap year. A leap year is defined as the year that is divisible by 4, but not every year divisible by 100 is a leap year unless it is also divisible by 400. The function accepts a date as input and returns a boolean value indicating if that date is in a leap year.", "type": "FUNCTION", "name": "LEAP_OF_DATE", "input": [{"name": "idate", "type": "DATE", "description": "The date to check for leap year status."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "True if the year of the given date is a leap year, otherwise false."}}
{"title": "Bit Toggle Function", "description": "This function toggles a specified bit in a given DWORD input. It shifts the value '1' left by the specified position and performs an XOR operation with the input DWORD to toggle the bit at that position.", "type": "FUNCTION", "name": "BIT_TOGGLE_DW", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value where the bit will be toggled."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be toggled, starting from 0 for the least significant bit."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value after the specified bit has been toggled.", "fields": []}}
{"title": "Interlock Control Logic", "description": "This FUNCTION_BLOCK implements interlock control logic that processes input signals and produces an output based on a selected operation mode. It includes functionality for managing state transitions and ensuring reliable signal processing under various circumstances.", "type": "FUNCTION_BLOCK", "name": "INTERLOCK_4", "input": [{"name": "I0", "type": "BOOL", "description": "Input signal 0, a boolean value indicating one of the interlock conditions."}, {"name": "I1", "type": "BOOL", "description": "Input signal 1, a boolean value indicating one of the interlock conditions."}, {"name": "I2", "type": "BOOL", "description": "Input signal 2, a boolean value indicating one of the interlock conditions."}, {"name": "I3", "type": "BOOL", "description": "Input signal 3, a boolean value indicating one of the interlock conditions."}, {"name": "E", "type": "BOOL", "description": "Enable signal, a boolean value that activates the interlock processing when true."}, {"name": "MODE", "type": "INT", "description": "Mode selector, an integer value that determines the operation behavior of the interlock logic."}], "output": [{"name": "OUT", "type": "BYTE", "description": "Output byte that represents the processed input signals based on the selected mode."}, {"name": "TP", "type": "BOOL", "description": "Transition signal, a boolean value that indicates if there is a change in the output state compared to the previous cycle."}], "in/out": [], "return_value": null}
{"title": "Random Number Generation Function", "description": "This function generates a pseudo-random number based on the input value 'last', ensuring it remains within the range of 0.0 and 1.0. The algorithm makes use of the current PLC time and bit manipulation to enhance randomness.", "type": "FUNCTION", "name": "RDM", "input": [{"name": "last", "type": "REAL", "description": "The upper limit for the generated random number, constrained between 0.0 and 1.0."}], "output": [{"name": "RDM", "type": "REAL", "description": "The generated pseudo-random number, calculated based on the input 'last' and the current PLC time."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the random number generation function, which is a pseudo-random value based on internal calculations and input parameters."}}
{"title": "Byte Swapping Function", "description": "This function takes a WORD (16-bit unsigned integer) as input and returns the same WORD with its bytes swapped. The byte swapping is accomplished by rotating the input value left by 8 bits.", "type": "FUNCTION", "name": "SWAP_BYTE", "input": [{"name": "IN", "type": "WORD", "description": "The input WORD that will undergo byte swapping."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The result of the byte-swapped input WORD.", "fields": []}}
{"title": "Bit Generator Function Block", "description": "This function block generates a sequence of bits from multiple input DWORDs based on the provided clock and other control signals. It manages the timing of output generation based on specified step counts and repeat parameters, allowing for both single and continuous runs.", "type": "FUNCTION_BLOCK", "name": "GEN_BIT", "input": [{"name": "in0", "type": "DWORD", "description": "First input DWORD value for bit shifting."}, {"name": "in1", "type": "DWORD", "description": "Second input DWORD value for bit shifting."}, {"name": "in2", "type": "DWORD", "description": "Third input DWORD value for bit shifting."}, {"name": "in3", "type": "DWORD", "description": "Fourth input DWORD value for bit shifting."}, {"name": "clk", "type": "BOOL", "description": "Clock signal to trigger the operation."}, {"name": "steps", "type": "INT", "description": "Number of steps to process before resetting."}, {"name": "rep", "type": "INT", "description": "Number of times to repeat the operation; 0 for continuous operation."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to initialize the block."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for the least significant bit of in0."}, {"name": "Q1", "type": "BOOL", "description": "Output for the least significant bit of in1."}, {"name": "Q2", "type": "BOOL", "description": "Output for the least significant bit of in2."}, {"name": "Q3", "type": "BOOL", "description": "Output for the least significant bit of in3."}, {"name": "cnt", "type": "INT", "description": "Current step count in the operation."}, {"name": "run", "type": "BOOL", "description": "Indicates if the block is currently running."}], "in/out": [], "return_value": null}
{"title": "TON Timer Function Block", "description": "This function block implements a timer functionality where an input signal 'IN' starts the timer for a specified duration 'PT'. When the timer reaches the specified duration, the output 'Q' is set to FALSE. The timer can be reset using the 'RST' input, which immediately clears the output 'Q'.", "type": "FUNCTION_BLOCK", "name": "TOF_1", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal to start the timer."}, {"name": "PT", "type": "TIME", "description": "Preset time duration for the timer."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to clear the output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating the state of the timer."}], "in/out": [], "return_value": null}
{"title": "Trend Function Block", "description": "The TREND function block is designed to monitor the trend of an input variable 'X'. It computes whether the input has increased or decreased in comparison to its last value, outputs a boolean indicating any change, and provides the difference between the current and last values of 'X'.", "type": "FUNCTION_BLOCK", "name": "TREND", "input": [{"name": "X", "type": "REAL", "description": "Input variable representing the current value being monitored."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output indicating whether the input variable 'X' has changed (increased or decreased)."}, {"name": "TU", "type": "BOOL", "description": "Output indicating if 'X' is greater than the last recorded value."}, {"name": "TD", "type": "BOOL", "description": "Output indicating if 'X' is less than the last recorded value."}, {"name": "D", "type": "REAL", "description": "Output representing the difference between the current value 'X' and the last value."}], "in/out": [], "return_value": null}
{"title": "Scale Input Values by a Factor", "description": "This function computes the scaled sum of four Boolean inputs based on specified minimum and maximum values for each input. The final result is determined by multiplying the sum by a scaling factor 'K' and adding an offset 'O'.", "type": "FUNCTION", "name": "SCALE_X4", "input": [{"name": "IN1", "type": "BOOL", "description": "First Boolean input to select between IN1_MIN and IN1_MAX."}, {"name": "IN2", "type": "BOOL", "description": "Second Boolean input to select between IN2_MIN and IN2_MAX."}, {"name": "IN3", "type": "BOOL", "description": "Third Boolean input to select between IN3_MIN and IN3_MAX."}, {"name": "IN4", "type": "BOOL", "description": "Fourth Boolean input to select between IN4_MIN and IN4_MAX."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the sum of inputs."}, {"name": "O", "type": "REAL", "description": "Offset added to the scaled sum."}, {"name": "IN1_MIN", "type": "REAL", "description": "Minimum value for IN1 when the corresponding input is true."}, {"name": "IN1_MAX", "type": "REAL", "description": "Maximum value for IN1 when the corresponding input is false."}, {"name": "IN2_MIN", "type": "REAL", "description": "Minimum value for IN2 when the corresponding input is true."}, {"name": "IN2_MAX", "type": "REAL", "description": "Maximum value for IN2 when the corresponding input is false."}, {"name": "IN3_MIN", "type": "REAL", "description": "Minimum value for IN3 when the corresponding input is true."}, {"name": "IN3_MAX", "type": "REAL", "description": "Maximum value for IN3 when the corresponding input is false."}, {"name": "IN4_MIN", "type": "REAL", "description": "Minimum value for IN4 when the corresponding input is true."}, {"name": "IN4_MAX", "type": "REAL", "description": "Maximum value for IN4 when the corresponding input is false."}], "output": [{"name": "SCALE_X4", "type": "REAL", "description": "The result of the scaled sum of the selected input values."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final computed value after scaling the sum and adding the offset."}}
{"title": "Extract Second from Date and Time", "description": "This function takes a date and time input parameter and extracts the second component from it. The output is an integer representing the second value (0-59).", "type": "FUNCTION", "name": "SECOND_OF_DT", "input": [{"name": "XDT", "type": "DT", "description": "The date and time value from which the second component will be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "An integer representing the second component extracted from the input date and time.", "fields": []}}
{"title": "Bit Toggle Function", "description": "This function toggles a specific bit of a given BYTE input based on the position provided. It takes a BYTE input value and an integer representing the bit position that needs to be toggled. The function utilizes a bitwise shift and XOR operation to achieve the toggling.", "type": "FUNCTION", "name": "BIT_TOGGLE_B", "input": [{"name": "IN", "type": "BYTE", "description": "The input BYTE value whose bit is to be toggled."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be toggled, where 0 represents the least significant bit."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting BYTE value after toggling the specified bit.", "fields": []}}
{"title": "Scale Function for B2 Inputs", "description": "This function computes a scaled value based on two BYTE inputs, along with scaling factors and offsets. The scaling is achieved through a linear combination of the inputs, adjusting for specified minimum and maximum values.", "type": "FUNCTION", "name": "SCALE_B2", "input": [{"name": "in1", "type": "BYTE", "description": "First input value to be scaled."}, {"name": "in2", "type": "BYTE", "description": "Second input value to be scaled."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the combined inputs."}, {"name": "O", "type": "REAL", "description": "Offset added to the result after scaling."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input used in scaling."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input used in scaling. Defaults to 1000.0."}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input used in scaling."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input used in scaling. Defaults to 1000.0."}], "output": [{"name": "SCALE_B2", "type": "REAL", "description": "The scaled output value calculated from the input parameters."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the scaling operation applied to the inputs.", "fields": []}}
{"title": "Bitwise Shift Left Function", "description": "This function performs a bitwise left shift on a given input value based on a specified shift amount. The function calculates the result by combining a shifted constant value and the left-shifted input value.", "type": "FUNCTION", "name": "SHL1", "input": [{"name": "IN", "type": "DWORD", "description": "The input value that will be shifted."}, {"name": "N", "type": "INT", "description": "The number of positions to shift the input value to the left."}], "output": [{"name": "SHL1", "type": "DWORD", "description": "The result of the left shift operation applied to the input value."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The final computed value after applying bitwise operations.", "fields": []}}
{"title": "FT_TN16 Function Block", "description": "The FT_TN16 Function Block receives a real input value and a time duration, processing these to maintain a circular array of input values and produce an output value. The block triggers an output signal when the conditions are met based on the time elapsed.", "type": "FUNCTION_BLOCK", "name": "FT_TN16", "input": [{"name": "in", "type": "REAL", "description": "The real input value to be processed."}, {"name": "T", "type": "TIME", "description": "The time duration that influences the input processing frequency."}], "output": [{"name": "out", "type": "REAL", "description": "The output value from the circular array of input values."}, {"name": "trig", "type": "BOOL", "description": "A boolean flag that indicates whether a new value has been output."}], "in/out": [], "return_value": null}
{"title": "Calculate Angle Between Two Vectors", "description": "This function calculates the angle (in radians) between two three-dimensional vectors A and B using the cosine formula. The function computes the absolute values of both vectors and uses them to find the angle only if their product is greater than zero. The result is returned as a real number.", "type": "FUNCTION", "name": "V3_ANG", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector for angle calculation."}, {"name": "B", "type": "Vector_3", "description": "The second input vector for angle calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians between vectors A and B.", "fields": []}}
{"title": "Calculate Minimum Value in an Array", "description": "This function computes the minimum value in an array of real numbers. The function takes a pointer to an array and its size as input parameters, iterates through the array elements, and identifies the smallest value present.", "type": "FUNCTION", "name": "ARRAY_MIN", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to the array of real numbers from which the minimum value will be computed."}, {"name": "size", "type": "UINT", "description": "The size of the array indicating the number of elements to be considered for the minimum calculation."}], "output": [{"name": "array_min", "type": "REAL", "description": "The minimum value found in the specified array of real numbers."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the minimum value found within the input array."}}
{"title": "Sign Function", "description": "This function determines the sign of a given real number. It returns TRUE if the input number is less than zero, indicating it is negative; otherwise, it returns FALSE.", "type": "FUNCTION", "name": "SIGN_R", "input": [{"name": "in", "type": "REAL", "description": "The real number input for which the sign is to be determined."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The return value indicating the sign of the input number. TRUE if negative, FALSE otherwise."}}
{"title": "Complex Polar Calculator", "description": "This function computes the rectangular (Cartesian) coordinates of a complex number given its polar coordinates. The function takes two inputs: the magnitude (L) and the angle (A) in radians, and returns a complex number with its real and imaginary parts calculated using cosine and sine functions.", "type": "FUNCTION", "name": "CPOL", "input": [{"name": "L", "type": "REAL", "description": "The magnitude of the complex number in polar coordinates."}, {"name": "A", "type": "REAL", "description": "The angle (in radians) of the complex number in polar coordinates."}], "output": [{"name": "CPOL", "type": "complex", "description": "A complex number represented with a real part and an imaginary part."}], "in/out": [], "return_value": {"type": "complex", "description": "The result of the conversion from polar to rectangular form for the complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex number."}]}}
{"title": "String Lowercase Check", "description": "This function checks whether all characters in the provided string are lowercase. It initiates a loop through each character of the string and verifies if each character is a lowercase letter. If any character is not lowercase, the function returns false; otherwise, it checks if the string length is greater than zero to return true.", "type": "FUNCTION", "name": "IS_LOWER", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be checked for lowercase characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if all characters in the string are lowercase; otherwise, false.", "fields": []}}
{"title": "Temperature Calculation from NTC Resistance", "description": "This function calculates the temperature based on the resistance of an NTC thermistor. It receives the resistance value, nominal resistance, and a material-specific constant B as input parameters. The function computes the temperature in Celsius using the given formula when the resistance is greater than zero.", "type": "FUNCTION", "name": "TEMP_NTC", "input": [{"name": "RES", "type": "REAL", "description": "The resistance value of the NTC thermistor."}, {"name": "RN", "type": "REAL", "description": "The nominal resistance of the thermistor at a reference temperature."}, {"name": "B", "type": "REAL", "description": "The material constant used in the calculation for the NTC thermistor."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated temperature in degrees Celsius based on the thermistor resistance.", "fields": []}}
{"title": "Increment Function", "description": "This function computes the increment of a given integer value `X` based on a specified increment `D` and a modulus `M`. The function adds the values together and applies a modulo operation to ensure the result wraps around based on `M`.", "type": "FUNCTION", "name": "INC", "input": [{"name": "X", "type": "INT", "description": "The initial integer value to be incremented."}, {"name": "D", "type": "INT", "description": "The increment value that will be added to X."}, {"name": "M", "type": "INT", "description": "The modulus value used for wrapping the result."}], "output": [{"name": "INC", "type": "INT", "description": "The resulting value after incrementing X by D and applying modulo M."}], "in/out": [], "return_value": {"type": "INT", "description": "The final computed increment value.", "fields": []}}
{"title": "Bit Load Function", "description": "This function performs bit loading operations on a 16-bit word based on the specified parameters. It can either shift and rotate the input based on the control signal 'D' to either left or right, and applies the appropriate bit manipulation according to the values of 'N' and 'P'.", "type": "FUNCTION", "name": "BIT_LOAD_W2", "input": [{"name": "I", "type": "WORD", "description": "The input word to be manipulated."}, {"name": "D", "type": "BOOL", "description": "Control signal that determines the bit loading operation; TRUE for right operations, FALSE for left operations."}, {"name": "P", "type": "INT", "description": "The number of positions to shift or rotate the word."}, {"name": "N", "type": "INT", "description": "Specifies the number of positions for loading bits."}], "output": [{"name": "BIT_LOAD_W2", "type": "WORD", "description": "The result of the bit manipulation operation on the input word."}], "in/out": [], "return_value": {"type": "WORD", "description": "The manipulated word after applying the specified bit operations."}}
{"title": "BIT_LOAD_DW Function", "description": "This function takes an input DWORD and manipulates it based on the specified parameters to either set or clear a bit at a given position, depending on the value of the VAL parameter. If VAL is TRUE, the bit at position POS is set to 1. If VAL is FALSE, the bit at position POS is cleared, setting it to 0.", "type": "FUNCTION", "name": "BIT_LOAD_DW", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value to be manipulated."}, {"name": "VAL", "type": "BOOL", "description": "A boolean flag that determines whether to set (TRUE) or clear (FALSE) a bit in the input DWORD."}, {"name": "POS", "type": "INT", "description": "The position of the bit in the DWORD to be manipulated, where 0 is the least significant bit."}], "output": [{"name": "BIT_LOAD_DW", "type": "DWORD", "description": "The resulting DWORD after the bit manipulation operation has been applied."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the modified DWORD after adjusting the specified bit according to the VAL parameter.", "fields": []}}
{"title": "Hexadecimal String Validation", "description": "This function determines whether the provided string consists solely of hexadecimal characters. It checks each character in the input string, returning TRUE if all characters are valid hexadecimal digits, and FALSE otherwise. The function also considers an empty string as invalid.", "type": "FUNCTION", "name": "IS_HEX", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be validated as a hexadecimal string."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the input string is a valid hexadecimal string. Returns TRUE if all characters are hexadecimal, otherwise FALSE."}}
{"title": "Date Period Check", "description": "The function checks if a given date falls within any of the defined date periods in the array. It returns true if the date is within at least one of the periods and false otherwise.", "type": "FUNCTION", "name": "PERIOD2", "input": [{"name": "DP", "type": "ARRAY[0..3, 0..1] OF DATE", "description": "An array containing pairs of dates that define specific periods."}, {"name": "DX", "type": "DATE", "description": "A single date to check against the periods defined in the DP array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating whether the date DX is within any of the defined date periods in DP.", "fields": []}}
{"title": "Manual Control Logic Function", "description": "This function determines the state of the manual control based on the input signals. It sets the MANUAL output to TRUE if the OFF signal is not active and either the IN or ON signal is active.", "type": "FUNCTION", "name": "ManualControlLogic", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal indicating the current state. This signal is involved in the logical operation."}, {"name": "ON", "type": "BOOL", "description": "Input signal that, when TRUE, contributes to activating the manual control."}, {"name": "OFF", "type": "BOOL", "description": "Input signal that, when TRUE, deactivates the manual control."}], "output": [{"name": "MANUAL", "type": "BOOL", "description": "Output of the function indicating the state of the manual control, TRUE if the manual control is active."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns the state of the MANUAL control determined by the logical conditions of the input parameters."}}
{"title": "FT_TN8 Function Block", "description": "The FT_TN8 function block processes a real input over a given time interval and outputs a value based on the input, triggering a boolean output when certain conditions are met.", "type": "FUNCTION_BLOCK", "name": "FT_TN8", "input": [{"name": "in", "type": "REAL", "description": "The real input value that will be processed by the function block."}, {"name": "T", "type": "TIME", "description": "The time interval that determines how frequently the input is sampled."}], "output": [{"name": "out", "type": "REAL", "description": "The real output value which corresponds to the last sampled input."}, {"name": "trig", "type": "BOOL", "description": "A boolean output that indicates if the input was processed and the output was updated."}], "in/out": [], "return_value": null}
{"title": "Hyperbolic Tangent Function (TANH)", "description": "This function computes the hyperbolic tangent of a given input X. The function returns 1.0 for values of X greater than 20.0, -1.0 for values of X less than -20.0, and uses the formula 1.0 - 2.0 / (EXP(2.0 * X) + 1.0) for values of X in the range [-20.0, 20.0].", "type": "FUNCTION", "name": "TANH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the hyperbolic tangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The hyperbolic tangent of the input value X."}}
{"title": "Bit Load Word Function", "description": "This function modifies a WORD input based on a specified position and a boolean value. If the boolean value is true, it sets a bit at the given position in the input WORD. If false, it clears that bit instead.", "type": "FUNCTION", "name": "BIT_LOAD_W", "input": [{"name": "IN", "type": "WORD", "description": "The input WORD to be modified."}, {"name": "VAL", "type": "BOOL", "description": "Boolean value indicating whether to set or clear the bit."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be set or cleared."}], "output": [{"name": "BIT_LOAD_W", "type": "WORD", "description": "The modified WORD after the bit operation."}], "in/out": [], "return_value": {"type": "WORD", "description": "The resulting WORD after the function's bit manipulation."}}
{"title": "Calculate the Magnitude of a 3D Vector", "description": "This function computes the magnitude (absolute value) of a 3D vector represented as an array of three REAL numbers. The magnitude is calculated using the Euclidean formula, taking the square root of the sum of the squares of the vector components.", "type": "FUNCTION", "name": "V3_ABS", "input": [{"name": "A", "type": "ARRAY[1..3] OF REAL", "description": "An array representing a 3D vector, containing three REAL values corresponding to the x, y, and z components of the vector."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed magnitude of the 3D vector A.", "fields": []}}
{"title": "Linear Interpolation Function", "description": "This function calculates the linear interpolation value based on two given points (X1, Y1) and (X2, Y2) for a specified value X.", "type": "FUNCTION", "name": "F_LIN2", "input": [{"name": "X", "type": "REAL", "description": "The independent variable for which the interpolation is calculated."}, {"name": "X1", "type": "REAL", "description": "The X coordinate of the first point."}, {"name": "Y1", "type": "REAL", "description": "The Y coordinate of the first point."}, {"name": "X2", "type": "REAL", "description": "The X coordinate of the second point."}, {"name": "Y2", "type": "REAL", "description": "The Y coordinate of the second point."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The interpolated Y value corresponding to the input X value.", "fields": []}}
{"title": "Flow Control Function Block", "description": "This function block is designed to manage flow control based on the provided input signals. It handles multiple logical states, manages a timer for delays, and sets output signals accordingly.", "type": "FUNCTION_BLOCK", "name": "FLOW_CONTROL", "input": [{"name": "IN", "type": "BOOL", "description": "Input boolean signal that influences the flow control."}, {"name": "REQ", "type": "BOOL", "description": "Request boolean signal that triggers the timing and operations."}, {"name": "ENQ", "type": "BOOL", "description": "Enquiry boolean signal that enables or disables certain operations."}, {"name": "RST", "type": "BOOL", "description": "Reset signal that clears the state of the function block."}, {"name": "T_AUTO", "type": "TIME", "description": "The automatic timing duration for the timer, defaulting to 60 minutes."}, {"name": "T_DELAY", "type": "TIME", "description": "The delay duration applied after the automatic timing, defaulting to 1380 minutes."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output boolean signal that indicates the state of the flow control."}, {"name": "STATUS", "type": "BYTE", "description": "Status code reflecting the current state of the function block."}], "in/out": [], "return_value": null}
{"title": "Combine Two Bytes into a Word", "description": "This function takes two input parameters, B1 and B0, both of type BYTE, and combines them into a single WORD by shifting the first byte (B1) left by 8 bits and OR-ing it with the second byte (B0). The function is designed to ensure compatibility and improved performance in the conversion process.", "type": "FUNCTION", "name": "WORD_OF_BYTE", "input": [{"name": "B1", "type": "BYTE", "description": "The first byte to be combined, which will be shifted left by 8 bits."}, {"name": "B0", "type": "BYTE", "description": "The second byte to be combined, which will remain in its original position."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The resulting WORD obtained by combining B1 and B0."}}
{"title": "Window Function", "description": "This function evaluates if a given input value is within a specified range defined by low and high values. The function returns true if the input is greater than the low boundary and less than the high boundary.", "type": "FUNCTION", "name": "WINDOW", "input": [{"name": "low", "type": "REAL", "description": "The lower boundary of the input range."}, {"name": "in", "type": "REAL", "description": "The input value to be evaluated."}, {"name": "high", "type": "REAL", "description": "The upper boundary of the input range."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the input value is within the specified range, false otherwise."}}
{"title": "Hyperbolic Arcsine Calculation", "description": "This function calculates the hyperbolic arcsine of a given real number using the formula LN(SQRT(X * X + 1.0) + X). The input parameter X is of type REAL, and the function returns a value of type REAL representing the hyperbolic arcsine of X. The function has undergone several revisions to enhance performance and ensure accuracy with real constants.", "type": "FUNCTION", "name": "ASINH", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the hyperbolic arcsine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed hyperbolic arcsine of the input value X."}}
{"title": "Cosh Function", "description": "This function computes the hyperbolic cosine of a given real number input. It utilizes the mathematical relationship between the hyperbolic cosine and the exponential function to perform the calculation efficiently.", "type": "FUNCTION", "name": "COSH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the hyperbolic cosine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The hyperbolic cosine of the input value X, computed as (1.0 / T + T) * 0.5 where T is equal to EXP(X)."}}
{"title": "Mid Value Calculation", "description": "This function calculates the mid value among three given input real numbers. It compares the three inputs and determines the second largest value. If the first input is greater than the second, it swaps their values. It also checks if the second input is greater than the third and updates it accordingly.", "type": "FUNCTION", "name": "MID3", "input": [{"name": "IN1", "type": "REAL", "description": "The first input real number."}, {"name": "IN2", "type": "REAL", "description": "The second input real number."}, {"name": "IN3", "type": "REAL", "description": "The third input real number."}], "output": [{"name": "MID3", "type": "REAL", "description": "The calculated mid value, which is the second largest of the three input numbers."}], "in/out": [], "return_value": {"type": "REAL", "description": "The return value represents the mid value of the three inputs."}}
{"title": "Absolute Value Function for REAL2", "description": "This function computes the absolute value of a given REAL2 input. The function checks the value of the RX component of the input REAL2 structure and returns its absolute value along with the absolute value of the R1 component. If the RX value is non-negative, it returns the input values as is. If it is negative, it negates both components.", "type": "FUNCTION", "name": "R2_ABS", "input": [{"name": "X", "type": "REAL2", "description": "Input parameter of type REAL2 containing the values to compute the absolute value from."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "The output result of type REAL2 that holds the absolute values of the input's components.", "fields": [{"name": "RX", "type": "REAL", "description": "The absolute value of the RX component of the input REAL2."}, {"name": "R1", "type": "REAL", "description": "The absolute value of the R1 component of the input REAL2."}]}}
{"title": "Leap Year Determination Function", "description": "This function determines whether a given year is a leap year or not. A leap year is defined as any year that is divisible by 4, except for end-of-century years, which must be divisible by 400. The function leverages bit manipulation for performance improvements in version 1.2.", "type": "FUNCTION", "name": "LEAP_YEAR", "input": [{"name": "yr", "type": "INT", "description": "The year for which the leap year status is to be determined."}], "output": [{"name": "LEAP_YEAR", "type": "BOOL", "description": "Returns TRUE if the year is a leap year, FALSE otherwise."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the year is a leap year."}}
{"title": "Convert Real to DWORD", "description": "This function takes a real number as input and converts it to a DWORD format. It utilizes a pointer to access the memory address of the input real value and subsequently retrieves the DWORD representation from that address.", "type": "FUNCTION", "name": "REAL_TO_DW", "input": [{"name": "X", "type": "REAL", "description": "Input variable of type REAL that needs to be converted to DWORD."}], "output": [{"name": "REAL_TO_DW", "type": "DWORD", "description": "The DWORD representation of the input REAL value."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The result of the conversion from REAL to DWORD."}}
{"title": "B_TRIG Function Block", "description": "The B_TRIG function block generates a triggered output based on the rising edge of the input clock signal. Whenever a transition occurs on the input clock, the output variable is toggled.", "type": "FUNCTION_BLOCK", "name": "B_TRIG", "input": [{"name": "CLK", "type": "BOOL", "description": "Input variable that represents the clock signal."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output variable that reflects the state triggered by the input clock signal."}], "in/out": [], "return_value": null}
{"title": "Gauss cumulative distribution function", "description": "This function calculates the cumulative distribution function (CDF) of the Gaussian distribution based on the input parameters. It uses the error function to compute the value and returns a real number representing the CDF for the provided inputs.", "type": "FUNCTION", "name": "GAUSSCD", "input": [{"name": "X", "type": "REAL", "description": "The value at which to evaluate the cumulative distribution function."}, {"name": "U", "type": "REAL", "description": "The mean value of the Gaussian distribution."}, {"name": "SI", "type": "REAL", "description": "The standard deviation of the Gaussian distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The cumulative probability for the Gaussian distribution at the given value X.", "fields": []}}
{"title": "Find Non-Numeric Character", "description": "This function searches for the first non-numeric character in a given string, starting from a specified position. It returns the index of the first non-numeric character found or 0 if all characters from the specified position are numeric.", "type": "FUNCTION", "name": "FIND_NONUM", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string to be searched for non-numeric characters."}, {"name": "pos", "type": "INT", "description": "The position in the string from which to start the search."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The index of the first non-numeric character found in the string, or 0 if there are no non-numeric characters.", "fields": []}}
{"title": "Float to Real Conversion Function", "description": "This function converts a string representation of a floating-point number into its real number equivalent. It handles the detection of sign, digits, and optional exponent in the input string.", "type": "FUNCTION", "name": "FLOAT_TO_REAL", "input": [{"name": "FLT", "type": "STRING[20]", "description": "The string input representing a floating-point number to be converted."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted real number value from the input string.", "fields": []}}
{"title": "Conversion from SDT to TOD", "description": "This function converts a time represented in the SDT (Structured Date Time) format to the TOD (Time of Day) format. It takes the HOUR, MINUTE, SECOND, and MS (milliseconds) from the SDT structure, performs necessary conversions and calculations, and returns the total time in milliseconds as a DWORD value.", "type": "FUNCTION", "name": "SDT_TO_TOD", "input": [{"name": "DTI", "type": "SDT", "description": "The input parameter of type SDT that contains the hours, minutes, seconds, and milliseconds to be converted."}], "output": [], "in/out": [], "return_value": {"type": "TOD", "description": "The converted time of day in milliseconds as a DWORD.", "fields": []}}
{"title": "First-Order Proportional-Derivative Controller", "description": "This function block implements a first-order proportional-derivative (PD) controller. It takes an input signal and applies proportional gain and differentiator characteristics to produce an output signal. The user can configure the proportional gain (KP) and the time constant for the derivative (TV). The output of the controller (Y) is calculated based on the difference of the input signal and the proportional gain.", "type": "FUNCTION_BLOCK", "name": "FT_PD", "input": [{"name": "IN", "type": "REAL", "description": "The input signal to be controlled."}, {"name": "KP", "type": "REAL", "description": "The proportional gain constant, default value is 1.0."}, {"name": "TV", "type": "REAL", "description": "The time constant for the derivative action, default value is 1.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The output of the PD controller based on the input signal and its derivative."}], "in/out": [], "return_value": null}
{"title": "Hexadecimal to Byte Conversion", "description": "This function converts a hexadecimal string (up to 5 characters) into its corresponding byte value. The input hexadecimal string can consist of digits (0-9) and letters (A-F, a-f). The function reads each character of the input string, calculates its decimal value based on its position, and accumulates the result into a single byte output.", "type": "FUNCTION", "name": "HEX_TO_BYTE", "input": [{"name": "HEX", "type": "STRING(5)", "description": "A string representing the hexadecimal value to be converted to a byte."}], "output": [{"name": "HEX_TO_BYTE", "type": "BYTE", "description": "The resulting byte value obtained from the conversion of the hexadecimal string."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The output byte value derived from the hexadecimal input string."}}
{"title": "Fade Function Block", "description": "This function block implements a fade effect based on input parameters. It takes two input values and uses a ramp module to generate a fading output based on a boolean trigger, a time parameter, and reset signal.", "type": "FUNCTION_BLOCK", "name": "FADE", "input": [{"name": "IN1", "type": "REAL", "description": "The starting value for the fade effect."}, {"name": "IN2", "type": "REAL", "description": "The target value for the fade effect."}, {"name": "F", "type": "BOOL", "description": "A boolean flag that indicates whether the fade operation should be active."}, {"name": "TF", "type": "TIME", "description": "The duration of the fade effect."}, {"name": "rst", "type": "BOOL", "description": "A reset signal that initializes the ramp module and stops the fade effect."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value after applying the fade effect between IN1 and IN2."}], "in/out": [], "return_value": null}
{"title": "Decimal Rounding Function", "description": "This function rounds a given real number to a specified number of decimal places using pre-defined constants for decimal scaling. The function takes a real number and an integer specifying the number of decimal places, applies the rounding logic, and returns the rounded value. This implementation ensures robust handling of negative numbers and optimal performance.", "type": "FUNCTION", "name": "ROUND", "input": [{"name": "in", "type": "REAL", "description": "The real number to be rounded."}, {"name": "N", "type": "INT", "description": "The number of decimal places to round to, limited between 0 and 8."}], "output": [{"name": "ROUND", "type": "REAL", "description": "The rounded real number."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the rounding operation.", "fields": []}}
{"title": "Pulse Width Modulation Control", "description": "This function block implements pulse width modulation (PWM) based on frequency and pulse width time inputs. It generates a PWM signal output that can be used to control various devices.", "type": "FUNCTION_BLOCK", "name": "PWM_PW", "input": [{"name": "F", "type": "REAL", "description": "The frequency of the PWM signal in Hertz."}, {"name": "PW", "type": "TIME", "description": "The duration of the pulse width."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output Boolean signal representing the PWM signal."}], "in/out": [], "return_value": null}
{"title": "Calculate Days Delta", "description": "This function calculates the difference in days between two date values, returning a positive or negative integer depending on the order of the dates. If date_1 is later than date_2, the result will be negative, otherwise it will be positive.", "type": "FUNCTION", "name": "DAYS_DELTA", "input": [{"name": "date_1", "type": "DATE", "description": "The first date for comparison."}, {"name": "date_2", "type": "DATE", "description": "The second date for comparison."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The difference in days between date_1 and date_2.", "fields": []}}
{"title": "Calculate the Absolute Value of a Complex Number", "description": "This function calculates the absolute value (or modulus) of a complex number represented in rectangular form. The function takes a complex number as input and returns its absolute value as a real number.", "type": "FUNCTION", "name": "CABS", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number whose absolute value is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The absolute value of the complex number X.", "fields": []}}
{"title": "Calculate Angle in 3D Space", "description": "This function calculates the angle in 3D space based on a given 3D vector. It computes the angle using the X component of the vector and its magnitude. If the magnitude is greater than zero, it uses the arccosine function to determine the angle.", "type": "FUNCTION", "name": "V3_XANG", "input": [{"name": "A", "type": "Vector_3", "description": "A 3D vector from which the angle is to be calculated.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the vector."}, {"name": "Y", "type": "REAL", "description": "The Y component of the vector."}, {"name": "Z", "type": "REAL", "description": "The Z component of the vector."}]}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians calculated from the 3D vector.", "fields": []}}
{"title": "Cauchy Distribution Calculation", "description": "This function calculates the Cauchy distribution value based on the provided input parameters. The calculation uses the formula: 0.5 + (π/2) * arctan((X - T) / U), where X, T, and U are real numbers representing the specific values for the calculation.", "type": "FUNCTION", "name": "CAUCHYCD", "input": [{"name": "X", "type": "REAL", "description": "A real number representing the first parameter of the Cauchy distribution."}, {"name": "T", "type": "REAL", "description": "A real number representing the second parameter of the Cauchy distribution."}, {"name": "U", "type": "REAL", "description": "A real number representing the scale parameter of the Cauchy distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated value of the Cauchy distribution based on the inputs X, T, and U."}}
{"title": "Compute Inverse Hyperbolic Cosine of a Complex Number", "description": "This function calculates the inverse hyperbolic cosine (CACOSH) of a given complex number. The input is a complex number, and the output is also a complex number representing the result of the calculation.", "type": "FUNCTION", "name": "CACOSH", "input": [{"name": "X", "type": "COMPLEX", "description": "Input variable representing a complex number for which the inverse hyperbolic cosine will be calculated."}], "output": [{"name": "CACOSH", "type": "complex", "description": "The result of the inverse hyperbolic cosine of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "Returns the complex result of the inverse hyperbolic cosine function.", "fields": []}}
{"title": "Calculate Days in Month", "description": "This function calculates the number of days in a given month based on a specific date, considering if the year is a leap year or not.", "type": "FUNCTION", "name": "DAYS_IN_MONTH", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the number of days in the month needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The number of days in the month corresponding to the provided date.", "fields": []}}
{"title": "Control Output Function Block", "description": "This function block controls an output value based on various input parameters, applying an offset and considering manual input if specified. The output is conditioned within defined limits, and a flag indicates whether the output is within these limits.", "type": "FUNCTION_BLOCK", "name": "CTRL_OUT", "input": [{"name": "CI", "type": "REAL", "description": "Input signal value used for output calculation."}, {"name": "OFFSET", "type": "REAL", "description": "Value to be added to the output signal."}, {"name": "MAN_IN", "type": "REAL", "description": "Manual input value to be used if manual mode is activated."}, {"name": "LIM_L", "type": "REAL", "description": "Lower limit for the output signal."}, {"name": "LIM_H", "type": "REAL", "description": "Upper limit for the output signal."}, {"name": "MANUAL", "type": "BOOL", "description": "Flag to indicate whether to use manual input."}], "output": [{"name": "Y", "type": "REAL", "description": "The calculated output value after applying offset and limits."}, {"name": "LIM", "type": "BOOL", "description": "Flag indicating if the output is within the defined limits."}], "in/out": [], "return_value": null}
{"title": "Sequence Control Block", "description": "This function block manages a sequential process based on input signals. It initializes a state sequence controlled by a start signal, a reset signal, and an array of timing intervals. The block updates its internal state and triggers an output signal based on the defined program.", "type": "FUNCTION_BLOCK", "name": "SEQUENCE_64", "input": [{"name": "START", "type": "BOOL", "description": "A boolean signal to start the sequence."}, {"name": "SMAX", "type": "INT", "description": "The maximum state index for the sequence."}, {"name": "PROG", "type": "ARRAY[0..63] OF TIME", "description": "An array containing timing intervals for each state in the sequence."}, {"name": "RST", "type": "BOOL", "description": "A boolean signal to reset the sequence state."}], "output": [{"name": "STATE", "type": "INT", "description": "The current state of the sequence, initialized to -1."}, {"name": "TRIG", "type": "BOOL", "description": "A trigger signal that indicates when a state transition has occurred."}], "in/out": [], "return_value": {}}
{"title": "Ramp Function Block (RMP_B)", "description": "This function block implements a ramp functionality, allowing for an adjustable output based on set conditions, timing, and the direction of ramping. It generates an output value that ramps up or down based on input parameters and maintains the state of the busy flag to indicate processing status.", "type": "FUNCTION_BLOCK", "name": "RMP_B", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean indicating if the ramp should be set to its maximum value."}, {"name": "PT", "type": "TIME", "description": "The time duration over which the ramp should occur."}, {"name": "E", "type": "BOOL", "description": "Enable input that allows the ramp operation to process; defaults to TRUE."}, {"name": "UP", "type": "BOOL", "description": "A boolean that determines the direction of the ramp; if TRUE, the ramp will increase, if FALSE, it will decrease."}, {"name": "RST", "type": "BOOL", "description": "A boolean that, when set, resets the output value to zero."}], "output": [{"name": "OUT", "type": "BYTE", "description": "The current value of the ramp output."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates if the function block is currently busy processing the ramp operation."}, {"name": "HIGH", "type": "BOOL", "description": "Indicates if the output is currently at its maximum value (255)."}, {"name": "LOW", "type": "BOOL", "description": "Indicates if the output is currently at its minimum value (0)."}], "in/out": [], "return_value": null}
{"title": "FindB Function", "description": "This function is designed to find the last occurrence of the substring 'str2' within the string 'str1'. It returns the position of the found substring from the end of 'str1'. If 'str2' is not found, the function returns 0.", "type": "FUNCTION", "name": "FindB", "input": [{"name": "str1", "type": "STRING(STRING_LENGTH)", "description": "The main string in which the search for the substring will be conducted."}, {"name": "str2", "type": "STRING(STRING_LENGTH)", "description": "The substring that is being searched for in 'str1'."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the last occurrence of 'str2' in 'str1'. Returns 0 if 'str2' is not found.", "fields": []}}
{"title": "Determine Daylight Saving Time", "description": "This function calculates whether the given UTC date and time falls within the period of Daylight Saving Time (DST) in Europe. It specifically checks if the provided date corresponds to the period when clocks are set forward in March and when they are set back in October. The function utilizes specific equations based on the year to determine the transition dates for DST.", "type": "FUNCTION", "name": "DST", "input": [{"name": "UTC", "type": "DT", "description": "The date and time in UTC format that needs to be evaluated for Daylight Saving Time."}], "output": [{"name": "DST", "type": "BOOL", "description": "Returns TRUE if the given UTC date and time is within the Daylight Saving Time period, otherwise FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the input date is within Daylight Saving Time.", "fields": []}}
{"title": "FF_D4E Function Block", "description": "This function block implements a flip-flop behavior, setting output boolean values Q0 to Q3 based on the corresponding input boolean values D0 to D3 when a clock signal (CLK) is received, and resetting all outputs to FALSE when the reset signal (RST) is activated.", "type": "FUNCTION_BLOCK", "name": "FF_D4E", "input": [{"name": "D0", "type": "BOOL", "description": "Input boolean signal that sets output Q0."}, {"name": "D1", "type": "BOOL", "description": "Input boolean signal that sets output Q1."}, {"name": "D2", "type": "BOOL", "description": "Input boolean signal that sets output Q2."}, {"name": "D3", "type": "BOOL", "description": "Input boolean signal that sets output Q3."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal that triggers the setting of outputs."}, {"name": "RST", "type": "BOOL", "description": "Reset signal that clears all outputs."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output boolean signal representing the state set by D0."}, {"name": "Q1", "type": "BOOL", "description": "Output boolean signal representing the state set by D1."}, {"name": "Q2", "type": "BOOL", "description": "Output boolean signal representing the state set by D2."}, {"name": "Q3", "type": "BOOL", "description": "Output boolean signal representing the state set by D3."}], "in/out": [], "return_value": null}
{"title": "Calculate Angle from Vector", "description": "This function calculates the angle of a 3D vector in relation to its Y component, returning the angle in radians. It takes a vector input and processes it to determine the angle only if the vector's magnitude is greater than zero.", "type": "FUNCTION", "name": "V3_YANG", "input": [{"name": "A", "type": "Vector_3", "description": "A 3-dimensional vector for which the angle will be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed angle in radians based on the Y component of the vector.", "fields": []}}
{"title": "Convert Minutes to Time", "description": "This function converts a given input in minutes to a corresponding time format. The input is multiplied by 60000 to convert minutes to milliseconds and then converted to the TIME datatype.", "type": "FUNCTION", "name": "MINUTE_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input parameter representing the time in minutes to be converted."}], "output": [{"name": "MINUTE_TO_TIME", "type": "TIME", "description": "The output time value calculated from the input minutes."}], "in/out": [], "return_value": {"type": "TIME", "description": "The resulting time value after conversion from minutes.", "fields": []}}
{"title": "Complex Cosine Function", "description": "The CCOS function calculates the cosine of a complex number using the hyperbolic cosine function. It takes a complex number as input and returns its cosine value as a complex number.", "type": "FUNCTION", "name": "CCOS", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the cosine is to be calculated."}], "output": [{"name": "CCOS", "type": "complex", "description": "The cosine of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The result of the cosine calculation.", "fields": []}}
{"title": "Multiplexer Function", "description": "This function receives four input values and two boolean selection inputs to determine which input value to output. The selection of input values is based on the boolean values provided. If the first boolean (A1) is true, the function selects between IN2 and IN3 using A0; otherwise, it selects between IN0 and IN1.", "type": "FUNCTION", "name": "MUX_R4", "input": [{"name": "IN0", "type": "REAL", "description": "The first input value."}, {"name": "IN1", "type": "REAL", "description": "The second input value."}, {"name": "IN2", "type": "REAL", "description": "The third input value."}, {"name": "IN3", "type": "REAL", "description": "The fourth input value."}, {"name": "A0", "type": "BOOL", "description": "The first boolean selection input."}, {"name": "A1", "type": "BOOL", "description": "The second boolean selection input."}], "output": [{"name": "MUX_R4", "type": "REAL", "description": "The output value selected based on the input and selection parameters."}], "in/out": [], "return_value": {"type": "REAL", "description": "The selected output value based on the multiplexer logic."}}
{"title": "IS_ALPHA Function", "description": "This function checks if all characters in the given string are alphabetic. It returns TRUE if the string contains only alphabet characters and FALSE otherwise. The function also ensures that the string is not empty.", "type": "FUNCTION", "name": "IS_ALPHA", "input": [{"name": "str", "type": "STRING", "description": "The input string to be checked for alphabetic characters. It is defined with a specified maximum length.", "fields": []}], "output": [{"name": "IS_ALPHA", "type": "BOOL", "description": "A boolean value indicating whether the string consists solely of alphabetic characters.", "fields": []}], "in/out": [], "return_value": {"type": "BOOL", "description": "The return value of the function, indicating the result of the alphabet check.", "fields": []}}
{"title": "SRAMP Function Block", "description": "The SRAMP function block is designed to perform a ramping operation based on the input value 'X'. It controls the output 'Y' to reach the target value 'X' gradually, using specified acceleration and deceleration rates while respecting specified limits.", "type": "FUNCTION_BLOCK", "name": "SRAMP", "input": [{"name": "X", "type": "REAL", "description": "The target value that the output 'Y' should reach."}, {"name": "A_UP", "type": "REAL", "description": "The acceleration rate when ramping up towards the target value."}, {"name": "A_DN", "type": "REAL", "description": "The deceleration rate when ramping down away from the target value."}, {"name": "VU_MAX", "type": "REAL", "description": "The maximum speed limit when ramping up."}, {"name": "VD_MAX", "type": "REAL", "description": "The maximum speed limit when ramping down."}, {"name": "LIMIT_HIGH", "type": "REAL", "description": "The upper limit for the output 'Y'."}, {"name": "LIMIT_LOW", "type": "REAL", "description": "The lower limit for the output 'Y'."}, {"name": "RST", "type": "BOOL", "description": "A boolean reset signal. If true, it resets the internal states."}], "output": [{"name": "Y", "type": "REAL", "description": "The current output value of the function block, which is ramped towards 'X'."}, {"name": "V", "type": "REAL", "description": "The current speed of the ramping operation, determining how quickly 'Y' approaches 'X'."}], "in/out": [], "return_value": null}
{"title": "Mathematical Expression Evaluator", "description": "This function parses a mathematical expression provided as a string, extracts numbers and an operator, performs the corresponding mathematical operation, and returns the result as a string. It handles various mathematical operations such as addition, subtraction, multiplication, and division while ensuring proper formatting of the return value.", "type": "FUNCTION", "name": "EXEC", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string representing the mathematical expression to be evaluated."}], "output": [{"name": "EXEC", "type": "STRING", "description": "The result of the evaluated mathematical expression as a string."}], "in/out": [], "return_value": {"type": "string", "description": "The result or error message returned after evaluating the expression.", "fields": []}}
{"title": "Calculate Ellipse Circumference", "description": "This function computes the circumference of an ellipse given its semi-major axis (R1) and semi-minor axis (R2). The formula used is derived from Ramanujan's approximation for the circumference of an ellipse.", "type": "FUNCTION", "name": "ELLIPSE_C", "input": [{"name": "R1", "type": "REAL", "description": "The length of the semi-major axis of the ellipse."}, {"name": "R2", "type": "REAL", "description": "The length of the semi-minor axis of the ellipse."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed circumference of the ellipse.", "fields": []}}
{"title": "Speed Conversion Function Block", "description": "This function block performs conversions between various speed units: meters per second (m/s), kilometers per hour (km/h), knots (kn), and miles per hour (mh). The function block takes input values in each of these units and calculates their equivalent values.", "type": "FUNCTION_BLOCK", "name": "SPEED", "input": [{"name": "ms", "type": "REAL", "description": "Speed in meters per second (m/s)"}, {"name": "kmh", "type": "REAL", "description": "Speed in kilometers per hour (km/h)"}, {"name": "kn", "type": "REAL", "description": "Speed in knots (kn)"}, {"name": "mh", "type": "REAL", "description": "Speed in miles per hour (mh)"}], "output": [{"name": "Yms", "type": "REAL", "description": "Converted speed in meters per second (m/s)"}, {"name": "Ykmh", "type": "REAL", "description": "Converted speed in kilometers per hour (km/h)"}, {"name": "Ykn", "type": "REAL", "description": "Converted speed in knots (kn)"}, {"name": "Ymh", "type": "REAL", "description": "Converted speed in miles per hour (mh)"}], "in/out": [], "return_value": null}
{"title": "Exponential Function Base 10 Calculation", "description": "This function computes the base 10 exponential of a given real number input X. It leverages the natural exponential function by converting the base 10 exponent into a natural logarithm calculation.", "type": "FUNCTION", "name": "EXP10", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the base 10 exponential is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The output is the result of the base 10 exponential function for the input X."}}
{"title": "Integral Function Block", "description": "This function block implements an integration functionality with inputs for real numbers, control signals, and output limits. The block integrates the input value over time and maintains the output within specified limits.", "type": "FUNCTION_BLOCK", "name": "FT_INT2", "input": [{"name": "IN", "type": "REAL", "description": "The real input value to be integrated."}, {"name": "K", "type": "REAL", "description": "A scaling factor for the integration process. Default is 1.0."}, {"name": "RUN", "type": "BOOL", "description": "Boolean flag indicating whether the integration should be performed. Default is TRUE."}, {"name": "RST", "type": "BOOL", "description": "Boolean flag to reset the integration process when TRUE."}, {"name": "OUT_MIN", "type": "REAL", "description": "The minimum limit for the output value. Default is -1E+38."}, {"name": "OUT_MAX", "type": "REAL", "description": "The maximum limit for the output value. Default is 1E+38."}], "output": [{"name": "OUT", "type": "REAL", "description": "The result of the integration process."}, {"name": "LIM", "type": "BOOL", "description": "Boolean flag indicating whether the output value is within the specified limits."}], "in/out": [], "return_value": null}
{"title": "Latch Function Block", "description": "This function block implements a latch that holds a boolean state based on input conditions. The latch remains transparent while the L input is TRUE, allowing the D input value to be transferred to the output Q. An asynchronous reset input (RST) forces the output Q to FALSE regardless of the inputs.", "type": "FUNCTION_BLOCK", "name": "LTCH", "input": [{"name": "D", "type": "BOOL", "description": "The data input that is transferred to the output Q when the latch is transparent."}, {"name": "L", "type": "BOOL", "description": "The latch control input that determines whether the latch is transparent."}, {"name": "RST", "type": "BOOL", "description": "The asynchronous reset input that forces the output Q to FALSE."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output of the latch that reflects the state based on the inputs D and L."}], "in/out": [], "return_value": {}}
{"title": "Binary to DWORD Conversion", "description": "This function takes a binary string as input and converts it to a DWORD (32-bit unsigned integer) value. The function reads each character of the binary string, interpreting '0' as a zero bit and '1' as a one bit, and constructs the DWORD value accordingly.", "type": "FUNCTION", "name": "BIN_TO_DWORD", "input": [{"name": "BIN", "type": "STRING(40)", "description": "A binary string of length up to 40 characters, consisting of '0's and '1's, representing the binary number to be converted."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value obtained from the binary string conversion.", "fields": []}}
{"title": "Timed Pulse Generator", "description": "This function block generates a pulse output based on an input signal with a specified time duration. It provides a true output for the duration defined by the time parameter PT when a rising edge is detected on the input signal IN. After the duration elapses, the output is set to false.", "type": "FUNCTION_BLOCK", "name": "TP_X", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input for the triggering signal. A rising edge on this signal will start the pulse."}, {"name": "PT", "type": "TIME", "description": "Time duration for which the output Q will remain true after a rising edge is detected."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean output that indicates whether the pulse is currently active."}, {"name": "ET", "type": "TIME", "description": "Elapsed time since the pulse was activated."}], "in/out": [], "return_value": null}
{"title": "Timing Function Block", "description": "This function block is designed to measure elapsed time while a specified input signal is true, with options for resetting and managing maximum time constraints.", "type": "FUNCTION_BLOCK", "name": "M_T", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input that, when true, starts the timing measurement."}, {"name": "TMAX", "type": "TIME", "description": "The maximum allowable elapsed time that can be measured. Defaults to 14400 minutes."}, {"name": "RST", "type": "BOOL", "description": "A boolean input to reset the elapsed time measurements."}], "output": [{"name": "PT", "type": "TIME", "description": "The previous time value recorded before the reset or input changes."}, {"name": "ET", "type": "TIME", "description": "The elapsed time measured from the rising edge of the input signal."}], "in/out": [], "return_value": null}
{"title": "Buffer Search Function", "description": "The BUFFER_SEARCH function is designed to search for a specified string within a buffer of data, returning the position of the substring if found. The function allows for case-insensitive searching if the 'IGN' flag is set to true. The search is confined to a defined size of the buffer.", "type": "FUNCTION", "name": "BUFFER_SEARCH", "input": [{"name": "PT", "type": "POINTER TO ARRAY[0..32767] OF BYTE", "description": "A pointer to the array of bytes that represents the buffer to be searched."}, {"name": "SIZE", "type": "INT", "description": "The size of the buffer, indicating how many bytes can be considered for the search."}, {"name": "STR", "type": "STRING", "description": "The string to search for in the buffer."}, {"name": "POS", "type": "INT", "description": "The starting position in the buffer from which to begin the search."}, {"name": "IGN", "type": "BOOL", "description": "A boolean flag indicating whether the search should be case-insensitive (true) or case-sensitive (false)."}], "output": [{"name": "BUFFER_SEARCH", "type": "INT", "description": "The position at which the substring is found within the buffer, or -1 if the substring is not found."}], "in/out": [], "return_value": {"type": "INT", "description": "The function returns the index of the first occurrence of the substring in the buffer or -1 if not found."}}
{"title": "Buffer Insert Function", "description": "This function inserts a specified string into a buffer at a given position, shifting existing data to create space. It returns the next position after the inserted string.", "type": "FUNCTION", "name": "_BUFFER_INSERT", "input": [{"name": "STR", "type": "STRING[STRING_LENGTH]", "description": "The string to be inserted into the buffer."}, {"name": "POS", "type": "INT", "description": "The position in the buffer where the string will be inserted."}, {"name": "PT", "type": "POINTER TO ARRAY[0..32767] OF BYTE", "description": "A pointer to the buffer array where the string will be inserted."}, {"name": "SIZE", "type": "UINT", "description": "The size of the buffer."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The next position in the buffer after the inserted string."}}
{"title": "Output Calculation Function", "description": "This function calculates a 32-bit output value based on the input real number and specified constraints including bit manipulation for the sign. It applies limits to the input and computes the final output according to the provided high and low bounds.", "type": "FUNCTION", "name": "AOUT", "input": [{"name": "in", "type": "REAL", "description": "The input real number to be processed."}, {"name": "Bits", "type": "BYTE", "description": "The number of bits to be used in the output calculation."}, {"name": "sign", "type": "BYTE", "description": "The sign bit, defaults to 255 if not specified."}, {"name": "low", "type": "REAL", "description": "The lower limit for the input value."}, {"name": "high", "type": "REAL", "description": "The upper limit for the input value, defaults to 10.0 if not specified."}], "output": [{"name": "Aout", "type": "DWORD", "description": "The calculated 32-bit output value based on the processed input."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The final computed output value.", "fields": []}}
{"title": "Check if a String is Alphanumeric", "description": "This function checks whether a given string is alphanumeric, meaning it contains only letters and numbers. If the string is empty or contains any non-alphanumeric characters, the function returns false; otherwise, it returns true.", "type": "FUNCTION", "name": "IS_ALNUM", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string to be checked for alphanumeric characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the string is alphanumeric and not empty; otherwise returns false."}}
{"title": "Extract Byte from String at Position", "description": "This function extracts a single byte from a provided string at a specified position. The position must be within the valid range of the string, or a default value of 0 will be returned indicating an invalid operation.", "type": "FUNCTION", "name": "ExtractByteFromString", "input": [{"name": "STR", "type": "STRING[STRING_LENGTH]", "description": "The input string from which the byte will be extracted."}, {"name": "POS", "type": "INT", "description": "The position in the string from which to extract the byte. Must be between 1 and the length of the string."}], "output": [{"name": "CODE", "type": "BYTE", "description": "The byte extracted from the string at the specified position, or 0 if the position is invalid."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns the byte extracted from the string at the specified position, or 0 if the position is out of bounds."}}
{"title": "GEN_SQR Function Block", "description": "This function block generates a square wave signal based on the input parameters. It uses duty cycle (DC), amplitude (AM), and offset (OS) to determine the output signal. The block takes time parameters to control the frequency and timing of the generated signal.", "type": "FUNCTION_BLOCK", "name": "GEN_SQR", "input": [{"name": "PT", "type": "TIME", "description": "The period time for the square wave generation."}, {"name": "AM", "type": "REAL", "description": "The amplitude of the output signal. Default is 1.0."}, {"name": "OS", "type": "REAL", "description": "The offset value added to the output signal."}, {"name": "DC", "type": "REAL", "description": "The duty cycle of the square wave. Default is 0.5."}, {"name": "DL", "type": "REAL", "description": "The dead time. This is used to control the timing of the edges in the output signal."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating the current state of the square wave signal."}, {"name": "Out", "type": "REAL", "description": "The generated output value of the square wave signal."}], "in/out": [], "return_value": null}
{"title": "Bar Graph Function Block", "description": "The BAR_GRAPH function block processes input data to generate a bar graph representation based on specified trigger thresholds, alarm conditions, and scaling options. It outputs the status of various graphic elements indicating levels and alarms based on the input value.", "type": "FUNCTION_BLOCK", "name": "BAR_GRAPH", "input": [{"name": "X", "type": "REAL", "description": "The current value to be evaluated against the trigger thresholds."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to clear alarms and output states."}, {"name": "trigger_Low", "type": "REAL", "description": "The lower threshold for triggering the alarm and bar graph outputs."}, {"name": "trigger_High", "type": "REAL", "description": "The upper threshold for triggering the alarm and bar graph outputs."}, {"name": "Alarm_low", "type": "BOOL", "description": "Indicates if a low alarm is enabled."}, {"name": "Alarm_high", "type": "BOOL", "description": "Indicates if a high alarm is enabled."}, {"name": "log_scale", "type": "BOOL", "description": "Indicates if a logarithmic scale should be applied to the graph representation."}], "output": [{"name": "LOW", "type": "BOOL", "description": "Indicates if the value is below the low trigger threshold."}, {"name": "Q1", "type": "BOOL", "description": "Status of the first bar in the graph."}, {"name": "Q2", "type": "BOOL", "description": "Status of the second bar in the graph."}, {"name": "Q3", "type": "BOOL", "description": "Status of the third bar in the graph."}, {"name": "Q4", "type": "BOOL", "description": "Status of the fourth bar in the graph."}, {"name": "Q5", "type": "BOOL", "description": "Status of the fifth bar in the graph."}, {"name": "Q6", "type": "BOOL", "description": "Status of the sixth bar in the graph."}, {"name": "HIGH", "type": "BOOL", "description": "Indicates if the value is above the high trigger threshold."}, {"name": "Alarm", "type": "BOOL", "description": "Indicates if any alarm condition has been triggered."}, {"name": "Status", "type": "BYTE", "description": "Current status code indicating the state of the evaluation."}], "in/out": [], "return_value": null}
{"title": "Leap Year Day Check", "description": "This function checks whether a given date falls on a leap day (February 29th) by converting the date to its corresponding unsigned integer representation and using modular arithmetic.", "type": "FUNCTION", "name": "LEAP_DAY", "input": [{"name": "IDATE", "type": "DATE", "description": "The date to be checked for leap day."}], "output": [{"name": "LEAP_DAY", "type": "BOOL", "description": "A boolean value indicating whether the input date is a leap day."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the date is February 29th, otherwise false."}}
{"title": "JD2000 Function", "description": "The JD2000 function converts a given TIME input to a Julian Date format by calculating the number of days since the Julian epoch, which starts on January 1, 2000. The function takes a TIME input representing the date and time, converts it to DWORD, calculates the offset from the Julian epoch, and finally returns the result as a REAL number representing the Julian Date.", "type": "FUNCTION", "name": "JD2000", "input": [{"name": "DTI", "type": "TIME", "description": "The input time value to be converted to Julian Date format."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed Julian Date corresponding to the input TIME value.", "fields": []}}
{"title": "Filter Function Block", "description": "This FUNCTION_BLOCK implements a filtering mechanism that processes an integer input (X) and a time duration (T) to produce a filtered output (Y). The block initializes on startup and updates its internal state based on the system time and input value for enhanced filtering accuracy.", "type": "FUNCTION_BLOCK", "name": "FILTER_I", "input": [{"name": "X", "type": "INT", "description": "An integer input value to be filtered."}, {"name": "T", "type": "TIME", "description": "A time duration used to control the filtering process."}], "output": [{"name": "Y", "type": "INT", "description": "The filtered output value computed from the input."}], "in/out": [], "return_value": null}
{"title": "Complex Hyperbolic Cotangent Function", "description": "This function computes the hyperbolic cotangent (CATANH) of a complex number. It takes a complex input and returns the complex result of the hyperbolic cotangent operation applied to that input. The algorithm utilizes the natural logarithm and arctangent functions to derive the real and imaginary parts of the result.", "type": "FUNCTION", "name": "CATANH", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the hyperbolic cotangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The result of the hyperbolic cotangent operation, returned as a complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the hyperbolic cotangent result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the hyperbolic cotangent result."}]}}
{"title": "Character to String Conversion", "description": "This function converts a single BYTE character input into a string. The function takes a BYTE value and stores it as the first character of a string, ensuring that the string is properly null-terminated.", "type": "FUNCTION", "name": "CHR_TO_STRING", "input": [{"name": "C", "type": "BYTE", "description": "The byte value representing a character that needs to be converted to a string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "Returns the string representation of the input character, properly null-terminated."}}
{"title": "String to Byte Conversion", "description": "This function converts a string representation of a number to a byte value. The string can represent the number in various formats including binary, octal, hexadecimal, or decimal. The function identifies the format based on specific prefixes ('2#' for binary, '8#' for octal, '16#' for hexadecimal) and processes the string accordingly.", "type": "FUNCTION", "name": "FSTRING_TO_BYTE", "input": [{"name": "IN", "type": "STRING[12]", "description": "A string representation of a number, which can be in binary, octal, hexadecimal, or decimal format."}], "output": [{"name": "FSTRING_TO_BYTE", "type": "BYTE", "description": "The byte value converted from the input string representation."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The byte result of the conversion based on the provided input string."}}
{"title": "PWM_DC Function Block", "description": "This function block generates a pulse width modulation (PWM) signal based on a defined frequency (F) and duty cycle (DC). It calculates the time period for a given frequency and uses it to configure and control a clock signal, which is then used to create a pulse signal. The output signal indicates the state of the pulse.", "type": "FUNCTION_BLOCK", "name": "PWM_DC", "input": [{"name": "F", "type": "REAL", "description": "The frequency of the PWM signal in Hz."}, {"name": "DC", "type": "REAL", "description": "The duty cycle of the PWM signal, specified as a fraction (0.0 to 1.0)."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output state of the PWM signal, where TRUE indicates the pulse is active."}], "in/out": [], "return_value": null}
{"title": "Set Date and Time", "description": "This function sets the date and time based on the provided year, month, day, hour, minute, and second inputs. It converts the provided parameters into a DWORD format for proper date and time representation.", "type": "FUNCTION", "name": "SET_DT", "input": [{"name": "year", "type": "INT", "description": "The year to be set."}, {"name": "month", "type": "INT", "description": "The month to be set, ranging from 1 to 12."}, {"name": "day", "type": "INT", "description": "The day of the month to be set."}, {"name": "hour", "type": "INT", "description": "The hour of the day to be set, ranging from 0 to 23."}, {"name": "minute", "type": "INT", "description": "The minute of the hour to be set, ranging from 0 to 59."}, {"name": "second", "type": "INT", "description": "The second of the minute to be set, ranging from 0 to 59."}], "output": [], "in/out": [], "return_value": {"type": "DT", "description": "The date and time represented as a DWORD.", "fields": []}}
{"title": "Clock Divider Function Block", "description": "This function block implements a clock divider that generates multiple output signals based on a clock input signal. It also includes a reset feature that initializes the outputs and the internal counter.", "type": "FUNCTION_BLOCK", "name": "CLK_DIV", "input": [{"name": "clk", "type": "BOOL", "description": "The clock input signal used to increment the counter."}, {"name": "rst", "type": "BOOL", "description": "The reset input signal that initializes the counter and output states."}], "output": [{"name": "Q0", "type": "BOOL", "description": "The first output bit representing the least significant bit of the counter."}, {"name": "Q1", "type": "BOOL", "description": "The second output bit of the counter."}, {"name": "Q2", "type": "BOOL", "description": "The third output bit of the counter."}, {"name": "Q3", "type": "BOOL", "description": "The fourth output bit of the counter."}, {"name": "Q4", "type": "BOOL", "description": "The fifth output bit of the counter."}, {"name": "Q5", "type": "BOOL", "description": "The sixth output bit of the counter."}, {"name": "Q6", "type": "BOOL", "description": "The seventh output bit of the counter."}, {"name": "Q7", "type": "BOOL", "description": "The eighth output bit representing the most significant bit of the counter."}], "in/out": [], "return_value": null}
{"title": "Buffer Initialization Function", "description": "This function initializes a buffer with a specified byte value. It ensures that the buffer is properly aligned for 32-bit access, filling in the required number of bytes either individually or in blocks of 32 bits until the entire specified size is initialized.", "type": "FUNCTION", "name": "_BUFFER_INIT", "input": [{"name": "PT", "type": "POINTER TO BYTE", "description": "Pointer to the buffer that needs to be initialized."}, {"name": "SIZE", "type": "UINT", "description": "The size in bytes of the buffer to be initialized."}, {"name": "INIT", "type": "BYTE", "description": "The byte value with which to initialize the buffer."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE upon successful initialization of the buffer."}}
{"title": "Real2 Addition Function", "description": "This function performs addition operations involving a Real2 derived type and a REAL type. It updates the Real2 output structure based on the provided inputs.", "type": "FUNCTION", "name": "R2_ADD", "input": [{"name": "X", "type": "Real2", "description": "A derived type that contains two real numbers, RX and R1."}, {"name": "Y", "type": "REAL", "description": "A real number that will be added to the components of the Real2 input."}], "output": [{"name": "R2_ADD", "type": "REAL2", "description": "The output structure of type Real2 containing the results of the addition operations."}], "in/out": [], "return_value": {"type": "REAL2", "description": "The resulting Real2 structure after performing the addition.", "fields": [{"name": "RX", "type": "REAL", "description": "The result of adding Y, X.R1, and X.RX."}, {"name": "R1", "type": "REAL", "description": "The result of computing temp minus RX, plus Y, and X.R1."}]}}
{"title": "Langevin Function", "description": "The function calculates the Langevin value based on the input parameter X. If X is 0, the function returns 0.0. Otherwise, it computes the Langevin value using the formula COTH(X) - 1.0 / X.", "type": "FUNCTION", "name": "LANGEVIN", "input": [{"name": "X", "type": "REAL", "description": "Input parameter representing a real number."}], "output": [{"name": "LANGEVIN", "type": "REAL", "description": "The calculated Langevin value based on the input parameter X."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the Langevin value, which is a real number calculated based on the input X."}}
{"title": "Find Maximum Value in an Array", "description": "This function is designed to find and return the maximum value from a specified array of real numbers. It takes a pointer to an array and its size as inputs, iterates through the array, and identifies the largest value.", "type": "FUNCTION", "name": "ARRAY_MAX", "input": [{"name": "pt", "type": "ARRAY[0..32000] OF REAL", "description": "A pointer to an array of real numbers from which the maximum value is to be found."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The maximum value found in the array.", "fields": []}}
{"title": "Selective Output Block for Three Inputs", "description": "This function block processes three boolean inputs to generate two boolean outputs based on logical conditions and a time delay. The output Q is determined by the logical OR of combinations of the inputs, while the output W is influenced by the elapsed time from a timer dependent on the XOR condition of the inputs.", "type": "FUNCTION_BLOCK", "name": "SEL2_OF_3B", "input": [{"name": "IN1", "type": "BOOL", "description": "First boolean input."}, {"name": "IN2", "type": "BOOL", "description": "Second boolean input."}, {"name": "IN3", "type": "BOOL", "description": "Third boolean input."}, {"name": "TD", "type": "TIME", "description": "Time duration for the delay timer."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output boolean indicating the result of the OR logic on the inputs."}, {"name": "W", "type": "BOOL", "description": "Output boolean representing the state of the timer output."}], "in/out": [], "return_value": null}
{"title": "Insert into List Function", "description": "This function inserts a given string into a list at a specified position, using a separator byte. It checks for space in the list before proceeding with the insertion and returns a boolean indicating the success of the operation.", "type": "FUNCTION", "name": "LIST_INSERT", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator byte used to tokenize the list."}, {"name": "POS", "type": "INT", "description": "The position in the list where the new string should be inserted."}, {"name": "INS", "type": "STRING(LIST_LENGTH)", "description": "The string that will be inserted into the list."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The list into which the string will be inserted."}], "return_value": {"type": "BOOL", "description": "Returns TRUE if the string was successfully inserted, otherwise FALSE."}}
{"title": "Convert Octal String to Byte", "description": "This function converts an octal string (up to 10 characters long) into its corresponding byte value. Each character in the octal string should represent a digit from 0 to 7. The function processes each character by converting it from its ASCII value to the corresponding decimal value and combines them to form the final byte value.", "type": "FUNCTION", "name": "OCT_TO_BYTE", "input": [{"name": "OCT", "type": "STRING[10]", "description": "An octal string consisting of up to 10 characters representing values in the octal numeral system."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting byte value obtained from converting the octal string.", "fields": []}}
{"title": "AIN Function for Analog Input Conversion", "description": "The AIN function converts a digital input value to a real value based on given parameters including sign bit, low/high range, and bit length. The function correctly handles both signed and unsigned values.", "type": "FUNCTION", "name": "AIN", "input": [{"name": "in", "type": "DWORD", "description": "The digital input value to be converted."}, {"name": "Bits", "type": "BYTE", "description": "The number of bits that represent the valid portion of the digital input."}, {"name": "sign", "type": "BYTE", "description": "The position of the sign bit in the input value; defaults to 255 indicating no sign bit."}, {"name": "low", "type": "REAL", "description": "The lower limit of the output range."}, {"name": "high", "type": "REAL", "description": "The upper limit of the output range; defaults to 10.0."}], "output": [{"name": "AIN", "type": "REAL", "description": "The converted real value based on the input and specified parameters."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting real value after conversion from the digital input."}}
{"title": "Calculate Sun Midday Time", "description": "This function calculates the local noon time (sun midday) for a given longitude and UTC date. The calculation takes into account the offset derived from the day of the year and applies it to a standard noon time.", "type": "FUNCTION", "name": "SUN_MIDDAY", "input": [{"name": "LON", "type": "REAL", "description": "The longitude in degrees for which the noon time is to be calculated."}, {"name": "UTC", "type": "DATE", "description": "The UTC date based on which the midday time will be computed."}], "output": [{"name": "SUN_MIDDAY", "type": "TOD", "description": "The calculated time of day representing the sun midday for the specified location."}], "in/out": [], "return_value": {"type": "TOD", "description": "The resulting time of day after adjusting for the calculated offset from standard noon.", "fields": []}}
{"title": "Sign Function (SGN)", "description": "This function calculates the sign of a given real number. It returns 1 if the input number is greater than zero, -1 if the input number is less than zero, and 0 if the input number is exactly zero.", "type": "FUNCTION", "name": "SGN", "input": [{"name": "X", "type": "REAL", "description": "The real number for which the sign is to be determined."}], "output": [{"name": "SGN", "type": "INT", "description": "The sign of the input number, which will be 1, -1, or 0."}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the sign of the input number as an integer value.", "fields": []}}
{"title": "Scalar Multiplication of a 3D Vector", "description": "This function takes a 3-dimensional vector and a scalar (real number) as input, multiplies each component of the vector by the scalar, and returns the resulting vector.", "type": "FUNCTION", "name": "V3_SMUL", "input": [{"name": "A", "type": "Vector_3", "description": "The 3-dimensional vector that is to be multiplied by the scalar.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the vector."}]}, {"name": "M", "type": "REAL", "description": "The scalar multiplier to be applied to each component of the vector."}], "output": [{"name": "V3_SMUL", "type": "Vector_3", "description": "The resulting vector after multiplication by the scalar.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the resulting vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the resulting vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the resulting vector."}]}], "in/out": [], "return_value": {"type": "Vector_3", "description": "The resulting vector formed by multiplying each component of the input vector by the scalar.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the resulting vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the resulting vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the resulting vector."}]}}
{"title": "Convert Omega to Frequency", "description": "This function takes an input represented as 'OM' (Omega) and converts it into a frequency value by dividing it by the constant value of 2 times pi. The output of the function is a real number that represents the frequency.", "type": "FUNCTION", "name": "OM_TO_F", "input": [{"name": "OM", "type": "REAL", "description": "The input value representing Omega (angular velocity) in real number format."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The function returns the computed frequency as a real number value.", "fields": []}}
{"title": "DT Simulation Function Block", "description": "This function block simulates a time-based increment based on an input start time and a speed factor. It calculates the elapsed time using the PLC system timer, modifies the time according to the speed, and updates the output with the new time value.", "type": "FUNCTION_BLOCK", "name": "DT_SIMU", "input": [{"name": "START", "type": "DT", "description": "The starting date and time value for the simulation."}, {"name": "SPEED", "type": "REAL", "description": "The speed factor that modifies the time increment, with a default value of 1.0."}], "output": [{"name": "DTS", "type": "DT", "description": "The updated date and time value after applying the simulation logic."}], "in/out": [], "return_value": null}
{"title": "Standard Deviation Calculation", "description": "This function calculates the standard deviation of an array of real numbers. It takes as input a pointer to an array of real numbers and the size of the array. The standard deviation is calculated as the square root of the variance of the given array.", "type": "FUNCTION", "name": "ARRAY_SDV", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to an array of real numbers whose standard deviation is to be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating the number of elements in the input array."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated standard deviation of the input array of real numbers."}}
{"title": "Temperature Conversion", "description": "This function block performs temperature conversions from Kelvin to Celsius, Fahrenheit, Rankine, and Réaumur. The block takes an input temperature in Kelvin and converts it to other temperature scales using specified conversion formulas.", "type": "FUNCTION_BLOCK", "name": "TEMPERATURE", "input": [{"name": "K", "type": "REAL", "description": "Input temperature in Kelvin."}, {"name": "C", "type": "REAL", "description": "Celsius conversion base value, initialized to -273.15."}, {"name": "F", "type": "REAL", "description": "Fahrenheit conversion base value, initialized to -459.67."}, {"name": "Re", "type": "REAL", "description": "Réaumur conversion base value, initialized to -218.52."}, {"name": "Ra", "type": "REAL", "description": "Rankine value to be converted."}], "output": [{"name": "YK", "type": "REAL", "description": "Converted temperature in Kelvin."}, {"name": "YC", "type": "REAL", "description": "Converted temperature in Celsius."}, {"name": "YF", "type": "REAL", "description": "Converted temperature in Fahrenheit."}, {"name": "YRe", "type": "REAL", "description": "Converted temperature in Réaumur."}, {"name": "YRa", "type": "REAL", "description": "Converted temperature in Rankine."}], "in/out": [], "return_value": null}
{"title": "Calculate the Inverse Hyperbolic Cotangent", "description": "This function computes the inverse hyperbolic cotangent (ACOTH) of a given real number X. The result is calculated using the natural logarithm of the expression (X + 1) divided by (X - 1), scaled by 0.5. It takes a single real number as input and returns a real number as output.", "type": "FUNCTION", "name": "ACOTH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the inverse hyperbolic cotangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated inverse hyperbolic cotangent of the input value X."}}
{"title": "Extract Specific Word from DWORD", "description": "This function takes a 32-bit unsigned integer (DWORD) and an 8-bit unsigned integer (BYTE) as inputs. It extracts a specific 16-bit unsigned integer (WORD) from the input DWORD. The extraction is based on shifting operations, where the BYTE parameter determines which word to extract from the DWORD by shifting left and right accordingly.", "type": "FUNCTION", "name": "WORD_OF_DWORD", "input": [{"name": "in", "type": "DWORD", "description": "The input DWORD from which the WORD will be extracted."}, {"name": "N", "type": "BYTE", "description": "The index of the WORD to extract from the DWORD, where N specifies which 16-bit segment to retrieve."}], "output": [{"name": "WORD_OF_DWORD", "type": "WORD", "description": "The output WORD extracted from the input DWORD at the specified index N."}], "in/out": [], "return_value": {"type": "WORD", "description": "The extracted 16-bit unsigned integer (WORD) from the input DWORD.", "fields": []}}
{"title": "Interlock Function Block", "description": "This function block implements an interlock mechanism where two input signals are processed with a specified time delay before affecting the output signals. The outputs will be enabled based on the current state of the inputs and the delay condition.", "type": "FUNCTION_BLOCK", "name": "INTERLOCK", "input": [{"name": "I1", "type": "BOOL", "description": "First input signal."}, {"name": "I2", "type": "BOOL", "description": "Second input signal."}, {"name": "TL", "type": "TIME", "description": "Time delay for the interlock mechanism."}], "output": [{"name": "Q1", "type": "BOOL", "description": "Output signal 1, reflects the state of I1 considering the delay of I2."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2, reflects the state of I2 considering the delay of I1."}], "in/out": [], "return_value": null}
{"title": "PID Controller Function Block", "description": "This function block implements a PID (Proportional, Integral, Derivative) controller. It takes a process variable input and calculates a control output based on defined PID parameters. It also incorporates limits to the output and reset functionality.", "type": "FUNCTION_BLOCK", "name": "FT_PIDW", "input": [{"name": "IN", "type": "REAL", "description": "The input process variable that the PID controller will process."}, {"name": "KP", "type": "REAL", "description": "The proportional gain of the PID controller, defaults to 1.0."}, {"name": "TN", "type": "REAL", "description": "The integral time constant of the PID controller, defaults to 1.0."}, {"name": "TV", "type": "REAL", "description": "The derivative time constant of the PID controller, defaults to 1.0."}, {"name": "LIM_L", "type": "REAL", "description": "The lower limit for the output, defaults to -1E+38."}, {"name": "LIM_H", "type": "REAL", "description": "The upper limit for the output, defaults to 1E+38."}, {"name": "RST", "type": "BOOL", "description": "A reset flag that when true resets the integral component of the controller."}], "output": [{"name": "Y", "type": "REAL", "description": "The calculated control output of the PID controller."}, {"name": "LIM", "type": "BOOL", "description": "A flag indicating whether the output is within the defined limits."}], "in/out": [], "return_value": null}
{"title": "Date and Time Formatting Function", "description": "This function takes a DateTime input and produces a formatted string representation based on the specified format and language settings. It decodes the DateTime input to extract date and time components and applies the formatting rules defined in the format string.", "type": "FUNCTION", "name": "DT_TO_STRF", "input": [{"name": "DTI", "type": "TIME_DT", "description": "Date and Time Input representing the DateTime value to format."}, {"name": "MS", "type": "INT", "description": "Additional Integer Input specifying milliseconds."}, {"name": "FMT", "type": "STRING", "description": "Format String Input that defines the desired output format for the DateTime."}, {"name": "LANG", "type": "INT", "description": "Language Input that specifies the language for formatting the output."}], "output": [{"name": "DT_TO_STRF", "type": "string", "description": "Formatted string representation of the DateTime based on the input format and language."}], "in/out": [], "return_value": {"type": "string", "description": "The formatted string output of the function.", "fields": []}}
{"title": "Random Duty Cycle Generator", "description": "This function block generates a random duty cycle signal based on a specified period (PT) and modulation parameters (AM for amplitude and OS for offset). The output signal can be used for various automation and control applications.", "type": "FUNCTION_BLOCK", "name": "GEN_RDM", "input": [{"name": "PT", "type": "TIME", "description": "The time period for the duty cycle generation."}, {"name": "AM", "type": "REAL", "description": "The amplitude factor that scales the random signal, default value is 1."}, {"name": "OS", "type": "REAL", "description": "The offset added to the generated random signal."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating whether the output signal is active."}, {"name": "Out", "type": "REAL", "description": "The generated output signal based on the random duty cycle."}], "in/out": [], "return_value": null}
{"title": "String Truncation and Padding Function", "description": "This function modifies a given string based on specified length and fill character settings. It allows truncating, padding, or centering the string with fill characters depending on the input parameters.", "type": "FUNCTION", "name": "FIX", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be modified."}, {"name": "L", "type": "INT", "description": "The length to which the string should be truncated or padded."}, {"name": "C", "type": "BYTE", "description": "The character used for padding the string."}, {"name": "M", "type": "INT", "description": "The mode for string modification: 1 for left truncate/pad, 2 for center pad."}], "output": [{"name": "FIX", "type": "string", "description": "The modified string after truncation and/or padding."}], "in/out": [], "return_value": {"type": "string", "description": "Returns the modified string after performing the specified operations."}}
{"title": "Hour Extraction from DateTime", "description": "This function extracts the hour part from a given DateTime value. The input is a DateTime variable, and the function performs a calculation to convert it to an integer representing the hour of the day.", "type": "FUNCTION", "name": "HOUR_OF_DT", "input": [{"name": "XDT", "type": "DT", "description": "A DateTime value from which the hour will be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "An integer representing the hour part of the given DateTime value, in the range of 0 to 23."}}
{"title": "Bit Load Function", "description": "This function manipulates bits of a BYTE input based on specified parameters. It performs bitwise operations and shifts to output a modified BYTE value. The operation differs based on the state of a boolean input.", "type": "FUNCTION", "name": "BIT_LOAD_B2", "input": [{"name": "I", "type": "BYTE", "description": "The BYTE value to manipulate."}, {"name": "D", "type": "BOOL", "description": "Condition to determine which operation to perform."}, {"name": "P", "type": "INT", "description": "The number of bit positions to shift in the operations."}, {"name": "N", "type": "INT", "description": "The number of bits to be loaded or shifted."}], "output": [{"name": "BIT_LOAD_B2", "type": "BYTE", "description": "The resulting BYTE value after performing the bitwise operations."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Computed BYTE value after bit manipulation based on inputs.", "fields": []}}
{"title": "Finite Time Derivative Calculation", "description": "This function block calculates the finite time derivative of an input signal over time, with a configurable scaling factor. It takes the current input value, the time since the last update, and computes the rate of change, while preventing division by zero. The block initializes on the first startup and computes the derivative only when the system is running and the time delta is greater than zero.", "type": "FUNCTION_BLOCK", "name": "FT_DERIV", "input": [{"name": "in", "type": "REAL", "description": "Current input value to be differentiated."}, {"name": "K", "type": "REAL", "description": "Scaling factor for the derivative calculation, default is 1.0."}, {"name": "run", "type": "BOOL", "description": "Boolean to indicate if the calculation should be performed, default is TRUE."}], "output": [{"name": "out", "type": "REAL", "description": "Calculated derivative value based on the input."}], "in/out": [], "return_value": null}
{"title": "Calculate Volume of a Sphere", "description": "This function calculates the volume of a sphere given its radius. The volume is computed using the formula V = (4/3) * π * r^3. The function takes the radius of the sphere as an input and returns the computed volume as a real number.", "type": "FUNCTION", "name": "SPHERE_V", "input": [{"name": "rx", "type": "REAL", "description": "The radius of the sphere."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated volume of the sphere."}}
{"title": "Sample High-Low Average Calculation", "description": "This function block calculates the average, high, and low values from a set of sampled inputs. It uses a specified time parameter to trigger the sampling and processes a defined number of samples to compute the required statistics.", "type": "FUNCTION_BLOCK", "name": "SH_2", "input": [{"name": "in", "type": "REAL", "description": "The input value to be sampled for calculations."}, {"name": "PT", "type": "TIME", "description": "The time period for triggering the sample calculations."}, {"name": "N", "type": "INT", "description": "The number of samples to consider for the average and high/low calculations. Default value is 16."}, {"name": "disc", "type": "INT", "description": "The disc value used in determining the sampling range."}], "output": [{"name": "out", "type": "REAL", "description": "The most recent input value that has been sampled."}, {"name": "trig", "type": "BOOL", "description": "Indicates whether the sampling trigger has occurred."}, {"name": "avg", "type": "REAL", "description": "The average value computed from the sampled inputs."}, {"name": "high", "type": "REAL", "description": "The highest value among the sampled inputs."}, {"name": "low", "type": "REAL", "description": "The lowest value among the sampled inputs."}], "in/out": [], "return_value": null}
{"title": "SH_T Function Block", "description": "The SH_T function block takes a real number input and a boolean enable signal. If the enable signal (E) is true, it passes the input value (IN) to the output (OUT). If E is false, the output remains unchanged.", "type": "FUNCTION_BLOCK", "name": "SH_T", "input": [{"name": "IN", "type": "REAL", "description": "The input value that will be passed to the output when enabled."}, {"name": "E", "type": "BOOL", "description": "The enable signal that determines whether the input is passed to the output."}], "output": [{"name": "OUT", "type": "REAL", "description": "The output value that reflects the input value when enabled."}], "in/out": [], "return_value": null}
{"title": "Bitwise Load with Rotation", "description": "This function performs a bitwise load operation with a rotation based on the input parameters. It uses conditional logic to determine whether to rotate left or apply a mask, depending on the boolean input parameter.", "type": "FUNCTION", "name": "BIT_LOAD_DW2", "input": [{"name": "I", "type": "DWORD", "description": "The input DWORD value to be manipulated."}, {"name": "D", "type": "BOOL", "description": "A boolean flag to determine the operation mode: TRUE for rotation left, FALSE for mask application."}, {"name": "P", "type": "INT", "description": "The number of bit positions to rotate or shift."}, {"name": "N", "type": "INT", "description": "The number of bits to be shifted left or right from the maximum DWORD value."}], "output": [{"name": "BIT_LOAD_DW2", "type": "DWORD", "description": "The resulting DWORD value after the bitwise load operation."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The value obtained from the bit manipulation operations, as specified by the input parameters."}}
{"title": "Dead Zone Function", "description": "This function calculates the dead zone effect based on the input value X and a threshold L. If the absolute value of X exceeds L, the function returns X; otherwise, it returns 0.0.", "type": "FUNCTION", "name": "DEAD_ZONE", "input": [{"name": "X", "type": "REAL", "description": "Input variable X of type REAL which is evaluated against the threshold L."}, {"name": "L", "type": "REAL", "description": "Input variable L of type REAL which serves as the threshold for the dead zone."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the dead zone calculation, which is either the value of X if |X| > L or 0.0 if |X| <= L."}}
{"title": "Time Check Function", "description": "The TIMECHECK function determines whether a given time (TD) falls within a specified time range defined by START and STOP. It handles two cases: when the STOP time is less than the START time (indicating a time range that spans midnight) and when the STOP time is greater than or equal to the START time.", "type": "FUNCTION", "name": "TIMECHECK", "input": [{"name": "TD", "type": "TOD", "description": "The time of day to check against the range."}, {"name": "START", "type": "TOD", "description": "The start time of the range."}, {"name": "STOP", "type": "TOD", "description": "The stop time of the range."}], "output": [{"name": "TIMECHECK", "type": "BOOL", "description": "Returns TRUE if TD falls within the time range; otherwise, returns FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates the result of the time check operation.", "fields": []}}
{"title": "GDF Function Calculation", "description": "This function calculates a value based on the input X, which is a real number. The behavior of the function is determined by the value of X and follows specific conditional rules. If X is zero, the output is zero. If X is greater than 15.0, the output is a predefined mathematical constant (math.PI05). If X is less than -15.0, the output is the negative of that constant. For values of X between -15.0 and 15.0, the output is calculated using the ATAN and EXP functions.", "type": "FUNCTION", "name": "GDF", "input": [{"name": "X", "type": "REAL", "description": "Input parameter representing a real number which will influence the output based on defined conditions."}], "output": [{"name": "GDF", "type": "REAL", "description": "Output parameter which is a real number calculated based on the value of the input parameter X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated result based on the input parameter X according to specific conditional logic."}}
{"title": "Flow Meter Function Block", "description": "This function block computes the flow measurement based on the input velocity (VX) and maintains the state of measurement through various parameters. It handles initialization, pulse operation, integration, and calculates the current flow rate based on the update time.", "type": "FUNCTION_BLOCK", "name": "FLOW_METER", "input": [{"name": "VX", "type": "REAL", "description": "Input velocity for flow calculation."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the flow measurement."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to initialize flow measurement parameters."}, {"name": "PULSE_MODE", "type": "BOOL", "description": "Flag to indicate if the flow meter is operating in pulse mode."}, {"name": "UPDATE_TIME", "type": "TIME", "description": "Time interval for updating flow calculation. Default is 1 second."}], "output": [{"name": "F", "type": "REAL", "description": "Calculated flow rate based on input parameters."}], "in/out": [{"name": "X", "type": "REAL", "description": "Current flow measurement value."}, {"name": "Y", "type": "UDINT", "description": "Counter for flow measurements, incremented based on calculated results."}], "return_value": null}
{"title": "Complex Addition Function", "description": "This function takes two complex numbers as input and returns their sum as a complex number. The operation is performed by adding the real parts and the imaginary parts of the input complex numbers separately.", "type": "FUNCTION", "name": "CADD", "input": [{"name": "X", "type": "complex", "description": "The first complex number to be added."}, {"name": "Y", "type": "complex", "description": "The second complex number to be added."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The resulting complex number obtained from the addition of X and Y.", "fields": [{"name": "re", "type": "real", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "real", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Calculate Circle Segment Area", "description": "This function calculates the area of a circle segment given the radius (RX) and height (HX) of the segment. The function first checks if the radius is greater than zero. If it is, it proceeds to compute the angle of the segment and then calculates the area using the formula for a circle segment.", "type": "FUNCTION", "name": "CIRCLE_SEG", "input": [{"name": "RX", "type": "REAL", "description": "The radius of the circle."}, {"name": "HX", "type": "REAL", "description": "The height of the circle segment."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The area of the circle segment calculated using the provided radius and height."}}
{"title": "Power Calculation Function", "description": "This function computes the power of a given base raised to a specified exponent and multiplies it by a coefficient.", "type": "FUNCTION", "name": "F_POWER", "input": [{"name": "a", "type": "REAL", "description": "The coefficient to multiply with the result of the exponentiation."}, {"name": "x", "type": "REAL", "description": "The base value which will be raised to the power of n."}, {"name": "n", "type": "REAL", "description": "The exponent value to which the base x will be raised."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the calculation, which is the coefficient multiplied by the base raised to the exponent.", "fields": []}}
{"title": "Polynomial Evaluation Function", "description": "This function computes the value of a polynomial at a given point X using an array of coefficients C. The polynomial is represented in the form P(X) = c[0] + c[1]*X + c[2]*X^2 + ... + c[7]*X^7. The function should return the computed polynomial value as a REAL number.", "type": "FUNCTION", "name": "F_POLY", "input": [{"name": "X", "type": "REAL", "description": "The input value at which the polynomial is to be evaluated."}, {"name": "C", "type": "ARRAY[0..7] OF REAL", "description": "An array of coefficients for the polynomial, where each index corresponds to the coefficient for X to the power of the index."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting value of the polynomial evaluated at X."}}
{"title": "Calculate Beginning of Year Date", "description": "This function calculates the beginning date of a given year in the format of a DATE type. The year is provided as an integer input, which is then processed to return the corresponding date.", "type": "FUNCTION", "name": "YEAR_BEGIN", "input": [{"name": "y", "type": "INT", "description": "The year for which to calculate the beginning date."}], "output": [{"name": "YEAR_BEGIN", "type": "DATE", "description": "The date representing the beginning of the specified year."}], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated beginning date of the year based on the provided input year."}}
{"title": "Easter Date Calculation", "description": "This function calculates the date of Easter Sunday for a given year using algorithms to determine the date based on the Gregorian calendar. It should return a DATE type that represents Easter Sunday for the specified year.", "type": "FUNCTION", "name": "EASTER", "input": [{"name": "year", "type": "INT", "description": "The year for which the Easter date should be calculated, provided as an integer."}], "output": [{"name": "EASTER", "type": "DATE", "description": "The calculated date of Easter Sunday for the specified year."}], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated date of Easter Sunday for the year input.", "fields": []}}
{"title": "Multiplexer Function", "description": "This function implements a multiplexer that selects one of two input values based on a boolean condition. If the boolean input 'A' is true, the function returns 'IN0'; otherwise, it returns 'IN1'.", "type": "FUNCTION", "name": "MUX_R2", "input": [{"name": "IN0", "type": "REAL", "description": "First input value to be selected from."}, {"name": "IN1", "type": "REAL", "description": "Second input value to be selected from."}, {"name": "A", "type": "BOOL", "description": "Boolean selector that determines which input value to return."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The selected input value based on the condition provided by 'A'."}}
{"title": "Toggle Bit in Word", "description": "This function toggles a specific bit in a given WORD input. The bit position to toggle is specified by the POS parameter. The output is the modified WORD with the specified bit changed from 0 to 1 or from 1 to 0.", "type": "FUNCTION", "name": "BIT_TOGGLE_W", "input": [{"name": "IN", "type": "WORD", "description": "The WORD input value whose specific bit is to be toggled."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be toggled, where 0 represents the least significant bit."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The resulting WORD after toggling the specified bit.", "fields": []}}
{"title": "Read and Compute Data with Bit Manipulation", "description": "This function takes a DWORD input, processes it to compute a DWORD output by performing bit counting and mathematical operations, including multiplication with constants PI and E, as well as bitwise shifting and logical OR operations.", "type": "FUNCTION", "name": "RDMDW", "input": [{"name": "last", "type": "DWORD", "description": "The DWORD value used for bit counting and subsequent mathematical operations."}], "output": [{"name": "RDMDW", "type": "DWORD", "description": "The resulting DWORD after applying bit manipulation and mathematical computations based on the input value."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The final computed DWORD value returned from the function."}}
