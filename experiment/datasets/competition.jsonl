{"title": "原料配比工艺控制", "description": "设计一个PLC程序来控制一种原料配比工艺，该工艺需要按照特定的要求混合三种原料，并通过阀门D送至下一工艺流程。系统需要支持手动和自动两种操作模式，并能够在急停信号触发时安全停止所有设备。\n控制要求：\n急停逻辑：#estop(=FALSE)信号用于紧急停止所有设备。\n手动模式：#opeMode=false，手动控制阀门A、B、C、D和搅拌电机的启停。\n自动模式：#opeMode=true，设备按照工艺流程自动运行。\n实现急停逻辑，确保在急停信号触发时所有设备立即停止运行。\n在手动模式下，实现对阀门和搅拌电机的手动启停控制。\n例如，按一下阀A启动按钮valveAStart（触发一个上升沿），则阀A运行（valveARun=TRUE）；再按一下阀A启动按钮valveAStart（触发一个上升沿），则阀A停止（valveARun=FALSE）。\n在自动模式下，根据工艺流程实现以下控制逻辑：\n按一下自动启动按钮autoStart，启动自动流程，首先打开阀门A。\n当液位传感器#levelSensor达到50cm时，关闭阀门A，打开阀门B。\n当液位传感器达到80cm时，关闭阀门B。\n根据#processMode：\n如果#processMode=false，启动搅拌电机；接收到搅拌完成信号后关闭搅拌电机，打开阀门D，自动流程结束。\n如果#processMode=true，打开阀门C；当液位传感器达到100cm时，关闭阀门C，启动搅拌电机；接收到搅拌完成信号后关闭搅拌电机，打开阀门D，自动流程结束。", "type": "FUNCTION_BLOCK", "name": "MaterialMixing", "input": [{"name": "estop", "type": "Bool", "description": "急停信号\nFALSE: 急停触发\nTRUE: 无急停触发"}, {"name": "opeMode", "type": "Bool", "description": "操作模式\nFALSE: 手动操作模式\nTRUE: 自动操作模式"}, {"name": "valveAStart", "type": "Bool", "description": "阀A启动按钮"}, {"name": "valveBStart", "type": "Bool", "description": "阀B启动按钮"}, {"name": "valveCStart", "type": "Bool", "description": "阀C启动按钮"}, {"name": "valveDStart", "type": "Bool", "description": "阀D启动按钮"}, {"name": "mixMotorStart", "type": "Bool", "description": "搅拌电机启动按钮"}, {"name": "autoStart", "type": "Bool", "description": "自动启动按钮"}, {"name": "processMode", "type": "Bool", "description": "工艺模式"}, {"name": "levelSensor", "type": "Int", "description": "液位传感器（单位cm）"}, {"name": "mixMotorComplete", "type": "Bool", "description": "搅拌完成信号"}], "output": [{"name": "valveARun", "type": "Bool", "description": "阀A运行命令"}, {"name": "valveBRun", "type": "Bool", "description": "阀B运行命令"}, {"name": "valveCRun", "type": "Bool", "description": "阀C运行命令"}, {"name": "valveDRun", "type": "Bool", "description": "阀D运行命令"}, {"name": "mixMotorRun", "type": "Bool", "description": "搅拌电机运行命令"}]}
{"title": "矩阵乘法", "description": "编写一个函数，实现两个矩阵的乘法功能。\n该函数接收两个可变长度的二维浮点数数组matrix1和matrix2作为输入参数。\n当execute=TRUE时，启动计算。", "type": "FUNCTION", "name": "MatrixMulti", "input": [{"name": "execute", "type": "Bool", "description": "启动计算"}, {"name": "matrix1", "type": "Array[*, *] of Real", "description": "输入矩阵1"}, {"name": "matrix2", "type": "Array[*, *] of Real", "description": "输入矩阵2"}], "in/out": [{"name": "matrixResult", "type": "Array[*, *] of Real", "description": "输出计算结果矩阵"}]}
{"title": "输送线控制系统", "description": "设计一个PLC程序来控制一个输送线系统，该系统用于将三种不同规格的工件分别运输到指定的仓库，并根据工件的编号和规格信息进行分类存储。\n控制要求：\n输送线从起始工位开始，依次经过1#工位、2#工位、3#工位。\n每个工位都有检测元件，用于检测是否有工件存在。\n工件具有规格信息和唯一的编号，系统需要根据规格将工件运输到对应工位，并存储到相应仓库。\n工件规格分类：\n小型工件：1#仓库\n中型工件：2#仓库\n大型工件：3#仓库\n当起始站传感器SensorStart检测到有工件，并且按下启动按钮StartButton时，触发传送带运行命令ConveyorRun=true。根据工件规格PartSpec，将工件运输到对应工位，对应工位的传感器（Sensor1、Sensor2、Sensor3）检测到工件后，传送带停止ConveyorRun=false。对应工位卸货完成后（相应UnloadComplete1、UnloadComplete2、UnloadComplete3为TRUE），把工件编号PartNumber存储到对应的数据库（WarehouseDatabase1、WarehouseDatabase2、WarehouseDatabase3）中。", "type": "FUNCTION_BLOCK", "name": "ConveyorSystem", "input": [{"name": "StartButton", "type": "Bool", "description": "启动按钮"}, {"name": "SensorStart", "type": "Bool", "description": "起始站传感器"}, {"name": "Sensor1", "type": "Bool", "description": "1#站传感器"}, {"name": "Sensor2", "type": "Bool", "description": "2#站传感器"}, {"name": "Sensor3", "type": "Bool", "description": "3#站传感器"}, {"name": "UnloadComplete1", "type": "Bool", "description": "1#站卸货完成信号"}, {"name": "UnloadComplete2", "type": "Bool", "description": "2#站卸货完成信号"}, {"name": "UnloadComplete3", "type": "Bool", "description": "3#站卸货完成信号"}, {"name": "PartSpec", "type": "Int", "description": "工件规格"}, {"name": "PartNumber", "type": "Int", "description": "工件编号"}], "output": [{"name": "ConveyorRun", "type": "Bool", "description": "传送带运行"}, {"name": "WarehouseDatabase1", "type": "Array[1..10] of Int", "description": "1#仓库数据库"}, {"name": "WarehouseDatabase2", "type": "Array[1..10] of Int", "description": "2#仓库数据库"}, {"name": "WarehouseDatabase3", "type": "Array[1..10] of Int", "description": "3#仓库数据库"}]}
{"title": "多元素队列", "description": "编写一个函数块FB，实现一个先进先出循环队列的功能，可以支持多个元素的入队或出队操作，队列的最大长度是可变的。\n循环队列应能够支持以下操作：\n1. 入队操作（push）：在队列queue空间足够的情况下，将多个元素添加到队列的队尾。要添加的元素由起始位置itemIndex和长度itemLen在元素数组item指定。\n2. 出队操作（pop）：在队列queue元素足够的情况下，从队列的队首移出多个元素，移出的数量由itemLen指定，移到item中，从起始位置itemIndex存放。\n3. 复位操作（reset）：清除队列中的所有元素\n4. 获取队列信息：返回队列中当前元素的数量和可用空间。", "type": "FUNCTION_BLOCK", "name": "RingQueueMultiItem", "input": [{"name": "push", "type": "Bool", "description": "入队操作"}, {"name": "pop", "type": "Bool", "description": "出队操作"}, {"name": "reset", "type": "Bool", "description": "复位操作"}, {"name": "itemIndex", "type": "UDInt", "description": "入队元素或出队元素起始位置"}, {"name": "itemLen", "type": "UDInt", "description": "入队元素或出队元素长度"}], "output": [{"name": "queueUsed", "type": "DInt", "description": "队列中元素的数量"}, {"name": "queueUnused", "type": "DInt", "description": "队列中剩余的空间"}], "in/out": [{"name": "item", "type": "Array[*] of Byte", "description": "用于加入队列或从队列返回的值"}, {"name": "queue", "type": "Array[*] of Byte", "description": "用于作为队列的数组"}]}
{"title": "批量高低字对调", "description": "编写一个PLC程序，该程序接收2个可变长度的双字数组dataIn和dataOut。程序的目标是将dataIn中的每个双字进行高低字对调并依次存储到dataOut中。如果两个数组的长度不一致，则根据较短的数组长度进行处理。程序还要输出实际交换的双字数量swapNum\n例如，dataIn=[16#11223344]，则dataOut=[16#33441122]", "type": "FUNCTION", "name": "SwapDWord", "input": [{"name": "dataIn", "type": "Array[*] of DWord", "description": "待交换的双字数组"}], "output": [{"name": "swapNum", "type": "DInt", "description": "实际交换的双字数量"}], "in/out": [{"name": "dataOut", "type": "Array[*] of DWord", "description": "交换后的双字数组"}]}
{"title": "自定义获取字符串", "description": "编写一个函数FC，该函数能够根据给定的起始字符串和结束字符串，从字符数组中截取符合要求的子字符串。\n说明：\n1. 函数应遍历charArray，从查找的起始位置startPos开始查找textBefore首次出现的位置，然后查找随后出现的textAfter的位置。\n2. 如果找到了textBefore和textAfter，函数应截取这两个边界之间的字符串（如果includeBeforeAfter=FALSE，不包括边界字符本身，反之，则包括边界字符本身），并返回这个子字符串retString。同时还应返回截取的字符串首字符在数组中的位置，以及截取的字符串长度。", "type": "FUNCTION", "name": "GetString", "input": [{"name": "textBefore", "type": "String", "description": "要截取的字符串的起始边界"}, {"name": "textAfter", "type": "String", "description": "要截取的字符串的结束边界"}, {"name": "includeBeforeAfter", "type": "Bool", "description": "FALSE: 不包括边界\nTRUE: 包括边界"}, {"name": "startPos", "type": "DInt", "description": "要从数组的查找的起始位置，0对应第一个元素"}], "output": [{"name": "retString", "type": "String", "description": "截取的字符串"}, {"name": "position", "type": "DInt", "description": "截取的字符串首字符在数组中的位置，0对应第一个元素"}, {"name": "length", "type": "Int", "description": "截取的字符串长度"}], "in/out": [{"name": "charArray", "type": "Variant", "description": "要在其中进行搜索的字符或字节数组"}]}
{"title": "车位管理系统", "description": "设计一个PLC程序来控制工厂内用于停放运货小车的车库管理系统。车库有3行5列共15个车位，需要实现小车的入库和出库控制，并按照特定原则分配和释放车位。\n控制要求：\n车位信息定义：每个车位都有两个状态，占用状态（布尔类型）和车辆数据（整数类型，车辆编号）。\n小车入库规则：\n按照车位先用后行再用前行、先用后列再用前列的原则分配车位。\n入库时，小车提供车辆编号信息。\n车位信息需要更新为新的占用状态和车辆编号。\n小车出库规则：\n按照车位先前行再后行，先前列再后列的原则释放车位。\n出库车位的占用状态需要设置为未占用，并清除车辆编号。", "type": "FUNCTION_BLOCK", "name": "TruckGarage", "input": [{"name": "enter", "type": "Bool", "description": "入库操作请求"}, {"name": "exit", "type": "Bool", "description": "出库操作请求"}, {"name": "VehicleNumber", "type": "Int", "description": "要入库的车辆编号"}], "output": [{"name": "truck", "type": "Struct", "description": "要出库的车辆信息", "fields": {"row": {"type": "Int", "description": "要出库的车辆所在的行位置"}, "col": {"type": "Int", "description": "要出库的车辆所在的列位置"}, "VehicleNumber": {"type": "Int", "description": "要出库的车辆编号"}}}], "in/out": [{"name": "garage", "type": "Array[1..3, 1..5] of Struct", "description": "车库信息", "fields": {"Occupied": {"type": "Bool", "description": "TRUE：该车位上有车辆\nFALSE：该车位上无车辆"}, "VehicleNumber": {"type": "Int", "description": "车位上的车辆编号"}}}]}
{"title": "柔性加工控制", "description": "一个自动化生产线由5个工作站组成：从左到右依次是1#~5#站。其中1#站用于原料上料站，2#~4#用于加工产品，5#站用于成品输出存放。\n生产线有一个电机，负责将产品从一个工作站移动到下一个工作站。每个工作站都有一个传感器（用于检测产品是否到达）。\n每种产品加工的顺序和次数不同，由加工序列processSequence指定。加工序列processSequence是数组类型，存放工作站的序号，系统根据站号自动把原料送到相应的工作站进行加工。\n控制要求：\n生产开始时，1#站传感器sensor1检测到原料，按下1#站启动按钮station1Start，系统查询加工序列processSequence的首个元素，并启动传送带运行把原料送到相应工作站后停止，接收到相应工作站的加工完成信号（station2Complete~station4Complete）后，继续查询加工序列processSequence下一个元素，判断传送带运行方向，并启动传送带运行（conveyorLeft、conveyorRight）。直到送到5#工作站。", "type": "FUNCTION_BLOCK", "name": "FlexibleProduction", "input": [{"name": "sensor1", "type": "Bool", "description": "1#站检测传感器"}, {"name": "sensor2", "type": "Bool", "description": "2#站检测传感器"}, {"name": "sensor3", "type": "Bool", "description": "3#站检测传感器"}, {"name": "sensor4", "type": "Bool", "description": "4#站检测传感器"}, {"name": "sensor5", "type": "Bool", "description": "5#站检测传感器"}, {"name": "station1Start", "type": "Bool", "description": "1#站启动按钮"}, {"name": "station2Complete", "type": "Bool", "description": "2#站加工完成信号"}, {"name": "station3Complete", "type": "Bool", "description": "3#站加工完成信号"}, {"name": "station4Complete", "type": "Bool", "description": "4#站加工完成信号"}], "output": [{"name": "conveyorLeft", "type": "Bool", "description": "传送带左转"}, {"name": "conveyorRight", "type": "Bool", "description": "传送带右转"}], "in/out": [{"name": "processSequence", "type": "Array[1..8] of USInt", "description": "加工序列"}]}
{"title": "分离字节到位", "description": "编编写一个PLC程序，该程序接收一个可变长度的字节数组byteArray和一个可变长度的布尔数组bitArray。程序的目标是将byteArray中的每个字节依次分离到bitArray中，确保每个字节的8位都被分离和存储。如果bitArray的长度不足以存储所有位，则只分离到bitArray能够容纳的最大整数个字节的位数。程序还要输出实际分离的字节数量splitByteNum\n例如，byteArray=[16#2D]，则bitArray=[1,0,1,1,0,1,0,0]", "type": "FUNCTION", "name": "SplitByteArray", "input": [{"name": "byteArray", "type": "Array[*] of Byte", "description": "待分离的字节数组"}], "output": [{"name": "splitByteNum", "type": "DInt", "description": "实际分离的字节数量"}], "in/out": [{"name": "bitArray", "type": "Array[*] of Bool", "description": "分离后的布尔数组"}]}
{"title": "机械手控制", "description": "设计一个PLC程序来控制一个自动化机械手，该机械手在生产线上执行搬运任务。机械手具备六个基本动作：下行、上行、左行、右行、夹紧和松开。机械手的操作模式有四种：手动、单步、单周期和连续。\n控制要求：\n1. 手动模式：允许操作员通过控制面板单独控制机械手的每个动作，前提是还没到位。例如，按住下行按钮（DownButton=1），如果未处于下行到位（DownLimitSwitch=0），则下行（MoveDown=1）；如果下行到位（DownLimitSwitch=1），则停止下行。松开下行按钮DownButton，也停止下行。\n2. 单步模式：机械手根据预设程序自动执行一个动作，每个动作完成后需要操作员确认才能执行下一个动作。\n机械手的初始位置在左上方。\n当按一下启动按钮Start时，机械手执行下行命令MoveDown，下行到位后停止。\n当再一下启动按钮Start时，机械手执行夹紧命令ActivateGrip，夹紧到位后停止。\n当再一下启动按钮Start时，机械手执行上行命令MoveUp，上行到位后停止。\n当按一下启动按钮Start时，机械手执行右行命令MoveRight，右行到位后停止。\n当按一下启动按钮Start时，机械手执行下行命令MoveDown，下行到位后停止。\n当按一下启动按钮Start时，机械手执行松开命令ActivateRelease，松开到位后停止。\n当再一下启动按钮Start时，机械手执行上行命令MoveUp，上行到位后停止。\n当再一下启动按钮Start时，机械手执行左行命令MoveLeft，左行到位后停止。\n接着从头开始循环\n3. 单周期模式：机械手自动完成一次完整的搬运循环，包括所有预设动作，循环结束后停止等待操作员指令。\n机械手的初始位置在左上方，当按一下启动按钮Start时：\n机械手首先下行，下行到位后夹紧，夹紧到位后上行，上行到位后右行，右行到位后下行，下行到位后松开，松开到位后上行，上行到位后左行，左行到位后停止。\n4. 连续模式：机械手的初始位置在左上方，当按一下启动按钮Start时，机械手连续执行单周期模式的搬运循环。\n5. 紧急停止功能能够在任何时候停止机械手的所有动作。", "type": "FUNCTION_BLOCK", "name": "MechanicalArm", "input": [{"name": "ManualMode", "type": "Bool", "description": "手动模式"}, {"name": "SingleStepMode", "type": "Bool", "description": "单步模式"}, {"name": "SingleCycleMode", "type": "Bool", "description": "单周期模式"}, {"name": "ContinuousMode", "type": "Bool", "description": "连续模式"}, {"name": "EmergencyStop", "type": "Bool", "description": "急停信号\nFALSE: 急停触发\nTRUE: 无急停触发"}, {"name": "Start", "type": "Bool", "description": "启动操作"}, {"name": "DownButton", "type": "Bool", "description": "下行按钮"}, {"name": "UpButton", "type": "Bool", "description": "上行按钮"}, {"name": "LeftButton", "type": "Bool", "description": "左行按钮"}, {"name": "RightButton", "type": "Bool", "description": "右行按钮"}, {"name": "GripButton", "type": "Bool", "description": "夹紧按钮"}, {"name": "ReleaseButton", "type": "Bool", "description": "松开按钮"}, {"name": "DownLimitSwitch", "type": "Bool", "description": "下行到位开关"}, {"name": "UpLimitSwitch", "type": "Bool", "description": "上行到位开关"}, {"name": "LeftLimitSwitch", "type": "Bool", "description": "左行到位开关"}, {"name": "RightLimitSwitch", "type": "Bool", "description": "右行到位开关"}, {"name": "GripLimitSwitch", "type": "Bool", "description": "夹紧到位开关"}, {"name": "ReleaseLimitSwitch", "type": "Bool", "description": "松开到位开关"}], "output": [{"name": "MoveDown", "type": "Bool", "description": "下行命令"}, {"name": "MoveUp", "type": "Bool", "description": "上行命令"}, {"name": "MoveLeft", "type": "Bool", "description": "左行命令"}, {"name": "MoveRight", "type": "Bool", "description": "右行命令"}, {"name": "ActivateGrip", "type": "Bool", "description": "夹紧命令"}, {"name": "ActivateRelease", "type": "Bool", "description": "松开命令"}]}
{"title": "生产控制", "description": "一个自动化生产线由5个工作站组成：上料站、清洗站、称重站、烧制站和成品站。生产线有一个电机，负责将产品从一个工作站移动到下一个工作站，生成线的顺序是从上料站、清洗站、称重站、烧制站和成品站。每个工作站都有一个传感器（用于检测产品是否到达）。\n控制要求：\n1. 模式切换：转换开关（Mode）用于切换生产线的手动和自动模式。\n2. 手动模式：在手动模式下，电机正转按钮（ForwardButton）控制电机正转，电机反转按钮（ReverseButton）控制电机反转，正反转操作需要互锁，不能同时进行。\n3. 自动模式：\n   - 原料到达上料站，SensorFeed检测到原料，电机启动正转，将原料移动到清洗站。\n   - 原料到达清洗站，SensorWash检测到原料，电机停止，当接收到清洗完成信号washComplete后，电机启动正转，将原料移动到称重站。\n   - 原料到达称重站，SensorWeight检测到原料，电机停止，当接收到称重完成信号后，根据重量值判断原料是否合格，如果重量值大于等于100并且小于等于200，则为合格，否则不合格。\n     如果是不合格的原料，则启动剔除命令kick。\n     如果是合格的原料，则根据重量值计算烧制温度。计算的规则是，重量值100到200线性对应温度值500到550。输出烧制温度firingTemp。同时电机启动正转，将原料移动到烧制站。\n   - 产品到达烧制站，SensorFiring检测到原料，电机停止，当接收到烧制完成信号firingComplete后，电机启动正转，将产品移动到成品站。\n   - 产品到达成品站，SensorOutput检测到产品，电机停止，加工完成指示灯（CompletionLight）亮起，指示产品加工完成。当产品被取走，也就是SensorOutput检测不到产品了，加工完成指示灯（CompletionLight）熄灭。", "type": "FUNCTION_BLOCK", "name": "ProductionControl", "input": [{"name": "Mode", "type": "Bool", "description": "用于切换生产线的手动和自动模式，0=手动模式，1=自动模式"}, {"name": "ForwardButton", "type": "Bool", "description": "正转按钮"}, {"name": "ReverseButton", "type": "Bool", "description": "反转按钮"}, {"name": "SensorFeed", "type": "Bool", "description": "原料到达输入站传感器"}, {"name": "SensorWash", "type": "Bool", "description": "清洗站检测到原料传感器"}, {"name": "SensorWeight", "type": "Bool", "description": "称重站检测到原料传感器"}, {"name": "SensorFiring", "type": "Bool", "description": "烧制站检测到原料传感器"}, {"name": "SensorOutput", "type": "Bool", "description": "成品站检测到产品传感器"}, {"name": "washComplete", "type": "Bool", "description": "清洗完成信号"}, {"name": "weightComplete", "type": "Bool", "description": "称重完成信号"}, {"name": "weight", "type": "Real", "description": "重量值"}, {"name": "firingComplete", "type": "Bool", "description": "烧制完成信号"}], "output": [{"name": "MotorForward", "type": "Bool", "description": "电机正转输出"}, {"name": "MotorReverse", "type": "Bool", "description": "电机反转输出"}, {"name": "kick", "type": "Bool", "description": "剔除输出"}, {"name": "CompletionLight", "type": "Bool", "description": "产品加工完成指示灯"}, {"name": "firingTemp", "type": "Real", "description": "烧制温度"}]}
{"title": "报警处理", "description": "在工业自动化系统中，对设备状态的监控是至关重要的。当设备参数超出正常范围时，系统需要发出报警。为了避免因参数的微小波动频繁触发报警，需要实现带有迟滞功能的报警管理系统。\n当Value大于hiLevel时，触发高报警hiAlarm。\n当Value小于hiLevel-hystWindow时，退出高报警hiAlarm。\n当Value小于loLevel时，触发低报警loAlarm。\n当Value大于loLevel+hystWindow时，退出低报警loAlarm。\n如果loLevel大于等于hiLevel，则输出错误error=true，status=16#8001，并退出程序\n如果迟滞窗口值hystWindow大于等于高低限偏差范围hiLevel - loLevel，则输出错误error=true，status=16#8002", "type": "FUNCTION_BLOCK", "name": "AlarmProcess", "input": [{"name": "Value", "type": "Real", "description": "输入值"}, {"name": "hiLevel", "type": "Real", "description": "高限报警值"}, {"name": "loLevel", "type": "Real", "description": "低限报警值"}, {"name": "hystWindow", "type": "Real", "description": "迟滞窗口"}], "output": [{"name": "hiAlarm", "type": "Bool", "description": "高限报警"}, {"name": "loAlarm", "type": "Bool", "description": "低限报警"}, {"name": "error", "type": "Bool", "description": "FALSE: 没有发生错误;\nTRUE: 执行FB时出错"}, {"name": "status", "type": "Word", "description": "状态代码"}]}
{"title": "奇偶校验", "description": "编写一个PLC程序，该程序接收一个可变数据类型的数据value，可以是word、Dword或LWord数据类型。程序的目标是计算数据value的二进制值中的1的个数countBitsTrue，并且根据设置的校验模式odd，返回校验结果，同时程序也输出数据value的二进制值中的0的个数countBitsFalse。\n\n如果odd=FALSE，则为偶校验：当countBitsTrue为偶数时，返回校验结果为TRUE，反之，返回校验结果为FALSE。\n如果odd=TRUE，则为奇校验：当countBitsTrue为奇数时，返回校验结果为TRUE，反之，返回校验结果为FALSE。", "type": "FUNCTION", "name": "ParityVariant", "input": [{"name": "value", "type": "Variant", "description": "待校验的数据"}, {"name": "odd", "type": "Bool", "description": "校验模式\nFALSE: 偶校验\nTRUE: 奇校验"}], "output": [{"name": "countBitsFalse", "type": "USInt", "description": "数据中为FALSE的个数"}, {"name": "countBitsTrue", "type": "USInt", "description": "数据中为TRUE的个数"}], "return_value": [{"type": "Bool", "description": "校验结果"}]}
{"title": "模拟量批量处理", "description": "在工业自动化应用中，模拟量信号通常需要被转换成特定的工程单位或量程。编写一个PLC程序，该程序能够批量读取模拟输入信号，并将其转换到指定的量程范围。\n该程序接收一个模拟量值输入数组analogValues和一个用于通道设置及转换输出的数组channels，由输入参数count指定实际总共的通道数量，通道从数组的首个元素开始的连续元素。每个通道由enable来启动转换，转换根据模式measuringMode进行不同规则的转换。\n当measuringMode=0时，为非温度测量模式：\n此模式还需要根据极性bipolar进行转换，bipolar=0时，为单极性，则把模拟量输入值analogValues的0到27648，线性对应到输出值outputValue的下限loLIM到上限hiLIM；bipolar=1时，为双极性，则把模拟量输入值analogValues的-27648到27648，线性对应到输出值outputValue的下限loLIM到上限hiLIM。\n当measuringMode=1时，为标准型温度测量模式：\n此模式输出值outputValue为 模拟量输入值analogValues的十分之一。\n当measuringMode=2时，为气候型温度测量模式：\n此模式输出值outputValue为 模拟量输入值analogValues的百分之一。\n程序还要求检测输入参数的正确性：\n如果measuringMode为除0、1、2以外的值，则retVal=16#8001，该通道不做转换；\n如果hiLIM小于等于loLIM，则retVal=16#8002，该通道不做转换。", "type": "FUNCTION_BLOCK", "name": "AIConvert", "input": [{"name": "count", "type": "DInt", "description": "待转换的通道数量"}], "in/out": [{"name": "analogValues", "type": "Array[*] of Int", "description": "输入的各通道模拟量值数组"}, {"name": "channels", "type": "Array[*] of Struct", "description": "各通道的设置及转换后的输出值", "fields": [{"name": "enable", "type": "Bool", "description": "本通道启用转换"}, {"name": "hiLIM", "type": "Real", "description": "上限"}, {"name": "loLIM", "type": "Real", "description": "下限"}, {"name": "bipolar", "type": "Bool", "description": "FALSE: 单极性\nTRUE: 双极性"}, {"name": "measuringMode", "type": "Int", "description": "0: 非温度测量\n1: 标准型温度测量\n2: 气候型温度测量"}, {"name": "retVal", "type": "Word", "description": "状态信息"}, {"name": "outputValue", "type": "Real", "description": "转换后的输出值"}]}]}
{"title": "合并字节", "description": "编写一个PLC程序，该程序接收一个可变长度的字节数组byteArray和一个可变长度的双字数组dwordArray。程序的目标是将byteArray中的每个字节依次合并到dwordArray中。按照每4个字节合并到1个双字的原则，如果byteArray的长度不是4的倍数，则余数部分不做合并。如果dwordArray的长度不足以存储所有双字，则超出部分不做合并。程序还要输出实际合并的双字数量mergeDwordNum\n例如，byteArray=[16#11，16#22，16#33，16#44]，则dwordArray =[16#44332211]", "type": "FUNCTION", "name": "MergeByteArray", "input": [{"name": "byteArray", "type": "Array[*] of Byte", "description": "待合并的字节数组"}], "output": [{"name": "mergeDwordNum", "type": "DInt", "description": "实际合并的双字数量"}], "in/out": [{"name": "dwordArray", "type": "Array[*] of DWord", "description": "合并后的双字数组"}]}
{"title": "移位寄存器", "description": "编写一个PLC程序，该程序接收一个可变数据类型的数组buffer，实现对数组的移位操作。\n可以实现左移（shiftLeft=TRUE），即，高索引号元素移向低索引号。\n也可以实现右移（shiftRight=TRUE），即，低索引号元素移向高索引号。\n移动的长度根据移动范围shiftRange。\n移动后的空位以初始值initialItem覆盖。\n清除操作（clear=TRUE）时，数组所有元素初始化为初始值initialItem。", "type": "FUNCTION_BLOCK", "name": "ShiftSequence", "input": [{"name": "shiftLeft", "type": "Bool", "description": "向左移动"}, {"name": "shiftRight", "type": "Bool", "description": "向右移动"}, {"name": "shiftRange", "type": "UInt", "description": "移动范围"}, {"name": "clear", "type": "Bool", "description": "清除操作"}, {"name": "initialItem", "type": "Variant", "description": "初始值"}], "in/out": [{"name": "buffer", "type": "Variant", "description": "待移动的数组队列"}]}
{"title": "大小写字符转换", "description": "编写一个PLC程序，该程序接收一个字符串In，根据转换模式mode进行转换操作，并返回转换后的字符串。\n如果mode=FALSE，则为小写转换为大写模式，即把字符串中的所有小写字符都转换为大写字符\n如果mode=TRUE，则反之，即把字符串中的所有大写字符都转换为小写字符\n例如，In='ABCD1234efgh'，mode=TRUE，则返回字符串'abcd1234efgh'", "type": "FUNCTION", "name": "StringCovert", "input": [{"name": "In", "type": "String", "description": "待转换的字符串"}, {"name": "mode", "type": "Bool", "description": "转换模式"}], "return_value": [{"type": "String", "description": "转换后的字符串"}]}
{"title": "多数据类型选择排序", "description": "编写一个函数块FB，实现一个选择排序算法的升序排序功能。该函数块应接受一个可变长度可变数据类型（包括Sint、Int、DInt、Lint、Real、LReal、USint、UInt、UDInt、ULint）的数组，并将排序后的结果写回到原数组中。\n根据程序执行结果，输出相应的错误状态和状态代码：\n16#0000：执行FB没有出错\n16#8A01：队列seq不是数组类型", "type": "FUNCTION_BLOCK", "name": "SelectSort", "input": [{"name": "exe", "type": "Bool", "description": "启动排序"}], "output": [{"name": "error", "type": "Bool", "description": "FALSE: 没有发生错误\nTRUE: 执行FB时出错"}, {"name": "status", "type": "Word", "description": "状态代码"}], "in/out": [{"name": "seq", "type": "Variant", "description": "待排序的数组"}]}
{"title": "多泵切换控制系统", "description": "在一个工业供水系统中，有5个泵，每个泵可以独立控制。系统需要支持手动和自动两种工作模式。\n根据mode变量的值，切换到相应的工作模式。\n在手动模式下，根据pumpGroup[1..5].selection的值，控制选中泵的启动和停止。\n在自动模式下，比较各个泵的优先级高低，按照三用两备的方式，自动选择优先级较高的3个泵进行供水。", "type": "FUNCTION_BLOCK", "name": "MultiPumpCtrl", "input": [{"name": "mode", "type": "Bool", "description": "FALSE: 手动模式\nTRUE: 自动模式"}, {"name": "start", "type": "Bool", "description": "启动按钮，用于启动手动选择或自动选择的泵"}, {"name": "stop", "type": "Bool", "description": "停止按钮，用于停止所有泵"}], "in/out": [{"name": "pumpGroup", "type": "Array[1..5] of Struct", "description": "泵组控制结构", "fields": {"priority": {"type": "Int", "description": "表示每个泵的优先级，值越大，优先级越高"}, "selection": {"type": "Bool", "description": "在手动模式下是否选中该泵，TRUE=选中该泵"}, "RunComd": {"type": "Bool", "description": "泵运行命令，TRUE=运行，FALSE=停止"}}}]}
{"title": "基于双向链表的配方管理系统", "description": "某工厂的生产线需要根据不同的配方生产多种产品。生产线的控制中心需要一个配方管理系统，允许操作员添加配方数据。\n控制要求：\n配方数据应包括原料类型、原料比例和生产温度。\n系统应允许输入新的配方数据，并将其存储在配方数据库中。\n说明：\n1. 配方以结构体Struct数据类型构建，结构体内包括原料类型ingredientType、原料比例ingredientRatio和生产温度productionTemperature。\n使用双向链表来管理配方数据库，每个配方有两个指针Prev和Next，Prev指向前一条配方位置，Next指向后一条配方位置。\nPrev为-1表示链表的第一条记录\nNext为-1表示链表的最后一条记录\n如果两个指针Prev和Next都为-1，表示空记录\n2. 在添加配方时：\n如果配方数据库是空表，则添加在数组的首位置，并把Next指向数组的第二个位置；\n如果配方数据库不是空表，则新配方添加在链表尾部。", "type": "FUNCTION", "name": "AddRecipeLinkedList", "input": [{"name": "exe", "type": "Bool", "description": "启动添加配方"}, {"name": "recipeAdded", "type": "Struct", "description": "要添加的配方", "fields": [{"name": "ingredientType", "type": "Int", "description": "原料类型"}, {"name": "ingredientRatio", "type": "Real", "description": "原料比例"}, {"name": "productionTemperature", "type": "Real", "description": "生产温度"}]}], "in/out": [{"name": "recipeList", "type": "Array[0..19] of Struct", "description": "配方数据库", "fields": [{"name": "Prev", "type": "DInt", "description": "前项指针，指向前一条配方的数组索引号"}, {"name": "Next", "type": "DInt", "description": "后项指针，指向后一条配方的数组索引号"}, {"name": "recipe", "type": "Struct", "description": "配方", "fields": [{"name": "ingredientType", "type": "Int", "description": "原料类型"}, {"name": "ingredientRatio", "type": "Real", "description": "原料比例"}, {"name": "productionTemperature", "type": "Real", "description": "生产温度"}]}]}]}
