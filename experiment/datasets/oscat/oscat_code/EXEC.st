FUNCTION EXEC : string
VAR_INPUT
    str : STRING[STRING_LENGTH];
END_VAR

VAR
    pos : INT;
    R1 : REAL;
    R2 : REAL;
    operator : STRING[10];
END_VAR
(* extract both numbers and operator *)
EXEC := UPPERCASE(TRIM(str));

pos := FINDB_NONUM(EXEC);
IF pos > 1 THEN R1 := STRING_TO_REAL(LEFT(EXEC,pos-1)); END_IF;
R2 := STRING_TO_REAL(RIGHT(EXEC,LEN(EXEC)-pos));
EXEC := LEFT(EXEC,pos);
pos := FINDB_NUM(EXEC);
operator := RIGHT(EXEC,LEN(EXEC) - pos);
IF operator = '' AND LEN(str) = 0 THEN
	EXEC := '';
	RETURN;
ELSIF operator = '' THEN
	EXEC := str;
	RETURN;
END_IF;
IF operator = '^' THEN
	EXEC := REAL_TO_STRING(EXPT(R1, R2));
ELSIF operator = 'SQRT' THEN
	EXEC := REAL_TO_STRING(SQRT(R2));
ELSIF operator = 'SIN' THEN
	EXEC := REAL_TO_STRING(SIN(r2));
ELSIF operator = 'COS' THEN
	EXEC := REAL_TO_STRING(COS(r2));
ELSIF operator = 'TAN' THEN
	EXEC := REAL_TO_STRING(TAN(R2));
ELSIF operator = '*' THEN
	EXEC := REAL_TO_STRING(R1 * R2);
ELSIF operator = '/' THEN
	IF R2 <> 0 THEN EXEC := REAL_TO_STRING(R1 / R2); ELSE EXEC := 'ERROR'; END_IF;
ELSIF operator = '+' THEN
	EXEC := REAL_TO_STRING(r1 + r2);
ELSIF operator = '-' THEN
	EXEC := REAL_TO_STRING(r1 - r2);
ELSE
	EXEC := 'ERROR';
END_IF;

IF EXEC = 'ERROR' THEN
	RETURN;
(* some systems deliver integer instead of real *)
ELSIF FIND(EXEC,'.') = 0 THEN
	EXEC := CONCAT(EXEC, '.0');
(* some systems deliver n. instead of n.0 ! *)
ELSIF RIGHT(EXEC,1) = '.' THEN
	EXEC := CONCAT(EXEC,'0');
END_IF;


(* revision history

hm 	6.feb 2007		rev 1.1
	cos has to be written in uppercase
	divide by 0 will return an error

hm	5. mar. 2008	rev 1.2
	add a 0 to the string if a '.' is at the end of the string

hm	20. mar. 2008	rev 1.3
	make sure the function always returns a real value in the form of x.y

hm	29. mar. 2008	rev 1.4
	changed STRING to STRING(STRING_LENGTH)
*)
END_FUNCTION
